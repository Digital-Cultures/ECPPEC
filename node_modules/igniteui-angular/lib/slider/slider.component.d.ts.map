{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2, TemplateRef, OnDestroy, ChangeDetectorRef, AfterContentChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { Subject } from 'rxjs';\nimport { IRangeSliderValue, SliderType, ISliderValueChangeEventArgs } from './slider.common';\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\nexport declare class IgxSliderComponent implements ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, AfterContentChecked, OnDestroy {\n    private renderer;\n    private _el;\n    private _cdr;\n    private _pMin;\n    private _pMax;\n    private _hasViewInit;\n    private _minValue;\n    private _maxValue;\n    private _lowerBound?;\n    private _upperBound?;\n    private _lowerValue?;\n    private _upperValue?;\n    private _continuous;\n    private _disabled;\n    private _step;\n    private _labels;\n    private _type;\n    private _destroyer$;\n    private _indicatorsDestroyer$;\n    private _indicatorsTimer;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    /**\n     * @hidden\n     */\n    private track;\n    /**\n     * @hidden\n     */\n    private ticks;\n    /**\n     * @hidden\n     */\n    private thumbs;\n    /**\n     * @hidden\n     */\n    private labelRefs;\n    private readonly thumbFrom;\n    private readonly thumbTo;\n    private readonly labelFrom;\n    private readonly labelTo;\n    /**\n     * @hidden\n     */\n    stepDistance: number;\n    /**\n     * @hidden\n     */\n    onPan: Subject<number>;\n    /**\n     * @hidden\n     */\n    thumbFromTemplateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    thumbToTemplateRef: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    role: string;\n    /**\n     * @hidden\n     */\n    readonly valuemin: number;\n    /**\n     * @hidden\n     */\n    readonly valuemax: number;\n    /**\n     * @hidden\n     */\n    readonly readonly: boolean;\n    /**\n     * @hidden\n     */\n    slierClass: boolean;\n    /**\n     * @hidden\n     */\n    readonly disabledClass: boolean;\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    id: string;\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    /**\n    * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n    * ```typescript\n    * sliderType: SliderType = SliderType.RANGE;\n    * ```\n    * ```html\n    * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n    * ```\n    */\n    type: SliderType;\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    thumbLabelVisibilityDuration: number;\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    labels: Array<number | string | boolean | null | undefined>;\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    readonly context: any;\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    /**\n    * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n    * ```typescript\n    * @ViewChild(\"slider2\")\n    * public slider: IgxSliderComponent;\n    * ngAfterViewInit(){\n    *     let step = this.slider.step;\n    * }\n    * ```\n    */\n    step: number;\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    /**\n    *An @Input property that disables or enables UI interaction.\n    *```html\n    *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n    *```\n    */\n    disabled: boolean;\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    /**\n    * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n    * By default is considered that the {@link IgxSliderComponent} is discrete.\n    * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n    * ```html\n    * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n    * ```\n    */\n    continuous: boolean;\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    /**\n    * @hidden\n    * @internal\n    */\n    isContinuous: boolean;\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    /**\n    * Sets the maximal value for the `IgxSliderComponent`.\n    * The default maximum value is 100.\n    * ```html\n    * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n    * ```\n    */\n    maxValue: number;\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    /**\n    * Sets the minimal value for the `IgxSliderComponent`.\n    * The default minimal value is 0.\n    * ```html\n    * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n    * ```\n    */\n    minValue: number;\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    /**\n    * Sets the lower boundary of the `IgxSliderComponent`.\n    * If not set is the same as min value.\n    * ```html\n    * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n    * ```\n    */\n    lowerBound: number;\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    /**\n    * Sets the upper boundary of the `IgxSliderComponent`.\n    * If not set is the same as max value.\n    * ```html\n    * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n    * ```\n    */\n    upperBound: number;\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    /**\n    * Sets the slider value.\n    * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n    * If the slider type is {@link SliderType.RANGE} the argument\n    * represents an object of {@link lowerValue} and {@link upperValue} properties.\n    * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n    * ```typescript\n    *rangeValue = {\n    *   lower: 30,\n    *   upper: 60\n    *};\n    * ```\n    * ```html\n    * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n    * ```\n    */\n    value: number | IRangeSliderValue;\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    onValueChange: EventEmitter<ISliderValueChangeEventArgs>;\n    constructor(renderer: Renderer2, _el: ElementRef, _cdr: ChangeDetectorRef);\n    /**\n     * @hidden\n     */\n    onPointerDown($event: PointerEvent): void;\n    /**\n     * @hidden\n     */\n    onPointerUp($event: any): void;\n    /**\n     * @hidden\n     */\n    onFocus(): void;\n    /**\n     * @hidden\n     */\n    onPanListener($event: any): void;\n    onPanStart(): void;\n    onPanEnd(): void;\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    readonly isRange: boolean;\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    /**\n    *Sets the lower value of the `IgxSliderComponent`.\n    *```typescript\n    *@ViewChild(\"slider2\")\n    *public slider: IgxSliderComponent;\n    *public lowValue(event){\n    *    this.slider.lowerValue = 120;\n    *}\n    *```\n    */\n    lowerValue: number;\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    /**\n    *Sets the upper value of the `IgxSliderComponent`.\n    *```typescript\n    *@ViewChild(\"slider2\")\n    *public slider: IgxSliderComponent;\n    *public upperValue(event){\n    *    this.slider.upperValue = 120;\n    *}\n    *```\n    */\n    upperValue: number;\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    readonly lowerLabel: string | number | boolean;\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    readonly upperLabel: string | number | boolean;\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    readonly labelsViewEnabled: boolean;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentChecked(): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: IRangeSliderValue | number): void;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: any): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: any): void;\n    /** @hidden */\n    getEditElement(): any;\n    /**\n     *\n     * @hidden\n     */\n    update(mouseX: any): void;\n    /**\n     * @hidden\n     */\n    thumbChanged(value: number, thumbType: number): void;\n    /**\n     * @hidden\n     */\n    onThumbChange(): void;\n    onHoverChange(state: boolean): void;\n    private swapThumb;\n    private findClosestThumb;\n    private updateLowerBoundAndMinTravelZone;\n    private updateUpperBoundAndMaxTravelZone;\n    private sliderSetup;\n    private calculateStepDistance;\n    private toggleThumb;\n    private valueInRange;\n    private generateTickMarks;\n    private positionHandle;\n    private positionHandlesAndUpdateTrack;\n    private closestHandle;\n    private setTickInterval;\n    private showSliderIndicators;\n    private hideSliderIndicators;\n    private toggleSliderIndicators;\n    private changeThumbFocusableState;\n    private closestTo;\n    private valueToFraction;\n    /**\n     * @hidden\n     * Normalizе the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep;\n    private updateTrack;\n    private validateInitialValue;\n    private subscribeTo;\n    private unsubscriber;\n    private hasValueChanged;\n    private emitValueChanged;\n}\n/**\n * @hidden\n */\nexport declare class IgxSliderModule {\n}\n"]}