{"version":3,"file":"utils.d.ts","sources":["utils.d.ts"],"names":[],"mappingssourcesContent":["/**\n *@hidden\n */\nexport declare function cloneArray(array: any[], deep?: boolean): any[];\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport declare function cloneHierarchicalArray(array: any[], childDataKey: any): any[];\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport declare function mergeObjects(obj1: {}, obj2: {}): any;\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport declare function cloneValue(value: any): any;\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport declare function isObject(value: any): boolean;\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport declare function isDate(value: any): boolean;\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport declare function isEqual(obj1: any, obj2: any): boolean;\n/**\n *@hidden\n */\nexport declare const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n/**\n *@hidden\n */\nexport declare const enum KEYS {\n    ENTER = \"Enter\",\n    SPACE = \" \",\n    SPACE_IE = \"Spacebar\",\n    ESCAPE = \"Escape\",\n    ESCAPE_IE = \"Esc\",\n    LEFT_ARROW = \"ArrowLeft\",\n    LEFT_ARROW_IE = \"Left\",\n    UP_ARROW = \"ArrowUp\",\n    UP_ARROW_IE = \"Up\",\n    RIGHT_ARROW = \"ArrowRight\",\n    RIGHT_ARROW_IE = \"Right\",\n    DOWN_ARROW = \"ArrowDown\",\n    DOWN_ARROW_IE = \"Down\",\n    F2 = \"F2\",\n    TAB = \"Tab\",\n    HOME = \"Home\",\n    END = \"End\"\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport declare function getNodeSizeViaRange(range: Range, node: any): number;\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport declare function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number;\n/**\n *@hidden\n */\nexport declare function isIE(): boolean;\n/**\n *@hidden\n */\nexport declare function isEdge(): boolean;\n/**\n *@hidden\n */\nexport declare function isFirefox(): boolean;\n/**\n * @hidden\n */\nexport declare class PlatformUtil {\n    private platformId;\n    isBrowser: boolean;\n    isIOS: boolean;\n    constructor(platformId: Object);\n}\n/**\n * @hidden\n */\nexport declare function isLeftClick(event: PointerEvent): boolean;\n/** @hidden */\nexport declare function isNavigationKey(key: string): boolean;\n/**\n *@hidden\n */\nexport declare function flatten(arr: any[]): any[];\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\nexport declare const NAVIGATION_KEYS: Set<string>;\nexport declare const ROW_EXPAND_KEYS: Set<string>;\nexport declare const ROW_COLLAPSE_KEYS: Set<string>;\nexport declare const SUPPORTED_KEYS: Set<string>;\n"]}