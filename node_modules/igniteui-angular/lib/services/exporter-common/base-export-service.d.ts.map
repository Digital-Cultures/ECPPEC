{"version":3,"file":"base-export-service.d.ts","sources":["base-export-service.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\nexport declare abstract class IgxBaseExporter {\n    private _columnList;\n    private flatRecords;\n    protected _isTreeGrid: boolean;\n    protected _indexOfLastPinnedColumn: number;\n    protected _sort: any;\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    onRowExport: EventEmitter<IRowExportingEventArgs>;\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    onColumnExport: EventEmitter<IColumnExportingEventArgs>;\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    export(grid: any, options: IgxExporterOptionsBase): void;\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    exportData(data: any[], options: IgxExporterOptionsBase): void;\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n    private exportRow;\n    private prepareData;\n    private prepareHierarchicalData;\n    private resetDefaults;\n}\n"]}