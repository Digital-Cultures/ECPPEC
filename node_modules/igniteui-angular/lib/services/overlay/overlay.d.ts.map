{"version":3,"file":"overlay.d.ts","sources":["overlay.d.ts"],"names":[],"mappingssourcesContent":["import { OverlaySettings, OverlayEventArgs, OverlayInfo, OverlayAnimationEventArgs, OverlayCancelableEventArgs, OverlayClosingEventArgs } from './utilities';\nimport { ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, Type, OnDestroy, NgModuleRef, NgZone } from '@angular/core';\nimport { AnimationBuilder } from '@angular/animations';\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\nexport declare class IgxOverlayService implements OnDestroy {\n    private _factoryResolver;\n    private _appRef;\n    private _injector;\n    private builder;\n    private document;\n    private _zone;\n    private _componentId;\n    private _overlayInfos;\n    private _overlayElement;\n    private _document;\n    private destroy$;\n    private _defaultSettings;\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    onOpening: EventEmitter<OverlayCancelableEventArgs>;\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    onOpened: EventEmitter<OverlayEventArgs>;\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    onClosing: EventEmitter<OverlayClosingEventArgs>;\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    onClosed: EventEmitter<OverlayEventArgs>;\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    onAnimation: EventEmitter<OverlayAnimationEventArgs>;\n    constructor(_factoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, builder: AnimationBuilder, document: any, _zone: NgZone);\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string): void;\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll(): void;\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string): void;\n    private _show;\n    private _hide;\n    private getOverlayInfo;\n    private placeElementHook;\n    private moveElementToOverlay;\n    private getWrapperElement;\n    private getContentElement;\n    private getOverlayElement;\n    private updateSize;\n    private setupModalWrapper;\n    private onCloseDone;\n    private cleanUp;\n    private playOpenAnimation;\n    private playCloseAnimation;\n    private applyAnimationParams;\n    /** @hidden @internal */\n    getOverlayById(id: string): OverlayInfo;\n    private documentClicked;\n    private addOutsideClickListener;\n    private removeOutsideClickListener;\n    private addResizeHandler;\n    private removeResizeHandler;\n    /** @hidden */\n    repositionAll: () => void;\n    /**\n     *@hidden\n     */\n    ngOnDestroy(): void;\n}\n"]}