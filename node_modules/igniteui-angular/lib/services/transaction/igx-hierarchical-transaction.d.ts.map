{"version":3,"file":"igx-hierarchical-transaction.d.ts","sources":["igx-hierarchical-transaction.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HierarchicalTransaction, HierarchicalState } from './transaction';\nimport { IgxTransactionService } from './igx-transaction';\n/** @experimental @hidden */\nexport declare class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState> extends IgxTransactionService<T, S> {\n    getAggregatedChanges(mergeChanges: boolean): T[];\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void;\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void;\n    private clearArraysFromObject;\n}\n"]}