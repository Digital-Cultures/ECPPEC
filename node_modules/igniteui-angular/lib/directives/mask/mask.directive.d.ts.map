{"version":3,"file":"mask.directive.d.ts","sources":["mask.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit, PipeTransform } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IBaseEventArgs } from '../../core/utils';\nexport declare class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    private elementRef;\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    mask: string;\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    promptChar: string;\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    includeLiterals: boolean;\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    placeholder: string;\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    displayValuePipe: PipeTransform;\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    focusedValuePipe: PipeTransform;\n    /**\n     *@hidden\n     */\n    private dataValue;\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    onValueChange: EventEmitter<IMaskEventArgs>;\n    /**\n     *@hidden\n     */\n    /**\n    *@hidden\n    */\n    private value;\n    /**\n     *@hidden\n     */\n    private readonly nativeElement;\n    /**\n     *@hidden\n     */\n    private readonly selectionStart;\n    /**\n     *@hidden\n     */\n    private readonly selectionEnd;\n    /**\n     *@hidden\n     */\n    private _ctrlDown;\n    /**\n     *@hidden\n     */\n    private _paste;\n    /**\n     *@hidden\n     */\n    private _selection;\n    /**\n     *@hidden\n     */\n    private _placeholder;\n    /**\n     *@hidden\n     */\n    private _maskOptions;\n    /**\n     *@hidden\n     */\n    private _key;\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n    private _stopPropagation;\n    /**\n     *@hidden\n     */\n    private maskHelper;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback;\n    constructor(elementRef: ElementRef);\n    /**\n     *@hidden\n     */\n    ngOnInit(): void;\n    /**\n     *@hidden\n     */\n    onKeydown(event: any): void;\n    /**\n     *@hidden\n     */\n    onKeyup(event: any): void;\n    /**\n     *@hidden\n     */\n    onPaste(event: any): void;\n    /**\n     *@hidden\n     */\n    onInputChanged(event: any): void;\n    /**\n     *@hidden\n     */\n    onFocus(value: any): void;\n    /**\n     *@hidden\n     */\n    onBlur(value: any): void;\n    /**\n     *@hidden\n     */\n    private getCursorPosition;\n    /**\n     *@hidden\n     */\n    private setCursorPosition;\n    /**\n     *@hidden\n     */\n    writeValue(value: any): void;\n    /**\n     *@hidden\n     */\n    registerOnChange(fn: (_: any) => void): void;\n    /**\n     *@hidden\n     */\n    registerOnTouched(fn: () => void): void;\n}\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n/**\n * @hidden\n */\nexport declare class IgxMaskModule {\n}\n"]}