{"version":3,"file":"input.directive.d.ts","sources":["input.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy } from '@angular/core';\nimport { FormControlName, NgModel } from '@angular/forms';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\nexport declare enum IgxInputState {\n    INITIAL = 0,\n    VALID = 1,\n    INVALID = 2\n}\nexport declare class IgxInputDirective implements AfterViewInit, OnDestroy {\n    inputGroup: IgxInputGroupBase;\n    protected ngModel: NgModel;\n    protected formControl: FormControlName;\n    protected element: ElementRef;\n    protected cdr: ChangeDetectorRef;\n    private _valid;\n    private _statusChanges$;\n    constructor(inputGroup: IgxInputGroupBase, ngModel: NgModel, formControl: FormControlName, element: ElementRef, cdr: ChangeDetectorRef);\n    private readonly ngControl;\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    /**\n    * Gets the `value` propery.\n    * ```typescript\n    * @ViewChild('igxInput', {read: IgxInputDirective})\n    *  public igxInput: IgxInputDirective;\n    * let inputValue = this.igxInput.value;\n    * ```\n    * @memberof IgxInputDirective\n    */\n    value: any;\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    /**\n    * Gets the `disabled` property\n    * ```typescript\n    * @ViewChild('igxInput', {read: IgxInputDirective})\n    *  public igxInput: IgxInputDirective;\n    * let isDisabled = this.igxInput.disabled;\n    * ```\n    * @memberof IgxInputDirective\n    */\n    disabled: boolean;\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    /**\n    * Gets whether the igxInput is required.\n    * ```typescript\n    * let isRequired = this.igxInput.required;\n    * ```\n    * @memberof IgxInputDirective\n    */\n    required: boolean;\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    isInput: boolean;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    isTextArea: boolean;\n    /**\n     *@hidden\n     */\n    onFocus(event: any): void;\n    /**\n     *@hidden\n     */\n    onBlur(event: any): void;\n    /**\n     *@hidden\n     */\n    onInput(): void;\n    /**\n     *@hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     *@hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    focus(): void;\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    readonly nativeElement: any;\n    /**\n     *@hidden\n     */\n    protected onStatusChanged(): void;\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    readonly hasPlaceholder: any;\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    readonly placeholder: any;\n    private _hasValidators;\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    readonly focused: boolean;\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    /**\n    * Sets the state of the igxInput.\n    * ```typescript\n    * this.igxInput.valid = IgxInputState.INVALID;\n    * ```\n    * @memberof IgxInputDirective\n    */\n    valid: IgxInputState;\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    readonly isValid: boolean;\n    private checkValidity;\n}\n"]}