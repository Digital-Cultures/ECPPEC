{"version":3,"file":"date-picker.component.d.ts","sources":["date-picker.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnDestroy, ElementRef, TemplateRef, ChangeDetectorRef, NgModuleRef, OnInit, AfterViewInit, Injector, AfterViewChecked } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { IgxCalendarComponent, IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective, WEEKDAYS } from '../calendar/index';\nimport { IgxInputGroupComponent } from '../input-group/index';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, IgxOverlayService } from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { InteractionMode } from '../core/enums';\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport declare enum PredefinedFormatOptions {\n    ShortDate = \"shortDate\",\n    MediumDate = \"mediumDate\",\n    LongDate = \"longDate\",\n    FullDate = \"fullDate\"\n}\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\nexport declare class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    private _overlayService;\n    element: ElementRef;\n    private _cdr;\n    private _moduleRef;\n    private _injector;\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    label: string;\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    labelVisibility: boolean;\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    locale: 'en';\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    weekStart: WEEKDAYS | number;\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    /**\n    *Sets the format options of the `IgxDatePickerComponent`.\n    *```typescript\n    *public Options;\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *ngAfterViewInit(){\n    *    this.Options = {\n    *        day: \"numeric\",\n    *        month: \"long\",\n    *        weekday: \"long\",\n    *        year: \"numeric\"\n    *    }\n    *this.datePicker.formatOptions = this.Options;\n    *}\n    *```\n    */\n    formatOptions: IFormatOptions;\n    /**\n     * Sets/gets whether the inactive dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    hideOutsideDays: boolean;\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    monthsViewNumber: number;\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    format: string;\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    mask: string;\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    /**\n    *Sets the format views of the `IgxDatePickerComponent`.\n    *```typescript\n    *public Views;\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *ngAfterViewInit(){\n    *    this.Views = {day:false, month: false, year:false};\n    *    this.datePicker.formatViews = this.Views;\n    *}\n    *```\n    */\n    formatViews: IFormatViews;\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    /**\n    * Sets the disabled dates' descriptors.\n    * ```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *ngAfterViewInit(){\n    *    this.datePicker.disabledDates = [\n    *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n    *     {type: DateRangeType.Weekends}];\n    *}\n    *```\n    */\n    disabledDates: DateRangeDescriptor[];\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    /**\n    * Sets the special dates' descriptors.\n    * ```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *ngAfterViewInit(){\n    *    this.datePicker.specialDates = [\n    *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n    *     {type: DateRangeType.Weekends}];\n    *}\n    *```\n    */\n    specialDates: DateRangeDescriptor[];\n    modalOverlaySettings: OverlaySettings;\n    dropDownOverlaySettings: OverlaySettings;\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    readonly displayData: string;\n    /**\n     hidden\n     */\n    transformedDate: string;\n    constructor(_overlayService: IgxOverlayService, element: ElementRef, _cdr: ChangeDetectorRef, _moduleRef: NgModuleRef<any>, _injector: Injector);\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    readonly template: TemplateRef<any>;\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    readonly context: {\n        disabled: boolean;\n        disabledDates: DateRangeDescriptor[];\n        displayData: string;\n        format: string;\n        isSpinLoop: boolean;\n        label: string;\n        labelVisibility: boolean;\n        locale: \"en\";\n        mask: string;\n        mode: InteractionMode;\n        specialDates: DateRangeDescriptor[];\n        value: Date;\n        openDialog: (target?: HTMLElement) => void;\n    };\n    private readonly required;\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    value: Date;\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    id: string;\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    formatter: (val: Date) => string;\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    disabled: boolean;\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    vertical: boolean;\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    todayButtonLabel: string;\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    cancelButtonLabel: string;\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    mode: InteractionMode;\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    isSpinLoop: boolean;\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    outlet: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    onOpen: EventEmitter<IgxDatePickerComponent>;\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    onOpened: EventEmitter<IgxDatePickerComponent>;\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    onClose: EventEmitter<IgxDatePickerComponent>;\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    onClosed: EventEmitter<IgxDatePickerComponent>;\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    onClosing: EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>;\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    onSelection: EventEmitter<Date>;\n    /**\n     *An @Output property that is fired when date picker value is changed.\n     *```typescript\n     *public valueChanged(event){\n        *    alert(\"Date picker value is changed\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n        *```\n    */\n    valueChange: EventEmitter<Date>;\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    onDisabledDate: EventEmitter<IDatePickerDisabledDateEventArgs>;\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    onValidationFailed: EventEmitter<IDatePickerValidationFailedEventArgs>;\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n    protected editableDatePickerTemplate: TemplateRef<any>;\n    protected inputGroup: IgxInputGroupComponent;\n    private _inputElementRef;\n    protected _inputUserTemplateElementRef: ElementRef;\n    private _inputDirective;\n    private _inputDirectiveUserTemplate;\n    /**\n     *@hidden\n     */\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n    /**\n     *@hidden\n     */\n    headerTemplate: IgxCalendarHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    datePickerActionsDirective: IgxDatePickerActionsDirective;\n    calendar: IgxCalendarComponent;\n    hasHeader: boolean;\n    collapsed: boolean;\n    displayValuePipe: DatePickerDisplayValuePipe;\n    inputValuePipe: DatePickerInputValuePipe;\n    dateFormatParts: any[];\n    rawDateString: string;\n    inputMask: string;\n    isEmpty: boolean;\n    invalidDate: string;\n    private readonly spinDelta;\n    private readonly defaultLocale;\n    private _formatOptions;\n    private _formatViews;\n    private _destroy$;\n    private _statusChanges$;\n    private _componentID;\n    private _format;\n    private _value;\n    private _isInEditMode;\n    private _disabledDates;\n    private _specialDates;\n    private _modalOverlay;\n    private _dropDownOverlaySettings;\n    private _positionSettings;\n    private _defaultDropDownOverlaySettings;\n    private _modalOverlaySettings;\n    private _transformedDate;\n    private _onOpen;\n    private _onClose;\n    private _ngControl;\n    private _onChangeCallback;\n    private _onTouchedCallback;\n    /** @hidden @internal */\n    writeValue(value: Date): void;\n    /** @hidden @internal */\n    registerOnChange(fn: (_: Date) => void): void;\n    /** @hidden @internal */\n    registerOnTouched(fn: () => void): void;\n    /** @hidden @internal */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n    * @hidden\n    */\n    onSpaceClick(event: KeyboardEvent): void;\n    /** @hidden */\n    getEditElement(): any;\n    /** @hidden */\n    getInputGroupElement(): any;\n    /**\n     *@hidden\n     */\n    ngOnInit(): void;\n    /**\n     *@hidden @internal\n    */\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    protected onStatusChanged(): void;\n    /**\n     *@hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    triggerTodaySelection(): void;\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    selectDate(date: Date): void;\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    deselectDate(): void;\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    openDialog(target?: HTMLElement): void;\n    mouseDown(e: any): void;\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    closeCalendar(): void;\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    clear(): void;\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    handleSelection(date: Date): void;\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    onBlur(event: any): void;\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    onFocus(): void;\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    onKeyDown(event: any): void;\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    onWheel(event: any): void;\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    onInput(event: any): void;\n    private emitValueChangeEvent;\n    private calculateDate;\n    private spinValue;\n    private _onOpening;\n    private _onOpened;\n    private _onClosed;\n    private _initializeCalendarContainer;\n    private _focusCalendarDate;\n    private _setLocaleToDate;\n    private _getCursorPosition;\n    private _setCursorPosition;\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker;\n    private _getDisplayDate;\n    private _getEditorDate;\n    _updateValidityOnBlur(): void;\n}\n/**\n * @hidden\n */\nexport declare class IgxDatePickerModule {\n}\n"]}