{"version":3,"file":"progressbar.component.d.ts","sources":["progressbar.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, Renderer2 } from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\nexport declare enum IgxTextAlign {\n    START = \"start\",\n    CENTER = \"center\",\n    END = \"end\"\n}\nexport declare enum IgxProgressType {\n    DANGER = \"danger\",\n    INFO = \"info\",\n    WARNING = \"warning\",\n    SUCCESS = \"success\"\n}\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\nexport declare abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId;\n    /**\n     * @hidden\n     */\n    protected _valueInPercent: number;\n    /**\n     * @hidden\n     */\n    protected _max: number;\n    /**\n     * @hidden\n     */\n    protected _value: number;\n    /**\n     * @hidden\n     */\n    protected _animate: boolean;\n    /**\n     * @hidden\n     */\n    protected _step: any;\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    /**\n    *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n    *    public setValue(event){\n    *    this.progressBar.valueInPercent = 56;\n    *}\n    * //...\n    *```\n    *```html\n    *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n    *```\n    */\n    valueInPercent: number;\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number): void;\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number): void;\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number): void;\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number;\n    /**\n     * @hidden\n     */\n    private isInLimitRange;\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit;\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit;\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress;\n}\nexport declare class IgxLinearProgressBarComponent extends BaseProgress {\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    /**\n    *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public animationStatus(event) {\n    *    let animationStatus = this.progressBar.animate;\n    *    alert(animationStatus);\n    *}\n    *```\n    */\n    animate: boolean;\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    /**\n    *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public maxValue(event) {\n    *    let max = this.progressBar.max;\n    *    alert(max);\n    *}\n    *```\n    */\n    max: number;\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    /**\n    *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n    *```html\n    *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n    *```\n    */\n    step: number;\n    constructor();\n    valueMin: number;\n    cssClass: string;\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    striped: boolean;\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    indeterminate: boolean;\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    role: string;\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    id: string;\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    textAlign: IgxTextAlign;\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    textVisibility: boolean;\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    textTop: boolean;\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    text: string;\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n    type: string;\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    /**\n    *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```html\n    *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n    *```\n    */\n    value: number;\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    onProgressChanged: EventEmitter<IChangeProgressEventArgs>;\n    /**\n     * @hidden\n     */\n    readonly danger: boolean;\n    /**\n     * @hidden\n     */\n    readonly info: boolean;\n    /**\n     * @hidden\n     */\n    readonly warning: boolean;\n    /**\n     * @hidden\n     */\n    readonly success: boolean;\n}\nexport declare class IgxCircularProgressBarComponent extends BaseProgress {\n    private renderer;\n    private readonly STROKE_OPACITY_DVIDER;\n    private readonly STROKE_OPACITY_ADDITION;\n    /** @hidden */\n    cssClass: string;\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    onProgressChanged: EventEmitter<IChangeProgressEventArgs>;\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    id: string;\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    indeterminate: boolean;\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    textVisibility: boolean;\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    text: string;\n    textTemplate: IgxProcessBarTextTemplateDirective;\n    /**\n     * @hidden\n    */\n    readonly context: any;\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    /**\n    *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxCircularProgressBarComponent;\n    *public animationStatus(event) {\n    *    let animationStatus = this.progressBar.animate;\n    *    alert(animationStatus);\n    *}\n    *```\n    */\n    animate: boolean;\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    /**\n    *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxCircularProgressBarComponent;\n    *public maxValue(event) {\n    *    let max = this.progressBar.max;\n    *    alert(max);\n    *}\n    *```\n    *```html\n    *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n    *```\n    */\n    max: number;\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    step: number;\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    /**\n    *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n    *```html\n    *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n    *```\n    */\n    value: number;\n    private _circleRadius;\n    private _circumference;\n    private _svgCircle;\n    constructor(renderer: Renderer2);\n    /**\n     * @hidden\n     */\n    updateProgressSmoothly(val: number, step: number): void;\n    /**\n     * @hidden\n    */\n    readonly textContent: string;\n    /**\n     * @hidden\n    */\n    updateProgressDirectly(val: number): void;\n    private getProgress;\n}\nexport declare function getValueInProperRange(value: number, max: number, min?: number): number;\nexport declare function convertInPercentage(value: number, max: number): number;\n/**\n * @hidden\n */\nexport declare class IgxProgressBarModule {\n}\n"]}