{"version":3,"file":"grid-navigation.service.d.ts","sources":["grid-navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IgxColumnComponent } from './column.component';\nimport { ISelectionNode } from '../core/grid-selection';\nimport { GridType } from './common/grid.interface';\n/** @hidden */\nexport declare class IgxGridNavigationService {\n    grid: GridType;\n    readonly displayContainerWidth: number;\n    readonly displayContainerScrollLeft: number;\n    readonly verticalDisplayContainerElement: any;\n    horizontalScroll(rowIndex: any): any;\n    getColumnUnpinnedIndex(visibleColumnIndex: number): any;\n    isColumnFullyVisible(columnIndex: number): boolean;\n    isColumnRightEdgeVisible(columnIndex: number): boolean;\n    isColumnLeftEdgeVisible(columnIndex: number): boolean;\n    private forOfDir;\n    private isColumnPinned;\n    readonly gridOrderedColumns: IgxColumnComponent[];\n    isRowInEditMode(rowIndex: any): boolean;\n    findNextEditable(direction: string, visibleColumnIndex: number): number;\n    getCellElementByVisibleIndex(rowIndex: any, visibleColumnIndex: any, isSummary?: boolean): HTMLElement;\n    onKeydownArrowRight(element: any, selectedNode: ISelectionNode): void;\n    onKeydownArrowLeft(element: any, selectedNode: ISelectionNode): void;\n    movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number): void;\n    moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number): void;\n    focusEditableTarget(rowIndex: number, columnIndex: number): void;\n    onKeydownHome(rowIndex: any, isSummary?: boolean): void;\n    onKeydownEnd(rowIndex: any, isSummary?: boolean): void;\n    navigateTop(visibleColumnIndex: any): void;\n    private findFirstDataRowIndex;\n    private findLastDataRowIndex;\n    navigateBottom(visibleColumnIndex: any): void;\n    navigateUp(rowElement: any, selectedNode: ISelectionNode): void;\n    protected focusPreviousElement(currentRowEl: any, visibleColumnIndex: any): void;\n    navigateDown(rowElement: any, selectedNode: ISelectionNode): void;\n    protected focusElem(rowElement: any, visibleColumnIndex: any): any;\n    protected focusNextElement(rowElement: any, visibleColumnIndex: any): any;\n    goToFirstCell(): void;\n    goToLastCell(): void;\n    goToLastBodyElement(): void;\n    performTab(currentRowEl: any, selectedNode: ISelectionNode): void;\n    moveFocusToFilterCell(toStart?: boolean): void;\n    navigatePrevFilterCell(column: IgxColumnComponent, eventArgs: any): void;\n    navigateFirstCellIfPossible(eventArgs: any): void;\n    navigateNextFilterCell(column: IgxColumnComponent, eventArgs: any): void;\n    private getLastPinnedFilterableColumn;\n    private getFirstPinnedFilterableColumn;\n    performShiftTabKey(currentRowEl: any, selectedNode: ISelectionNode): void;\n    shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean;\n    performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void): void;\n    performHorizontalScrollToCell(rowIndex: number, visibleColumnIndex: number, isSummary?: boolean, cb?: () => void): void;\n    protected getFocusableGrid(): GridType;\n    protected getRowByIndex(index: any, selector?: string): Element;\n    protected getNextRowByIndex(nextIndex: any): any;\n    private getAllRows;\n    protected getCellSelector(visibleIndex?: number, isSummary?: boolean): string;\n    protected getRowSelector(): string;\n}\n"]}