{"version":3,"file":"advanced-filtering-dialog.component.d.ts","sources":["advanced-filtering-dialog.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, QueryList, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, OverlaySettings } from '../../../services/overlay/utilities';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { IgxGridBaseComponent, IgxColumnComponent } from '../../grid';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\n/**\n *@hidden\n */\ndeclare class ExpressionItem {\n    constructor(parent?: ExpressionGroupItem);\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n/**\n *@hidden\n */\ndeclare class ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem);\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n/**\n *@hidden\n */\ndeclare class ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem);\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n/**\n * @hidden\n */\nexport declare class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    private element;\n    cdr: ChangeDetectorRef;\n    filteringService: IgxFilteringService;\n    overlayComponentId: string;\n    overlayService: IgxOverlayService;\n    rootGroup: ExpressionGroupItem;\n    selectedExpressions: ExpressionOperandItem[];\n    selectedGroups: ExpressionGroupItem[];\n    currentGroup: ExpressionGroupItem;\n    editedExpression: ExpressionOperandItem;\n    addModeExpression: ExpressionOperandItem;\n    contextualGroup: ExpressionGroupItem;\n    filteringLogics: any;\n    selectedCondition: string;\n    searchValue: any;\n    _positionSettings: {\n        horizontalStartPoint: HorizontalAlignment;\n        verticalStartPoint: VerticalAlignment;\n    };\n    _overlaySettings: OverlaySettings;\n    columnSelectOverlaySettings: OverlaySettings;\n    conditionSelectOverlaySettings: OverlaySettings;\n    columnSelect: IgxSelectComponent;\n    conditionSelect: IgxSelectComponent;\n    searchValueInput: ElementRef;\n    addRootAndGroupButton: ElementRef;\n    addConditionButton: ElementRef;\n    editingInputsContainer: ElementRef;\n    addModeContainer: ElementRef;\n    currentGroupButtonsContainer: ElementRef;\n    contextMenuToggle: IgxToggleDirective;\n    chips: QueryList<IgxChipComponent>;\n    protected expressionsContainer: ElementRef;\n    overlayOutlet: IgxOverlayOutletDirective;\n    display: string;\n    private destroy$;\n    private _selectedColumn;\n    private _clickTimer;\n    private _dblClickDelay;\n    private _preventChipClick;\n    private _editingInputsContainer;\n    private _addModeContainer;\n    private _currentGroupButtonsContainer;\n    constructor(element: ElementRef, cdr: ChangeDetectorRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    readonly displayDensity: string;\n    selectedColumn: IgxColumnComponent;\n    readonly grid: IgxGridBaseComponent;\n    readonly filterableColumns: IgxColumnComponent[];\n    dragStart(dragArgs: IDragStartEventArgs): void;\n    dragEnd(dragArgs: IDragBaseEventArgs): void;\n    addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem): void;\n    endGroup(groupItem: ExpressionGroupItem): void;\n    commitOperandEdit(): void;\n    cancelOperandAdd(): void;\n    cancelOperandEdit(): void;\n    operandCanBeCommitted(): boolean;\n    exitOperandEdit(): void;\n    isExpressionGroup(expression: ExpressionItem): boolean;\n    private addGroup;\n    private createExpressionGroupItem;\n    private createExpressionsTreeFromGroupItem;\n    onChipRemove(expressionItem: ExpressionItem): void;\n    onChipClick(expressionItem: ExpressionOperandItem): void;\n    onChipDblClick(expressionItem: ExpressionOperandItem): void;\n    enterExpressionEdit(expressionItem: ExpressionOperandItem): void;\n    clearSelection(): void;\n    enterExpressionAdd(expressionItem: ExpressionOperandItem): void;\n    private onToggleExpression;\n    private toggleExpression;\n    private toggleContextMenu;\n    private findSingleSelectedGroup;\n    private isInsideGroup;\n    private deleteItem;\n    onKeyDown(eventArgs: KeyboardEvent): void;\n    createAndGroup(): void;\n    createOrGroup(): void;\n    private createGroup;\n    deleteFilters(): void;\n    onGroupClick(groupItem: ExpressionGroupItem): void;\n    private toggleGroup;\n    private toggleGroupRecursive;\n    private deselectParentRecursive;\n    private calculateContextMenuTarget;\n    private scrollElementIntoView;\n    ungroup(): void;\n    deleteGroup(): void;\n    selectFilteringLogic(event: IButtonGroupEventArgs): void;\n    getConditionFriendlyName(name: string): string;\n    isDate(value: any): boolean;\n    onExpressionsScrolled(): void;\n    invokeClick(eventArgs: KeyboardEvent): void;\n    onOutletPointerDown(event: any): void;\n    getConditionList(): string[];\n    initialize(filteringService: IgxFilteringService, overlayService: IgxOverlayService, overlayComponentId: string): void;\n    /**\n     * @hidden @internal\n     */\n    setAddButtonFocus(): void;\n    context(expression: ExpressionItem, afterExpression?: ExpressionItem): {\n        $implicit: ExpressionItem;\n        afterExpression: ExpressionItem;\n    };\n    onClearButtonClick(): void;\n    closeDialog(): void;\n    applyChanges(): void;\n    onApplyButtonClick(): void;\n    onChipSelectionEnd(): void;\n}\nexport {};\n"]}