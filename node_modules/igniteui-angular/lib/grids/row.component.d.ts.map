{"version":3,"file":"row.component.d.ts","sources":["row.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, DoCheck, ElementRef, QueryList } from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../core/grid-selection';\nexport declare abstract class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n    gridAPI: GridBaseAPIService<T>;\n    crudService: IgxGridCRUDService;\n    selectionService: IgxGridSelectionService;\n    element: ElementRef;\n    cdr: ChangeDetectorRef;\n    private _rowData;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    rowData: any;\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    index: number;\n    /**\n     * @hidden\n     */\n    gridID: string;\n    /**\n     * @hidden\n     */\n    virtDirRow: IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     */\n    checkboxElement: IgxCheckboxComponent;\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    cells: QueryList<IgxGridCellComponent>;\n    /**\n     * @hidden\n     */\n    role: string;\n    readonly dataRowIndex: number;\n    /**\n     * @hidden\n     */\n    readonly styleClasses: string;\n    /**\n     * @hidden\n     */\n    selected: boolean;\n    /**\n     * @hidden\n     */\n    readonly columns: IgxColumnComponent[];\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly viewIndex: number;\n    /**\n     * @hidden\n     */\n    readonly pinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    readonly unpinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    readonly showRowSelectors: boolean;\n    /** @hidden */\n    readonly dirty: boolean;\n    readonly isSelected: boolean;\n    /**\n     * @hidden\n     */\n    readonly rowDraggable: boolean;\n    /** @hidden */\n    readonly added: boolean;\n    /** @hidden */\n    readonly deleted: boolean;\n    /**\n     * @hidden\n     */\n    dragging: boolean;\n    readonly inEditMode: boolean;\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    readonly grid: T;\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    readonly rowID: any;\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    readonly nativeElement: any;\n    /**\n     * @hidden\n     */\n    focused: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    defaultCssClass: string;\n    constructor(gridAPI: GridBaseAPIService<T>, crudService: IgxGridCRUDService, selectionService: IgxGridSelectionService, element: ElementRef, cdr: ChangeDetectorRef);\n    /**\n     * @hidden\n     * @internal\n     */\n    onClick(event: MouseEvent): void;\n    /**\n     * @hidden\n     */\n    onRowSelectorClick(event: any): void;\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    update(value: any): void;\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    delete(): void;\n    /**\n     * @hidden\n     */\n    readonly rowCheckboxAriaLabel: string;\n    /**\n     * @hidden\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string;\n    /**\n     * @hidden\n     */\n    readonly resolveDragIndicatorClasses: string;\n}\n"]}