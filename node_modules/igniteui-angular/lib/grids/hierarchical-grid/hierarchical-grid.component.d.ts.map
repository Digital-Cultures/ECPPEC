{"version":3,"file":"hierarchical-grid.component.d.ts","sources":["hierarchical-grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { TemplateRef, QueryList, ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, ComponentFactoryResolver, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck, EventEmitter } from '@angular/core';\nimport { IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent } from '../grid/index';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\nexport declare class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n    selectionService: IgxGridSelectionService;\n    colResizingService: IgxColumnResizingService;\n    protected transactionFactory: any;\n    document: any;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    readonly id: string;\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    /**\n    * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n    * ```typescript\n    * let filteredData = this.grid.filteredData;\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    data: any[];\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [(hierarchicalState)]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    hierarchicalState: any[];\n    /**\n     *@hidden\n     */\n    hierarchicalStateChange: EventEmitter<any>;\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    /**\n    * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n    * ```typescript\n    * let filteredData = this.grid.filteredData;\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    filteredData: any;\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    /**\n    * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n    * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n    * ```typescript\n    * const expanded = this.grid.expandChildren;\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    expandChildren: boolean;\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    readonly foreignKey: any;\n    /**\n     * @hidden\n     */\n    childLayoutList: QueryList<IgxRowIslandComponent>;\n    /**\n     * @hidden\n     */\n    allLayoutList: QueryList<IgxRowIslandComponent>;\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n    protected childTemplate: TemplateRef<any>;\n    protected headerHierarchyExpander: ElementRef;\n    /**\n     * @hidden\n     */\n    templateOutlets: QueryList<any>;\n    /**\n     * @hidden\n     */\n    hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n    /**\n     * @hidden\n     */\n    readonly hasExpandableChildren: boolean;\n    /**\n     * @hidden\n     */\n    childLayoutKeys: any[];\n    /**\n     * @hidden\n     */\n    highlightedRowID: any;\n    /**\n     * @hidden\n     */\n    updateOnRender: boolean;\n    /**\n     * @hidden\n     */\n    parent: any;\n    private _hierarchicalState;\n    private _data;\n    private _filteredData;\n    private h_id;\n    private childGridTemplates;\n    private scrollTop;\n    private scrollLeft;\n    protected _transactions: any;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, transactionFactory: any, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxHierarchicalGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    private updateSizes;\n    protected _shouldAutoSize(renderedHeight: any): boolean;\n    readonly outletDirective: import(\"../../../public_api\").IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    /**\n    * @hidden\n    */\n    onRowIslandChange(): void;\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>): void;\n    private updateColumnList;\n    ngOnDestroy(): void;\n    private _clearSeletionHighlights;\n    /**\n    * @hidden\n    */\n    readonly template: TemplateRef<any>;\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    getFeatureColumnsWidth(): number;\n    private getDefaultExpanderWidth;\n    /**\n     * @hidden\n     */\n    isRowHighlighted(rowData: any): boolean;\n    /**\n     * @hidden\n     */\n    isHierarchicalRecord(record: any): boolean;\n    /**\n     * @hidden\n     */\n    isChildGridRecord(record: any): boolean;\n    /**\n     * @hidden\n     */\n    trackChanges(index: any, rec: any): any;\n    /**\n     * @hidden\n     */\n    getContext(rowData: any): any;\n    /**\n     * @hidden\n    */\n    readonly rootGrid: this;\n    /**\n     * @hidden\n    */\n    readonly iconTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     * @internal\n     */\n    getDragGhostCustomTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: Function): void;\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    getVisibleContentHeight(): any;\n    /**\n     * @hidden\n    */\n    toggleAll(): void;\n    /**\n     * Collapses all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    collapseAll(): void;\n    /**\n     * Expands all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    expandAll(): void;\n    /**\n     * @hidden\n     */\n    isExpanded(record: any): boolean;\n    /**\n     * @hidden\n     */\n    viewCreatedHandler(args: any): void;\n    /**\n     * @hidden\n     */\n    viewMovedHandler(args: any): void;\n    /**\n     * @hidden\n     */\n    updateScrollPosition(): void;\n    protected getChildGrids(inDeph?: boolean): any[];\n    protected generateDataFields(data: any[]): string[];\n    private hg_verticalScrollHandler;\n    onContainerScroll(): void;\n    private hg_horizontalScrollHandler;\n}\n"]}