{"version":3,"file":"row-island.component.d.ts","sources":["row-island.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, QueryList, OnInit, ElementRef, ChangeDetectorRef, ComponentFactoryResolver, IterableDiffers, ViewContainerRef, NgZone, AfterViewInit, OnChanges, EventEmitter, OnDestroy, DoCheck } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\nexport declare class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    selectionService: IgxGridSelectionService;\n    colResizingService: IgxColumnResizingService;\n    protected transactionFactory: any;\n    document: any;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    rowIslandAPI: IgxRowIslandAPIService;\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    key: string;\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    /**\n    * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n    * ```typescript\n    * const expanded = this.rowIsland.expandChildren;\n    * ```\n    * @memberof IgxRowIslandComponent\n    */\n    expandChildren: boolean;\n    /**\n     * @hidden\n     */\n    children: QueryList<IgxRowIslandComponent>;\n    /**\n     * @hidden\n     */\n    childColumns: QueryList<IgxColumnComponent>;\n    /**\n     * @hidden\n     */\n    onLayoutChange: EventEmitter<any>;\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    onGridCreated: EventEmitter<IGridCreatedEventArgs>;\n    /**\n     * @hidden\n     */\n    readonly id: string;\n    /**\n     * @hidden\n     */\n    readonly parentId: any;\n    /**\n     * @hidden\n     */\n    readonly level: number;\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    readonly transactions: TransactionService<Transaction, State>;\n    /**\n     * @hidden\n     */\n    initialChanges: any[];\n    /**\n     * @hidden\n     */\n    rootGrid: any;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id;\n    private isInit;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, transactionFactory: any, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxHierarchicalGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions, rowIslandAPI: IgxRowIslandAPIService);\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    /**\n     * @hidden\n     */\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    protected updateChildren(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    private cleanGridState;\n    /**\n     * @hidden\n     */\n    reflow(): void;\n    /**\n     * @hidden\n     */\n    calculateGridHeight(): void;\n    protected updateColumnList(): void;\n}\n"]}