{"version":3,"file":"hierarchical-row.component.d.ts","sources":["hierarchical-row.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, QueryList, TemplateRef } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nexport declare class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    cells: QueryList<IgxHierarchicalGridCellComponent>;\n    expander: ElementRef;\n    readonly viewIndex: number;\n    /**\n    * @hidden\n    */\n    protected defaultExpandedTemplate: TemplateRef<any>;\n    /**\n    * @hidden\n    */\n    protected defaultEmptyTemplate: TemplateRef<any>;\n    /**\n    * @hidden\n    */\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    tabindex: number;\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    readonly expanded: boolean;\n    readonly hasChildren: boolean;\n    /**\n     * @hidden\n     */\n    readonly highlighted: boolean;\n    /**\n    * @hidden\n    */\n    expanderClick(event: any): void;\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    toggle(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    select: () => void;\n    /**\n     * @hidden\n     * @internal\n     */\n    deselect: () => void;\n    /**\n    * @hidden\n    */\n    readonly iconTemplate: TemplateRef<any>;\n    private endEdit;\n}\n"]}