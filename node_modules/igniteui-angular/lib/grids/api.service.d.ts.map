{"version":3,"file":"api.service.d.ts","sources":["api.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subject } from 'rxjs';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\nexport declare class GridBaseAPIService<T extends IgxGridBaseComponent & IGridDataBindable> {\n    grid: T;\n    protected editCellState: Map<string, any>;\n    protected editRowState: Map<string, {\n        rowID: any;\n        rowIndex: number;\n    }>;\n    protected destroyMap: Map<string, Subject<boolean>>;\n    get_column_by_name(name: string): IgxColumnComponent;\n    get_summary_data(): any[];\n    /**\n     * @hidden\n     * @internal\n     */\n    getRowData(rowID: any): any;\n    escape_editMode(): void;\n    get_cell_inEditMode(): IgxCell;\n    get_row_index_in_data(rowID: any): number;\n    get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent;\n    get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;\n    get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent;\n    submit_value(): void;\n    update_cell(cell: IgxCell, value: any): import(\"./grid-base.component\").IGridEditEventArgs;\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid: any, rowID: any, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {\n        [x: string]: any;\n    }): void;\n    _update_row(row: IgxRow, value?: any): void;\n    update_row(row: IgxRow, value: any): import(\"./grid-base.component\").IGridEditEventArgs;\n    protected update_row_in_array(value: any, rowID: any, index: number): void;\n    sort(expression: ISortingExpression): void;\n    sort_multiple(expressions: ISortingExpression[]): void;\n    filter(fieldName: string, term: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean): void;\n    filter_global(term: any, condition: any, ignoreCase: any): void;\n    clear_filter(fieldName: string): void;\n    clear_sort(fieldName: string): void;\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal: any, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex?: number): void;\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression): void;\n    protected remove_grouping_expression(fieldName: any): void;\n    clear_groupby(name?: string | Array<string>): void;\n    should_apply_number_style(column: IgxColumnComponent): boolean;\n    get_data(): any[];\n    get_all_data(includeTransactions?: boolean): any[];\n    get_filtered_data(): any[];\n    protected getSortStrategyPerColumn(fieldName: string): import(\"../data-operations/sorting-strategy\").ISortingStrategy;\n    addRowToData(rowData: any): void;\n    deleteRowFromData(rowID: any, index: number): void;\n    deleteRowById(rowId: any): void;\n    get_row_id(rowData: any): any;\n    row_deleted_transaction(rowID: any): boolean;\n    atInexistingPage(): Boolean;\n}\n"]}