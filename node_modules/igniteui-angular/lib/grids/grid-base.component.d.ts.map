{"version":3,"file":"grid-base.component.d.ts","sources":["grid-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, QueryList, TemplateRef, ViewContainerRef, InjectionToken, DoCheck } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject } from 'rxjs';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxBaseExporter, IgxExporterOptionsBase, IgxOverlayService } from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionService, State } from '../services/index';\nimport { IgxRowEditTabStopDirective } from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport { IgxExcelStyleSortingTemplateDirective, IgxExcelStylePinningTemplateDirective, IgxExcelStyleHidingTemplateDirective, IgxExcelStyleMovingTemplateDirective } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './igx-row-selectors.module';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\nexport declare const IgxGridTransaction: InjectionToken<string>;\nexport interface IGridClipboardEvent {\n    data: any[];\n    cancel: boolean;\n}\nexport interface IGridCellEventArgs extends IBaseEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\nexport interface IGridEditEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any;\n        columnID: any;\n        rowIndex: number;\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\nexport interface IPinColumnEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\nexport interface IPageEventArgs extends IBaseEventArgs {\n    previous: number;\n    current: number;\n}\nexport interface IRowDataEventArgs extends IBaseEventArgs {\n    data: any;\n}\nexport interface IColumnResizeEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\nexport interface IRowSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    added: any[];\n    removed: any[];\n    event?: Event;\n}\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\nexport interface IGridToolbarExportEventArgs extends IBaseEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\nexport interface IColumnMovingStartEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n}\nexport interface IColumnMovingEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\nexport interface IColumnMovingEndEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\nexport interface IGridKeydownEventArgs extends IBaseEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\nexport interface IRowDragEndEventArgs extends IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\nexport interface IRowDragStartEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n}\nexport declare abstract class IgxGridBaseComponent extends DisplayDensityBase implements OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    selectionService: IgxGridSelectionService;\n    crudService: IgxGridCRUDService;\n    colResizingService: IgxColumnResizingService;\n    protected gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>;\n    protected _transactions: TransactionService<Transaction, State>;\n    private elementRef;\n    private zone;\n    document: any;\n    cdr: ChangeDetectorRef;\n    protected resolver: ComponentFactoryResolver;\n    protected differs: IterableDiffers;\n    protected viewRef: ViewContainerRef;\n    navigation: IgxGridNavigationService;\n    filteringService: IgxFilteringService;\n    protected overlayService: IgxOverlayService;\n    summaryService: IgxGridSummaryService;\n    protected _displayDensityOptions: IDisplayDensityOptions;\n    private _scrollWidth;\n    private _customDragIndicatorIconTemplate;\n    protected _init: boolean;\n    private _tick;\n    private _cdrRequests;\n    protected _cdrRequestRepaint: boolean;\n    readonly scrollWidth: number;\n    private _resourceStrings;\n    private _emptyGridMessage;\n    private _emptyFilteredGridMessage;\n    private _isLoading;\n    private _locale;\n    _destroyed: boolean;\n    private overlayIDs;\n    private _filteringStrategy;\n    private _hostWidth;\n    private _advancedFilteringOverlayId;\n    private _advancedFilteringPositionSettings;\n    private _advancedFilteringOverlaySettings;\n    /**\n    * @hidden\n    */\n    protected defaultExpandedTemplate: TemplateRef<any>;\n    /**\n    * @hidden\n    */\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    /**\n     * An accessor that returns the resource strings.\n    */\n    resourceStrings: IGridResourceStrings;\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * @remarks\n     * When set to true, it will override all columns declared through code or in markup.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    autoGenerate: boolean;\n    abstract id: string;\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    emptyGridTemplate: TemplateRef<any>;\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    loadingGridTemplate: TemplateRef<any>;\n    /**\n       * Sets the filtering logic of the `IgxGridComponent`.\n       * The default is AND.\n       * ```html\n       * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    filteringLogic: FilteringLogic;\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the filtering state of the `IgxGridComponent`.\n       * ```typescript\n       * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n       * logic.filteringOperands = [\n       *     {\n       *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n       *          fieldName: 'ID',\n       *          searchVal: 1\n       *     }\n       * ];\n       * this.grid.filteringExpressionsTree = (logic);\n       * ```\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    filteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     *@hidden\n     */\n    filteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Emitted after advanced filtering is performed.\n     * Returns the advanced filtering expressions tree.\n     * ```typescript\n     * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    advancedFilteringExpressionsTreeChange: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Returns the advanced filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the advanced filtering state of the `IgxGridComponent`.\n       * ```typescript\n       * const logic = new FilteringExpressionsTree(FilteringLogic.And);\n       * logic.filteringOperands = [\n       *     {\n       *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n       *          fieldName: 'ID',\n       *          searchVal: 1\n       *     },\n       *     {\n       *          condition: IgxStringFilteringOperand.instance().condition('contains'),\n       *          fieldName: 'CompanyName',\n       *          searchVal: 'a'\n       *     }\n       * ];\n       * this.grid.advancedFilteringExpressionsTree = logic;\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    /**\n    * Sets the locale of the grid.\n    */\n    locale: string;\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Enables/Disables the paging feature.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    paging: boolean;\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the current page index.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n       *```\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    page: number;\n    /**\n     *@hidden\n     */\n    pageChange: EventEmitter<number>;\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the number of visible items per page of the `IgxGridComponent`.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n       *\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    perPage: number;\n    /**\n     *@hidden\n     */\n    perPageChange: EventEmitter<number>;\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    paginationTemplate: TemplateRef<any>;\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n       * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n       * ```html\n       * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    columnHiding: boolean;\n    rowSelectable: boolean;\n    /**\n     * Returns if the row selectors are hidden\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n    * Allows you to change the visibility of the row selectors\n    * By default row selectors are shown\n    * @memberof IgxGridBaseComponent\n    */\n    hideRowSelectors: boolean;\n    /**\n       * Sets whether rows can be moved.\n       * ```html\n       * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    rowDraggable: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    rowDragging: boolean;\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    rowEditable: boolean;\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the height of the `IgxGridComponent`.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    height: string;\n    /**\n     * @hidden\n    */\n    readonly hostWidth: any;\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    width: string;\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly headerWidth: number;\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    evenRowCSS: string;\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    oddRowCSS: string;\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the row height.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    rowHeight: any;\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    columnWidth: string;\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    primaryKey: any;\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    emptyGridMessage: string;\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n    * An accessor that returns whether the grid is showing loading indicator.\n    */\n    isLoading: boolean;\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    shouldGenerate: boolean;\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    emptyFilteredGridMessage: string;\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    columnHidingTitle: string;\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets if the built-in column pinning UI should be shown in the toolbar.\n       * By default it's disabled.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    columnPinning: boolean;\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    columnPinningTitle: string;\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets if the filtering is enabled.\n       * By default it's disabled.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    allowFiltering: boolean;\n    /**\n     * Returns a value indicating whether the advanced filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowAdvancedFiltering;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets a value indicating whether the advanced filtering is enabled.\n       * By default it's disabled.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    allowAdvancedFiltering: boolean;\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets filter mode.\n       * By default it's set to FilterMode.quickFilter.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    filterMode: FilterMode;\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets summary position.\n       * By default it is bottom.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    summaryPosition: GridSummaryPosition;\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets summary calculation mode.\n       * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n       * ```html\n       * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    summaryCalculationMode: GridSummaryCalculationMode;\n    /**\n     * Gets the filtering strategy of the grid.\n     * ```typescript\n     *  let filterStrategy = this.grid.filterStrategy\n     * ```\n     */\n    /**\n    * Sets the filtering strategy of the grid.\n    * ```html\n    *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n    * ```\n    */\n    filterStrategy: IFilteringStrategy;\n    /**\n     * An @Input property that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     *\n     * ```typescript\n     * public columnValuesStrategy = (column: IgxColumnComponent,\n     *                               filteringExpressionsTree: IFilteringExpressionsTree,\n     *                               done: (uniqueValues: any[]) => void) => {\n     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    uniqueColumnValuesStrategy: (column: IgxColumnComponent, filteringExpressionsTree: IFilteringExpressionsTree, done: (values: any[]) => void) => void;\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onCellClick: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onSelection: EventEmitter<IGridCellEventArgs>;\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onRowSelectionChange: EventEmitter<IRowSelectionEventArgs>;\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnPinning: EventEmitter<IPinColumnEventArgs>;\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    onCellEditCancel: EventEmitter<IGridEditEventArgs>;\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    onCellEditEnter: EventEmitter<IGridEditEventArgs>;\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onCellEdit: EventEmitter<IGridEditEventArgs>;\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n     * @memberof IgxGridComponent\n     */\n    onRowEditEnter: EventEmitter<IGridEditEventArgs>;\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onRowEdit: EventEmitter<IGridEditEventArgs>;\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onRowEditCancel: EventEmitter<IGridEditEventArgs>;\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnInit: EventEmitter<IgxColumnComponent>;\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onSortingDone: EventEmitter<ISortingExpression | ISortingExpression[]>;\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onFilteringDone: EventEmitter<IFilteringExpressionsTree>;\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onPagingDone: EventEmitter<IPageEventArgs>;\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onRowAdded: EventEmitter<IRowDataEventArgs>;\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onRowDeleted: EventEmitter<IRowDataEventArgs>;\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n    * @hidden\n    */\n    virtualizationState: IForOfState;\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onDataPreLoad: EventEmitter<IForOfState>;\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnResized: EventEmitter<IColumnResizeEventArgs>;\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onContextMenu: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onDoubleClick: EventEmitter<IGridCellEventArgs>;\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnVisibilityChanged: EventEmitter<IColumnVisibilityChangedEventArgs>;\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnMovingStart: EventEmitter<IColumnMovingStartEventArgs>;\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnMoving: EventEmitter<IColumnMovingEventArgs>;\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onColumnMovingEnd: EventEmitter<IColumnMovingEndEventArgs>;\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    onGridKeydown: EventEmitter<IGridKeydownEventArgs>;\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    onRowDragStart: EventEmitter<IRowDragStartEventArgs>;\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    onRowDragEnd: EventEmitter<IRowDragEndEventArgs>;\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseComponent#clipboardOptions}.\n     */\n    onGridCopy: EventEmitter<IGridClipboardEvent>;\n    /**\n     * @hidden\n     */\n    resizeLine: IgxGridColumnResizerComponent;\n    /**\n     * @hidden\n     */\n    loadingOverlay: ElementRef;\n    /**\n     * @hidden\n     */\n    loadingOutlet: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    columnList: QueryList<IgxColumnComponent>;\n    /**\n     *@hidden\n     */\n    excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n    /**\n     *@hidden\n     */\n    excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n    /**\n     *@hidden\n     */\n    excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n    /**\n     *@hidden\n     */\n    excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n    /**\n     *@hidden\n     */\n    excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n    /**\n     * @hidden\n     */\n    headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly headerGroupsList: IgxGridHeaderGroupComponent[];\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly headerCellList: IgxGridHeaderComponent[];\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly filterCellList: IgxGridFilteringCellComponent[];\n    private _rowList;\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n    readonly summariesRowList: QueryList<any>;\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly rowList: QueryList<any>;\n    private _dataRowList;\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly dataRowList: QueryList<IgxRowComponent<IgxGridBaseComponent>>;\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    emptyFilteredGridTemplate: TemplateRef<any>;\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    emptyGridDefaultTemplate: TemplateRef<any>;\n    loadingGridDefaultTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    parentVirtDir: IgxGridForOfDirective<any>;\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly toolbarCustomContentTemplate: IgxGridToolbarCustomContentDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly headSelectorTemplate: TemplateRef<IgxHeadSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly rowSelectorTemplate: TemplateRef<IgxRowSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n    /**\n    * The custom template, if any, that should be used when rendering the row drag indicator icon\n    */\n    dragIndicatorIconTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    verticalScrollContainer: IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     */\n    verticalScroll: IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     */\n    scr: ElementRef;\n    /**\n     * @hidden\n     */\n    footer: ElementRef;\n    /**\n     * @hidden\n     */\n    headerContainer: IgxGridForOfDirective<any>;\n    /**\n     * @hidden\n     */\n    headerSelectorContainer: ElementRef;\n    /**\n     * @hidden\n     */\n    headerDragContainer: ElementRef;\n    /**\n     * @hidden\n     */\n    headerGroupContainer: ElementRef;\n    /**\n     * @hidden\n     */\n    filteringRow: IgxGridFilteringRowComponent;\n    /**\n     * @hidden\n     */\n    theadRow: ElementRef;\n    /**\n     * @hidden\n     */\n    tbody: ElementRef;\n    /**\n     * @hidden\n     */\n    tfoot: ElementRef;\n    /**\n     * @hidden\n     */\n    protected _outletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    readonly outletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    rowEditingOutletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n    */\n    tmpOutlets: QueryList<any>;\n    /**\n     * @hidden\n     */\n    readonly rowOutletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     */\n    readonly parentRowOutletDirective: IgxOverlayOutletDirective;\n    /**\n     * @hidden\n     * @internal\n     */\n    dragIndicatorIconBase: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    private defaultRowEditTemplate;\n    /**\n     * @hidden\n     */\n    rowEditCustom: TemplateRef<any>;\n    /** @hidden */\n    readonly rowEditContainer: TemplateRef<any>;\n    /** @hidden */\n    rowEditText: TemplateRef<any>;\n    /** @hidden */\n    rowEditActions: TemplateRef<any>;\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n    rowExpandedIndicatorTemplate: TemplateRef<any>;\n    /**\n    * The custom template, if any, that should be used when rendering a row collapse indicator.\n    */\n    rowCollapsedIndicatorTemplate: TemplateRef<any>;\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n    headerExpandIndicatorTemplate: TemplateRef<any>;\n    /**\n    * The custom template, if any, that should be used when rendering a header collapse indicator.\n    */\n    headerCollapseIndicatorTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    readonly rowInEditMode: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    /**\n     * @hidden\n     */\n    readonly firstEditableColumnIndex: number;\n    /**\n     * @hidden\n     */\n    readonly lastEditableColumnIndex: number;\n    /**\n     * @hidden\n     */\n    rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n    /**\n     * @hidden\n     */\n    rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    readonly rowEditTabs: QueryList<IgxRowEditTabStopDirective>;\n    /**\n     * @hidden\n     */\n    rowEditingOverlay: IgxToggleDirective;\n    /**\n     * @hidden\n     */\n    tabindex: number;\n    /**\n     * @hidden\n     */\n    readonly hostClass: string;\n    readonly bannerClass: string;\n    /**\n     * @hidden\n     */\n    hostRole: string;\n    /**\n     * @hidden\n     */\n    readonly pipeTrigger: number;\n    /**\n     * @hidden\n     */\n    readonly filteringPipeTrigger: number;\n    /**\n     * @hidden\n     */\n    readonly summaryPipeTrigger: number;\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the sorting state of the `IgxGridComponent`.\n       * ```typescript\n       * this.grid.sortingExpressions = [{\n       *     fieldName: \"ID\",\n       *     dir: SortingDirection.Desc,\n       *     ignoreCase: true\n       * }];\n       * ```\n       *\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    sortingExpressions: ISortingExpression[];\n    /**\n     *@hidden\n     */\n    sortingExpressionsChange: EventEmitter<ISortingExpression[]>;\n    /**\n     * @hidden\n     */\n    readonly maxLevelHeaderDepth: any;\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    readonly hiddenColumnsCount: number;\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the text to be displayed inside the toggle button\n       * for the built-in column hiding UI of the`IgxColumnComponent`.\n       * ```typescript\n       * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    hiddenColumnsText: string;\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the text to be displayed inside the toggle button\n       * for the built-in column pinning UI of the`IgxColumnComponent`.\n       * ```html\n       * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    pinnedColumnsText: string;\n    /**\n     * Get transactions service for the grid.\n     */\n    readonly transactions: TransactionService<Transaction, State>;\n    /**\n     * @hidden\n    */\n    columnsWithNoSetWidths: any;\n    private _showToolbar;\n    private _exportExcel;\n    private _exportCsv;\n    private _toolbarTitle;\n    private _exportText;\n    private _exportExcelText;\n    private _exportCsvText;\n    private _rowEditable;\n    private _currentRowState;\n    private _filteredSortedData;\n    /**\n     * @hidden\n    */\n    readonly currentRowState: any;\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    toolbar: IgxGridToolbarComponent;\n    private toolbarHtml;\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Shows or hides the `IgxGridComponent`'s toolbar.\n       * ```html\n       * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    showToolbar: boolean;\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the toolbar's title.\n       * ```html\n       * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    toolbarTitle: string;\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Enable or disable the option for exporting to MS Excel.\n       * ```html\n       * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    exportExcel: boolean;\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Enable or disable the option for exporting to CSV.\n       * ```html\n       * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    exportCsv: boolean;\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the textual content for the main export button.\n       * ```html\n       * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    exportText: string;\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the textual content for the MS Excel export button.\n       * ```html\n       * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    exportExcelText: string;\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n       * Sets the textual content for the CSV export button.\n       * ```html\n       * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n       * ```\n    * @memberof IgxGridBaseComponent\n       */\n    exportCsvText: string;\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    clipboardOptions: {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: boolean;\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: boolean;\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: boolean;\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: string;\n    };\n    /**\n     * Returns the current cell selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n    * Allows you to set cell selection mode\n    * By default the cell selection mode is multiple\n    * @param selectionMode: GridSelectionMode\n    * @memberof IgxGridBaseComponent\n    */\n    cellSelection: GridSelectionMode;\n    /**\n     * Returns the current row selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    /**\n    * Allows you to set row selection mode\n    * By default the row selection mode is none\n    * @param selectionMode: GridSelectionMode\n    * @memberof IgxGridBaseComponent\n    */\n    rowSelection: GridSelectionMode;\n    /**\n     * @hidden\n     */\n    rowEditMessage: any;\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    onToolbarExporting: EventEmitter<IGridToolbarExportEventArgs>;\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    onRangeSelection: EventEmitter<GridSelectionRange>;\n    /**\n     * @hidden\n     */\n    pagingState: any;\n    /**\n     * @hidden\n     */\n    calcWidth: number;\n    /**\n     * @hidden\n     */\n    calcHeight: number;\n    /**\n     * @hidden\n     */\n    tfootHeight: number;\n    /**\n     * @hidden\n     */\n    chipsGoupingExpressions: any[];\n    /**\n     * @hidden\n     */\n    summariesHeight: number;\n    /**\n     * @hidden\n     */\n    draggedColumn: IgxColumnComponent;\n    /**\n     * @hidden\n     */\n    disableTransitions: boolean;\n    /**\n     * @hidden\n     */\n    lastSearchInfo: ISearchInfo;\n    /**\n     * @hidden\n     */\n    columnWidthSetByUser: boolean;\n    abstract data: any[];\n    abstract filteredData: any[];\n    /**\n     * @hidden\n     */\n    protected destroy$: Subject<any>;\n    /**\n     * @hidden\n     */\n    protected _perPage: number;\n    /**\n     * @hidden\n     */\n    protected _page: number;\n    /**\n     * @hidden\n     */\n    protected _paging: boolean;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors: boolean;\n    /**\n     * @hidden\n     */\n    protected _rowDrag: boolean;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger: number;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression>;\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth: any;\n    /**\n     * @hidden\n     */\n    protected _columnHiding: boolean;\n    /**\n     * @hidden\n     */\n    protected _columnPinning: boolean;\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns: any;\n    protected _allowFiltering: boolean;\n    protected _allowAdvancedFiltering: boolean;\n    protected _filterMode: FilterMode;\n    protected observer: ResizeObserver;\n    protected resizeNotify: Subject<{}>;\n    private columnListDiffer;\n    private _hiddenColumnsText;\n    private _pinnedColumnsText;\n    private _height;\n    private _width;\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize;\n    protected _loadingId: any;\n    private _totalWidth;\n    private _pinnedVisible;\n    private _unpinnedVisible;\n    private _pinnedWidth;\n    private _unpinnedWidth;\n    private _visibleColumns;\n    private _columnGroups;\n    private _columnWidth;\n    protected _defaultTargetRecordNumber: number;\n    private _summaryPosition;\n    private _summaryCalculationMode;\n    private _cellSelectionMode;\n    private _rowSelectionMode;\n    private rowEditPositioningStrategy;\n    private rowEditSettings;\n    private verticalScrollHandler;\n    private horizontalScrollHandler;\n    /**\n    * @hidden\n    * @internal\n    */\n    hideOverlays(): void;\n    private keydownHandler;\n    constructor(selectionService: IgxGridSelectionService, crudService: IgxGridCRUDService, colResizingService: IgxColumnResizingService, gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, _transactions: TransactionService<Transaction, State>, elementRef: ElementRef, zone: NgZone, document: any, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, differs: IterableDiffers, viewRef: ViewContainerRef, navigation: IgxGridNavigationService, filteringService: IgxFilteringService, overlayService: IgxOverlayService, summaryService: IgxGridSummaryService, _displayDensityOptions: IDisplayDensityOptions);\n    _setupServices(): void;\n    _setupListeners(): void;\n    /**\n     * @hidden\n     */\n    ngOnInit(): void;\n    protected setupColumns(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetColumnsCaches(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetForOfCache(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetColumnCollections(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetCachedWidths(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    resetCaches(): void;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    _setupRowObservers(): void;\n    _zoneBegoneListeners(): void;\n    /**\n     * @hidden\n     */\n    ngAfterViewInit(): void;\n    notifyChanges(repaint?: boolean): void;\n    protected resetNotifyChanges(): void;\n    ngDoCheck(): void;\n    /**\n     * @hidden\n     * @internal\n    */\n    getDragGhostCustomTemplate(): TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void;\n    /**\n     * @hidden\n     */\n    dataLoading(event: any): void;\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs): void;\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly nativeElement: any;\n    /**\n     * @hidden\n     */\n    protected readonly outlet: IgxOverlayOutletDirective;\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly defaultRowHeight: number;\n    readonly defaultSummaryHeight: number;\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n     * @memberof IgxGridBaseComponent\n     */\n    readonly defaultHeaderGroupMinWidth: number;\n    paginatorClassName(): string;\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly calcPinnedContainerMaxWidth: number;\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly unpinnedAreaMinWidth: number;\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly pinnedWidth: number;\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly unpinnedWidth: number;\n    readonly isHorizontalScrollHidden: boolean;\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    readonly featureColumnsWidth: number;\n    /**\n     * @hidden\n     */\n    readonly summariesMargin: number;\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly columns: IgxColumnComponent[];\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly pinnedColumns: IgxColumnComponent[];\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly unpinnedColumns: IgxColumnComponent[];\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n     * @memberof IgxGridBaseComponent\n     */\n    getHeaderGroupWidth(column: IgxColumnComponent): string;\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    getColumnByName(name: string): IgxColumnComponent;\n    /**\n     * Returns the `IgxRowComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly visibleColumns: IgxColumnComponent[];\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent;\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent;\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly totalPages: number;\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly isFirstPage: boolean;\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    nextPage(): void;\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    previousPage(): void;\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly totalRecords: number;\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly isLastPage: boolean;\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly totalWidth: number;\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly showRowSelectors: boolean;\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly showDragIcons: boolean;\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition): void;\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?: any): any[];\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition): void;\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition): void;\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n      * @memberof IgxGridBaseComponent\n      */\n    moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos?: DropPosition): void;\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    paginate(val: number): void;\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    markForCheck(): void;\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    addRow(data: any): void;\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    deleteRow(rowSelector: any): void;\n    /** @hidden */\n    deleteRowById(rowId: any): void;\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number): void;\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    updateCell(value: any, rowSelector: any, column: string): void;\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    updateRow(value: any, rowSelector: any): void;\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    sort(expression: ISortingExpression | Array<ISortingExpression>): void;\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree, ignoreCase?: boolean): void;\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    filterGlobal(value: any, condition: any, ignoreCase?: any): void;\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    enableSummaries(...rest: any[]): void;\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    disableSummaries(...rest: any[]): void;\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    clearFilter(name?: string): void;\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    clearSort(name?: string): void;\n    /**\n     * @hidden\n     */\n    refreshGridState(args?: any): void;\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    pinColumn(columnName: string | IgxColumnComponent, index?: any): boolean;\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    unpinColumn(columnName: string | IgxColumnComponent, index?: any): boolean;\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    reflow(): void;\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number;\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    refreshSearch(updateActiveInfo?: boolean): number;\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    clearSearch(): void;\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasSortableColumns: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasEditableColumns: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasFilterableColumns: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasSummarizedColumns: boolean;\n    /**\n     * @hidden\n     */\n    readonly rootSummariesEnabled: boolean;\n    /**\n     * @hidden\n     */\n    hasVisibleColumns: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasMovableColumns: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasColumnGroups: boolean;\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly hasColumnLayouts: boolean;\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    readonly selectedCells: IgxGridCellComponent[] | any[];\n    /**\n     * @hidden\n     */\n    readonly multiRowLayoutRowSize: number;\n    /**\n     * @hidden\n     */\n    protected readonly rowBasedHeight: number;\n    /**\n     * @hidden\n     */\n    protected readonly isPercentWidth: boolean;\n    /**\n     * @hidden @internal\n     */\n    readonly isPercentHeight: boolean;\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth(): void;\n    /**\n     * @hidden\n     */\n    protected readonly defaultTargetBodyHeight: number;\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    readonly renderedRowHeight: number;\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow(): void;\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight(): void;\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number;\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number;\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number;\n    protected checkContainerSizeChange(): boolean;\n    protected _shouldAutoSize(renderedHeight: any): boolean;\n    readonly outerWidth: number;\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    getVisibleContentHeight(): any;\n    /**\n     * @hidden\n     */\n    getPossibleColumnWidth(baseWidth?: number): string;\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth(): void;\n    private getColumnWidthSum;\n    hasVerticalSroll(): boolean;\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number;\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>): void;\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes(): void;\n    private _applyWidthHostBinding;\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    getFeatureColumnsWidth(): number;\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    getPinnedWidth(takeHidden?: boolean): number;\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden?: boolean): number;\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any): void;\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean): void;\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions: any): void;\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec: any): DataType;\n    private getScrollWidth;\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns(): void;\n    protected generateDataFields(data: any[]): string[];\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr: any): any;\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb?: Function): void;\n    /**\n     * @hidden\n     */\n    protected reinitPinStates(): void;\n    /**\n     * @hidden\n     */\n    isColumnGrouped(fieldName: string): boolean;\n    /**\n     * @hidden\n     */\n    onHeaderSelectorClick(event: any): void;\n    /**\n    * @hidden\n    * @internal\n    */\n    isGroupByRecord(rec: any): boolean;\n    /**\n     * @hidden\n     */\n    readonly headSelectorBaseAriaLabel: \"Deselect all filtered\" | \"Select all filtered\" | \"Deselect all\" | \"Select all\";\n    /**\n     * @hidden\n     * @internal\n     */\n    readonly totalRowsCountAfterFilter: number;\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    readonly dataView: any[];\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    selectedRows(): any[];\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    selectRows(rowIDs: any[], clearCurrentSelection?: boolean): void;\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    deselectRows(rowIDs: any[]): void;\n    /**\n     * Selects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n     * @memberof IgxGridBaseComponent\n     */\n    selectAllRows(onlyFilterData?: boolean): void;\n    /**\n     * Deselects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n     * @memberof IgxGridBaseComponent\n     */\n    deselectAllRows(onlyFilterData?: boolean): void;\n    clearCellSelection(): void;\n    dragScroll(dir: DragScrollDirection): void;\n    isDefined(arg: any): boolean;\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void;\n    columnToVisibleIndex(field: string | number): number;\n    setSelection(range: GridSelectionRange): void;\n    getSelectedRanges(): GridSelectionRange[];\n    protected extractDataFromSelection(source: any[], formatters?: boolean, headers?: boolean): any[];\n    protected getSelectableColumnsAt(index: any): IgxColumnComponent[];\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters?: boolean, headers?: boolean): any[];\n    /**\n     * @hidden\n     */\n    scrollHandler: (event: any) => void;\n    copyHandlerIE(): void;\n    /**\n     * @hidden\n     * @internal\n     */\n    copyHandler(event: any, ie11?: boolean): void;\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    navigateTo(rowIndex: number, visibleColIndex?: number, cb?: Function): void;\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    getNextCell(currRowIndex: number, curVisibleColIndex: number, callback?: (IgxColumnComponent: any) => boolean): ICellPosition;\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    getPreviousCell(currRowIndex: number, curVisibleColIndex: number, callback?: (IgxColumnComponent: any) => boolean): ICellPosition;\n    private executeCallback;\n    private getPrevDataRowIndex;\n    private getNextDataRowIndex;\n    private isValidPosition;\n    /**\n     * @hidden\n     */\n    wheelHandler: (isScroll?: boolean) => void;\n    /**\n     * @hidden\n     */\n    trackColumnChanges(index: any, col: any): any;\n    private find;\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    filteredSortedData: any[];\n    /**\n     * @hidden\n     */\n    protected initPinning(): void;\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection?: any[]): void;\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number): void;\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void;\n    private rebuildMatchCache;\n    /**\n     * @hidden\n     */\n    isExpandedGroup(_group: IGroupByRecord): boolean;\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>): void;\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState(): void;\n    openRowOverlay(id: any): void;\n    /**\n     * @hidden\n     */\n    closeRowEditingOverlay(): void;\n    /**\n     * @hidden\n     */\n    toggleRowEditingOverlay(show: any): void;\n    /**\n     * @hidden\n     */\n    repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>): void;\n    private configureRowEditingOverlay;\n    /**\n     * @hidden\n     */\n    readonly rowChangesCount: number;\n    protected writeToData(rowIndex: number, value: any): void;\n    endRowTransaction(commit: boolean, row: IgxRow): void;\n    /**\n    * @hidden\n    */\n    gridOutletKeyboardHandler(event: any): void;\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    endEdit(commit?: boolean, event?: Event): void;\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler;\n    /**\n     * @hidden\n     */\n    readonly dataWithAddedInTransactionRows: any;\n    readonly dataLength: any;\n    hasHorizontalScroll(): boolean;\n    protected _restoreVirtState(row: any): void;\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean;\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean;\n    /**\n     * @hidden\n     */\n    readonly shouldOverlayLoading: boolean;\n    /**\n    * @hidden\n    */\n    isSummaryRow(rowData: any): boolean;\n    /** @hidden */\n    readonly isMultiRowSelectionEnabled: boolean;\n    /** @hidden */\n    readonly isRowSelectable: boolean;\n    /** @hidden */\n    readonly isCellSelectable: boolean;\n    /** @hidden */\n    viewDetachHandler(args: ICachedViewLoadedEventArgs): void;\n    /**\n     * @hidden\n     */\n    cachedViewLoaded(args: ICachedViewLoadedEventArgs): void;\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    openAdvancedFilteringDialog(): void;\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    closeAdvancedFilteringDialog(applyChanges: boolean): void;\n}\n"]}