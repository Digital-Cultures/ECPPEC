{"version":3,"file":"grid.component.d.ts","sources":["grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, QueryList, ElementRef, TemplateRef, DoCheck, AfterContentInit, OnInit } from '@angular/core';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\nexport declare class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id;\n    /**\n     * @hidden @internal\n     */\n    groupingResult: any[];\n    /**\n     * @hidden @internal\n     */\n    groupingMetadata: any[];\n    /**\n     * @hidden @internal\n     */\n    groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer: any;\n    private _data;\n    private _hideGroupedColumns;\n    private _dropAreaMessage;\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    id: string;\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    data: any[];\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n       * ```typescript\n       * this.grid.filteredData = [{\n       *       ID: 1,\n       *       Name: \"A\"\n       * }];\n       * ```\n    * @memberof IgxGridComponent\n       */\n    filteredData: any;\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Returns the total number of records in the data source.\n       * Works only with remote grid virtualization.\n       * ```typescript\n       * const itemCount = this.grid1.totalItemCount;\n       * ```\n    * @memberof IgxGridComponent\n       */\n    totalItemCount: any;\n    private readonly _gridAPI;\n    private _filteredData;\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n       * event with the appropriate arguments.\n       * ```typescript\n       * this.grid.groupingExpressions = [{\n       *     fieldName: \"ID\",\n       *     dir: SortingDirection.Asc,\n       *     ignoreCase: false\n       * }];\n       * ```\n       *\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n       * ```\n    * @memberof IgxGridComponent\n       */\n    groupingExpressions: IGroupingExpression[];\n    /**\n     *@hidden\n     */\n    groupingExpressionsChange: EventEmitter<IGroupingExpression[]>;\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Sets a list of expansion states for group rows.\n       * ```typescript\n       *      this.grid.groupingExpansionState = [{\n       *      expanded: false,\n       *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n       *   }];\n       * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n       * ```\n       *\n       * Two-way data binding.\n       * ```html\n       * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n       * ```\n    * @memberof IgxGridComponent\n       */\n    groupingExpansionState: IGroupByExpandState[];\n    /**\n     *@hidden\n     */\n    groupingExpansionStateChange: EventEmitter<IGroupByExpandState[]>;\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    groupsExpanded: boolean;\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    groupsRecords: IGroupByRecord[];\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    hideGroupedColumns: boolean;\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    dropAreaMessage: string;\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    dropAreaTemplate: TemplateRef<any>;\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n     */\n    onGroupingDone: EventEmitter<IGroupingDoneEventArgs>;\n    /**\n     * @hidden\n     */\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n    private _groupsRowList;\n    /**\n     * @hidden\n     */\n    defaultDropAreaTemplate: TemplateRef<any>;\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    readonly groupsRowList: QueryList<any>;\n    /**\n     * @hidden\n     */\n    groupArea: ElementRef;\n    /**\n     * @hidden\n     */\n    readonly groupAreaHostClass: string;\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n       * ```typescript\n       * this.grid.groupRowTemplate = myRowTemplate.\n       * ```\n    * @memberof IgxGridComponent\n       */\n    groupRowTemplate: TemplateRef<any>;\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    /**\n       * Sets the template reference of the `IgxGridComponent`'s group area.\n       * ```typescript\n       * this.grid.groupAreaTemplate = myAreaTemplate.\n       * ```\n    * @memberof IgxGridComponent\n       */\n    groupAreaTemplate: TemplateRef<any>;\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void;\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    clearGrouping(name?: string | Array<string>): void;\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    isExpandedGroup(group: IGroupByRecord): boolean;\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    toggleGroup(groupRow: IGroupByRecord): void;\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    fullyExpandGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden\n     */\n    isGroupByRecord(record: any): boolean;\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    toggleAllGroupRows(): void;\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    readonly hasGroupableColumns: boolean;\n    private _setGroupColsVisibility;\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    readonly dropAreaVisible: boolean;\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState;\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord): void;\n    /**\n     * @hidden\n     */\n    protected _applyGrouping(): void;\n    /**\n     * @hidden\n     */\n    isColumnGrouped(fieldName: string): boolean;\n    /**\n    * @hidden\n    */\n    getContext(rowData: any, rowIndex: any): any;\n    /**\n    * @hidden\n    */\n    readonly template: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    onChipRemoved(event: IBaseChipEventArgs): void;\n    /**\n     * @hidden\n     */\n    chipsOrderChanged(event: IChipsAreaReorderEventArgs): void;\n    /**\n     * @hidden\n     */\n    chipsMovingEnded(): void;\n    /**\n     * @hidden\n     */\n    onChipClicked(event: IChipClickEventArgs): void;\n    /**\n     * @hidden\n     */\n    onChipKeyDown(event: IChipKeyDownEventArgs): void;\n    /**\n     * @hidden\n     */\n    protected readonly defaultTargetBodyHeight: number;\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number;\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    getFeatureColumnsWidth(): number;\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void;\n    /**\n    * @hidden\n    */\n    readonly dropAreaTemplateResolved: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    getGroupByChipTitle(expression: IGroupingExpression): string;\n    /**\n     * @hidden\n     */\n    readonly iconTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    getColumnGroupable(fieldName: string): boolean;\n    /**\n     * @hidden\n     */\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters?: boolean, headers?: boolean): any[];\n    private _setupNavigationService;\n    private checkIfNoColumnField;\n}\n"]}