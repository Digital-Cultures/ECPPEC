{"version":3,"file":"calendar-base.d.ts","sources":["calendar-base.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\n/**\n * Sets the selction type - single, multi or range.\n */\nexport declare enum CalendarSelection {\n    SINGLE = \"single\",\n    MULTI = \"multi\",\n    RANGE = \"range\"\n}\nexport declare enum ScrollMonth {\n    PREV = \"prev\",\n    NEXT = \"next\",\n    NONE = \"none\"\n}\nexport declare class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    /**\n    * Sets the start day of the week.\n    * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n    */\n    weekStart: WEEKDAYS | number;\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    /**\n    * Sets the `locale` of the calendar.\n    * Expects a valid BCP 47 language tag.\n    * Default value is `\"en\"`.\n    */\n    locale: string;\n    /**\n     * Gets the date format options of the days view.\n     */\n    /**\n    * Sets the date format options of the days view.\n    * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n    */\n    formatOptions: IFormattingOptions;\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    /**\n    * Gets whether the `day`, `month` and `year` should be rendered\n    * according to the locale and formatOptions, if any.\n    */\n    formatViews: IFormattingViews;\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    /**\n    * Sets the selection.\n    */\n    selection: string;\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    /**\n    * Sets the selected date(s).\n    *\n    * When selection is set to `single`, it accepts\n    * a single `Date` object.\n    * Otherwise it is an array of `Date` objects.\n    */\n    value: Date | Date[];\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    /**\n    * Sets the date that will be presented in the default view when the component renders.\n    */\n    viewDate: Date;\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    /**\n    * Sets the disabled dates' descriptors.\n    * ```typescript\n    *@ViewChild(\"MyCalendar\")\n    *public calendar: IgxCalendarComponent;\n    *ngOnInit(){\n    *    this.calendar.disabledDates = [\n    *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n    *     {type: DateRangeType.Weekends}];\n    *}\n    *```\n    */\n    disabledDates: DateRangeDescriptor[];\n    /**\n     * Gets the special dates descriptors.\n     */\n    /**\n    * Sets the special dates' descriptors.\n    * ```typescript\n    *@ViewChild(\"MyCalendar\")\n    *public calendar: IgxCalendarComponent;\n    *ngOnInit(){\n    *    this.calendar.specialDates = [\n    *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n    *     {type: DateRangeType.Weekends}];\n    *}\n    *```\n    */\n    specialDates: DateRangeDescriptor[];\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n    hideOutsideDays: boolean;\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    onSelection: EventEmitter<Date | Date[]>;\n    /**\n     *@hidden\n     */\n    private _selection;\n    /**\n     *@hidden\n     */\n    rangeStarted: boolean;\n    /**\n    *@hidden\n    */\n    private _locale;\n    /**\n     *@hidden\n     */\n    private _viewDate;\n    /**\n     *@hidden\n     */\n    private _disabledDates;\n    /**\n     *@hidden\n     */\n    private _specialDates;\n    /**\n     *@hidden\n     */\n    private _formatOptions;\n    /**\n     *@hidden\n     */\n    private _formatViews;\n    /**\n     *@hidden\n     */\n    protected formatterWeekday: any;\n    /**\n     *@hidden\n     */\n    protected formatterDay: any;\n    /**\n     *@hidden\n     */\n    protected formatterMonth: any;\n    /**\n     *@hidden\n     */\n    protected formatterYear: any;\n    /**\n     *@hidden\n     */\n    protected formatterMonthday: any;\n    /**\n     *@hidden\n     */\n    protected calendarModel: Calendar;\n    /**\n     * @hidden\n     */\n    monthScrollDirection: ScrollMonth;\n    /**\n     *@hidden\n     */\n    scrollMonth$: Subject<{}>;\n    /**\n     *@hidden\n     */\n    stopMonthScroll$: Subject<boolean>;\n    /**\n     *@hidden\n     */\n    startMonthScroll$: Subject<{}>;\n    /**\n     *@hidden\n     */\n    selectedDates: any;\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void;\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void;\n    /**\n     * @hidden\n     */\n    constructor();\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs;\n    /**\n     *@hidden\n     */\n    private generateDateRange;\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle;\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple;\n    /**\n     *@hidden\n     */\n    private selectRange;\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle;\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple;\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    deselectMultipleInMonth(value: Date): void;\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange;\n    /**\n     * @hidden\n     */\n    protected initFormatters(): void;\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date): Date;\n    /**\n     * @hidden\n     */\n    registerOnChange(fn: (v: Date) => void): void;\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn: () => void): void;\n    /**\n     * @hidden\n     */\n    writeValue(value: Date | Date[]): void;\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    isDateDisabled(date: Date): boolean;\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    selectDate(value: Date | Date[]): void;\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    deselectDate(value?: Date | Date[]): void;\n    /**\n     * @hidden\n     */\n    selectDateFromClient(value: Date): void;\n}\n"]}