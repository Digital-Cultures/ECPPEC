{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/operations.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/container-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/base.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.strategy.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-handle.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/daysview-navigation.service.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/months-view.pipe.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/common/enums.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/common/templates.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/paginator-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","ng://igniteui-angular/lib/grids/igx-row-selectors.module.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/label/thumb-label.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","PlatformUtil","platformId","isBrowser","isPlatformBrowser","isIOS","window","Injectable","providedIn","type","Inject","PLATFORM_ID","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","undefined","expression","groupParent","unshift","DefaultSortingStrategy","instance","_instance","sort","data","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","parent","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","And","Or","Regular","Advanced","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","_super","_instace","filter","advancedExpressionsTree","ADD","DELETE","UPDATE","String","Number","Boolean","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","recordsPerPage","countPages","countRecords","PagingError","isNaN","Math","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","item","rowId","transaction","TransactionType","newValue","map","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","parseValue","dataType","DataType","parseFloat","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","filteringPipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","setPosition","justifyContent","alignItems","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","ContainerPositionStrategy","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","tslib_1.__decorate","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","destroyed","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","totalItemCount","onChunkLoad","onScrollbarVisibilityChanged","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","dc","scrollComponent","getScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","createComponent","scrollDirection","touchAction","initSizesCache","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","throttleTime","leading","trailing","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","ngAfterViewInit","contentObserver","ResizeObserver","observe","disconnect","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","_calcVirtualScrollTop","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","scrollable","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","currentScrollTop","realPercentScrolled","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","onStable","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","_scrollPosition","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupBase","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","FLUENT","SEARCH","FLUENT_SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","isFluentSearch","isFluent","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","IgxDragHandleDirective","baseClass","VERTICALLY","HORIZONTALLY","NONE","_pageX","_pageY","IgxDragDirective","viewContainer","zone","renderer","ghostContext","dragTolerance","ghost","ghostClass","hideBaseOnDrag","animateOnRelease","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","_visibility","selectDisabled","defaultReturnDuration","animInProgress","_baseMarginLeft","_baseMarginTop","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","bVisible","IgxDragLocation","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","getComputedStyle","ghostMarginTop","ngAfterContentInit","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","_baseOriginX","_baseOriginY","_ghostStartX","_ghostStartY","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","transformX","transformY","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","handleFound","handle","currentTarget","targetElement","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","owner","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedMovedX","updatedMovedY","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","visible","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","newPosX","newPosY","totalDraggedX","totalDraggedY","diffStartX","diffStartY","dropFinished","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","match","posY","ghostPosition","getPropertyValue","offsetParent","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","LEFT","RIGHT","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","FEBRUARY","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","getFirstViewDate","activeViewIdx","getNextMonth","TimeDeltaInterval","getPrevMonth","getNextYear","getPrevYear","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","SINGLE","MULTI","RANGE","PREV","NEXT","IgxCalendarBase","hideOutsideDays","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","selectRange","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","activeView","yearsBtns","idx","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","monthsRef","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isDisabled","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","Direction","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","daysNavService","changeDaysView","monthAction","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","focusActiveDate","isToday","selectDay","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxCalendarComponent","hasHeader","animationAction","isKeydownTrigger","_monthsViewNumber","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","onActiveViewDecade","dacadeView","onActiveViewDecadeKB","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","callback","changeMonth","monthsBtns","onActiveViewYear","monthsView","focusMonth","attributes","onActiveViewYearKB","getViewDate","animationDone","toState","onKeydownPageDown","activeDate","isPageDown","activeElement","dayItem","onKeydownShiftPageUp","yearView","getMonthView","animations","transition","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","yearsBtn","onKeydownPageUp","IgxMonthViewSlotsCalendar","IgxGetViewDateCalendar","calendar","wholeDate","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","IgxCarouselComponent","platformUtil","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","activeChange","_active","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onSelectTransitionDone","propertyName","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","IgxComboFilterConditionPipe","ItemHeights","diffInSets","set1","set2","results","entry","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","_overlaySettings","IgxComboState","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","searchValue","manageRequiredAsterisk","_displayKey","clearSorting","comboInput","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","DataTypes","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","removed","added","removedItems","addedItems","convertKeysToItems","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","valueChange","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_destroy$","_onOpen","_onClose","_ngControl","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputDirectiveElementRef","_inputElementRef","_inputUserTemplateElementRef","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","_updateValidityOnBlur","_inputDirective","handleSelection","emitValueChangeEvent","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","mouseDown","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","_inputDirectiveUserTemplate","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","newCell","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","rowSelection","initPointerState","initKeyboardState","addKeyboardRange","parse","isCellSelectable","generateRange","primaryButton","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","rows","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","filteredSortedData","rData","vendor","HammerGesturesManager","doc","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","DIRECTION_HORIZONTAL","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","quickFilter","excelStyleFilter","rootLevelOnly","childLevelsOnly","rootAndChildLevels","dataCell","summaryCell","hierarchicalRow","none","single","multiple","IgxGridCellComponent","touchManager","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","_cellSelection","GridSelectionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","addPointerListeners","removePointerListeners","gridRowSpan","gridColumnSpan","colEnd","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","cellSelectionMode","compositionStartHandler","compositionEndHandler","cssProps","crud","editableCell","isCellSelected","update","onCellClick","onContextMenu","shouldEmitSelection","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","dragging","defaultCssClass","_rowData","resolveClasses","visibleColumns","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","onRowSelectorClick","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","rowIslandAPI","rowIsland","updateColumnList","repaint","_","IgxRowIslandAPIService","childRowIslands","childGrids","unset","oldId","registerChildRowIsland","unsetChildRowIsland","getChildRowIsland","rowIslandKey","registerChildGrid","parentRowID","getChildGrids","inDepth","allChildren","getChildGridByID","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disablePinning","_defaultMinWidth","_hasSummary","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","filteringService","refreshExpressions","hideFilteringRowOnColumnVisibilityChange","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","columnGroup","vIndex","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","resetCaches","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","multiRowLayoutRowSize","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","calcWidth","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","getLargestCellWidth","reflow","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingLeft","paddingRight","borderRightWidth","headerCell","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","gridUnpinnedWidth","getUnpinnedWidth","elementWidth","unpinnedAreaMinWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","isLastPinned","orderedCols","rs","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualMinWidth","minWidth","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","combinedSpan","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxResizeHandleDirective","colResizingService","_dblClick","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","childNodes","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","RowEditPositionStrategy","isTop","isTopInitialPosition","container","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","api","activateCell","currentCellIndex","rowEditTabs","last","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","rowExpandedIndicatorTemplate","defaultGroupByExpandedTemplate","rowCollapsedIndicatorTemplate","defaultGroupByCollapsedTemplate","isKeySupportedInGroupRow","handleTabKey","getColumnByName","dataView","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","headerContainer","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","tslib_1.__spread","isRowInEditMode","findNextEditable","gridColumns","MoveDirection","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","findFirstDataRowIndex","verticalScroll","isGroupByRecord","findLastDataRowIndex","targetScr","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","shouldPerformVerticalScroll","targetRowIndex","targetRow","performVerticalScrollToCell","visibleColIndex","unpinnedIndex","cellElement","nextIndex","tbody","icons","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","_filterIconsRegistered","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","ExpressionUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxExcelStyleLoadingValuesTemplateDirective","IgxExcelStyleSearchComponent","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","refreshSize","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","isSpecial","isBlanks","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","isColumnPinnable","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","pinClass","closeDropdown","onPin","onHide","onTextFilterClick","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","isLoading","getColumnFilterExpressionsTree","colVals","columnValues","toDateString","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","filterListItem","FilterListItem","numberPipe","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","selectAllFilterItems","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","PaginatorResStrings","igx_paginator_label","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","TOP","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","onBeforeViewDetach","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","condToRemove","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","viewPort","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputElement","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","notifyOnChanges","ExpressionGroupItem","ExpressionItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","overlayOutlet","contextMenuToggle","contextualGroup","_selectedColumn","selectedCondition","dragArgs","calculateContextMenuTarget","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","hovered","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","findSingleSelectedGroup","filteringLogics","op","isInsideGroup","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroupRecursive","operandExpression","minTop","maxRight","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","setAddButtonFocus","addRootAndGroupButton","addConditionButton","applyChanges","onChipSelectionEnd","IgxRowSelectorDirective","templateRef","IgxHeadSelectorDirective","IgxRowSelectorsModule","IgxGroupByRowTemplateDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGroupAreaDropDirective","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","expander","expanderWidth","rowRect","ghostCells","getElementsByClassName","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxRowDragModule","IgxGridTransaction","IgxGridBaseComponent","differs","viewRef","_cdrRequests","_cdrRequestRepaint","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","overlayIDs","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","autoGenerate","filteringExpressionsTreeChange","advancedFilteringExpressionsTreeChange","pageChange","perPageChange","columnHidingTitle","columnPinningTitle","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onGridCopy","tmpOutlets","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","sortingExpressionsChange","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_hideRowSelectors","_rowDrag","_filteringPipeTrigger","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_allowFiltering","_allowAdvancedFiltering","_filterMode","observer","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","_cellSelectionMode","_rowSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","keydownHandler","isNavigationKey","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","tfoot","rowEditingWheelHandler","_scrollWidth","FilteringExpressionsTreeType","_advancedFilteringExpressionsTree","previous","navigateTo","hasVisibleColumns","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","rowSelectorsTemplates","_customDragIndicatorIconTemplate","dragIndicatorIconTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","overlayID","_setupServices","_setupListeners","_advancedFilteringOverlayId","ind","$event","isPercentHeight","getDataBasedBodyHeight","calculateGridHeight","calculateGridSizes","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","combineLatest","_zoneBegoneListeners","initPinning","reattach","vertScrDC","displayContainer","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","toggleColumnVisibility","paginatorClassName","unpinnedWidth","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","to","list","fromIndex","toIndex","newList","_resetColumnList","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","_hasVisibleColumns","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","columnWidthCombined","allItems","theadRow","minHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","footer","getFilterCellHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","_shouldAutoSize","bodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","showDragIcons","headerDragContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","headerSelectorContainer","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderSelectorClick","selectedRows","selectRows","deselectRows","onlyFilterData","deselectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","selectionMap","tuple","cellSelection","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","copyHandlerIE","copyHandler","ie11","setData","childGridsData","shouldScrollVertically","shouldScrollHorizontally","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","gridOutletKeyboardHandler","activeCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","viewDetachHandler","focusedCell","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","closeAdvancedFilteringDialog","advancedFilteringDialog","IgxGridFooterComponent","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","MIN_VALUE","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxSelectGroupComponent","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectModule","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","paginatorSelectDisplayDensity","IgxPaginatorModule","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","styles","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","NavigationDirection","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isGroupRow","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","hScroll","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","expression_1","expression_1_1","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","expansionStatesChange","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","getNextScrollable","targetIndex_1","scrTopPosition","verticalScrollTop","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","horizontalScrollGridToIndex","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","callBackFunc","containerTop","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","showExpandAll","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","currPath","pathElem","childrenForLayout","layoutMap","getParentRowId","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","cleanGridState","childGridTemplates","tmpl","IgxChildGridRowComponent","ch","_handleLayoutChanges","hGrid","setupEventEmitters","inputNames","outputs","matchingInputPropName","output","IgxHierarchicalGridComponent","hierarchicalStateChange","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","dragIndicatorIconTemplate","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","toggleAll","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","isOpenChange","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","FROM","TO","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","SliderHandle","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","IgxThumbLabelComponent","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_labels","SliderType","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","thumb","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","onPanStart","onPanEnd","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","labelFrom","positionHandle","ngAfterContentChecked","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","positionLeft","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","_currentBottomNavId","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","setPanelsAttributes","_panelsChanges$","panels","panelsArray","tabPanels","getTabPanelId","getTabId","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","autoGenerated","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","_tabs","IgxTabItemComponent","_ngZone","_nativeTabItem","relatedGroup","tabsArray","finalIndex","nativeTabItem","FIXED","CONTENTFIT","NEXT_TABS_ID","IgxTabsComponent","_currentTabsId","selectedIndexChange","tabsType","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","TabsType","performSelection","hideIndicator","tabsContainer","setGroupsAttributes","_groupChanges$","resetSelectionOnCollectionChanged","groupsArray","tabsGroup","getTabsGroupId","getTabItemId","currentTab","tabsArray_1","tabsArray_1_1","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","IgxTabsModule","IgxItemListDirective","timePicker","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showAmPmList","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_hoursPos","_minutesPos","_secondsPos","_amPmPos","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","_dialogOverlaySettings","_dateFromModel","_mask","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_inputGroup","_onDropDownClosed","determineCursorPos","onKeydownSpace","onAltArrowDown","clearCursorPos","lastIndexOf","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroMinute","itemsCount","formattedMinute","formattedHour","minute","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_isEntryValid","validH","validM","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","IgxTimePickerModule","IgxToastComponent","_isVisible","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","isVisibleChange","IgxToastPosition","mapPositionToClassName","IgxToastModule","SMALL","MEDIUM","LARGE"],"mappings":"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OAAkBizF,EAAGjzF,QAAUrlE,YAClCs4J,EAAGxlC,UACJwlC,EAAGjzF,MAAM5oE,WAAW4E,cAAc/D,QAAQw9D,IAAe,IAG7D,OAAOt+D,EAAO7P,OAAS,EAAI6P,EAAS,wBApB3CmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,6BAqBVqsJ,EAtBA,GC8BAE,GAAA,WAAA,SAAAA,KAoDA,2BApDCv9J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVk4H,GACAZ,GACAsiC,GACAjmC,GACAmC,GACA3B,GACA0B,GACAiC,GACAE,GACAD,GACAE,GACAvE,GACA0pC,IAEJn9J,QAAS,CACLi4H,GACAJ,GACAE,GACAD,GACAE,GACAvE,GACAmC,IAEJroF,QAAS,CACLC,EAAAA,aACAo1C,EAAAA,YACA82E,GACAp1G,GACAqqB,GACAuwB,GACAx2B,GACA5M,GACAnZ,GACA5E,GACA5C,GACA0rC,GACAp0B,GACA/xB,GACAw8H,GACA7F,IAEJj8G,gBAAiB,CACb68E,IAEJh4H,UAAW,CACP4gC,QAKRw8H,EApDA,GCuCAC,GAAA,WAAA,SAAAA,KA2ImC,2BA3IlCx9J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACV8qG,GACA0I,GACAyH,GACAG,GACAmiB,GACAlY,GACAoC,GACAnU,GACAD,GACAE,GACAH,GACAsU,GACAE,GACAD,GACAE,GACApJ,GACAT,GACAwB,GACAe,GACAkB,GACA8d,GACAwO,GACAmmB,GACA3yB,GACA4I,GACAR,GACAgB,GACAmD,GACA36B,GACA8gD,GACArf,IAEJv5F,gBAAiB,CACbm4D,GACAyH,GACAG,GACAw5B,IAEJ30I,QAAS,CACL6qG,GACA0I,GACAyH,GACAG,GACAmiB,GACAlY,GACAoC,GACAnU,GACAD,GACAE,GACAH,GACAsU,GACAE,GACAD,GACAE,GACApJ,GACAe,GACAe,GACAkB,GACAyyC,GACA3vG,GACA46C,GACAx2B,GACA5M,GACAnZ,GACAjiB,GACAya,GACAyyF,GACA56E,GACA0N,GACAG,GACAgmB,GACAtc,GACAugB,GACAr5B,GACAqzD,GACA/mE,GACA4wB,GACAw2C,GACAkyC,GACA/3B,GACAwO,GACAxM,GACA4I,GACAR,GACAgB,GACAmD,GACAp7E,GACAinG,GACA2D,GACAnqD,GACAgpC,GACA4c,GACA9E,GACArf,GACA4F,IAEJhtG,QAAS,CACLC,EAAAA,aACAo1C,EAAAA,YACAt+B,GACA46C,GACAx2B,GACA5M,GACAnZ,GACAjiB,GACAya,GACAyyF,GACA56E,GACA0N,GACAG,GACAgmB,GACAtc,GACAugB,GACAr5B,GACAqzD,GACA/mE,GACA4wB,GACAw2C,GACAkyC,GACA5kG,GACAinG,GACA2D,GACAnhB,GACA8b,GACAc,GACAve,IAEJt6I,UAAW,CACPyiG,GACA7hE,GACAq+E,GACA8K,GACAtO,GACA+rB,GACA,CAAExqF,QAASk/F,GAAoB3gE,SAAU9/C,SAGd4hI,EA3InC,kBCpEA,SAAAC,mDAqJA,OArJuCz0J,EAAAA,EAAAA,GAE5By0J,EAAAvsK,UAAAgY,QAAP,SAAejE,OACLy4J,EAAgBt9J,GAAWpP,KAAK2W,KAAKqoG,qBACrCz6F,EAAenV,GAAWpP,KAAK2W,KAAK6N,oBAC1CxkB,KAAKykB,2BAA2B,CAACF,EAAcmoJ,GAAgBz4J,GAC/DjU,KAAK2W,KAAKqoG,oBAAsB0tD,EAChC1sK,KAAK2sK,+BAGFF,EAAAvsK,UAAA0sK,iBAAP,SAAwBp3J,WACdk3J,EAAgBt9J,GAAWpP,KAAK2W,KAAKqoG,qBACrCz6F,EAAenV,GAAWpP,KAAK2W,KAAK6N,wBAE1C,IAAmB,IAAAG,EAAA5U,EAAAyF,GAAWoP,EAAAD,EAAAziB,QAAA0iB,EAAAxiB,KAAAwiB,EAAAD,EAAAziB,OAAE,CAA3B,IAAM2iB,EAAID,EAAAziB,MACXnC,KAAKykB,2BAA2B,CAACF,EAAcmoJ,GAAgB7nJ,wGAGnE7kB,KAAK2W,KAAKqoG,oBAAsB0tD,EAChC1sK,KAAK2sK,+BAGFF,EAAAvsK,UAAAkmB,cAAP,SAAqBpG,GAArB,QAAApL,EAAA5U,KACU0sK,EAAgBt9J,GAAWpP,KAAK2W,KAAKqoG,qBACrCz6F,EAAenV,GAAWpP,KAAK2W,KAAK6N,oBAE1C,GAAIxE,EAAM,KACA6sJ,EAAwB,iBAAT7sJ,EAAoB,CAAEA,GAASA,EAC9C8sJ,EAAcJ,EAAc1yJ,OAAO,SAACzL,GAAU,OAAAs+J,EAAMv7J,QAAQ/C,EAAMqF,WAAa,IAC/Em5J,EAAiBxoJ,EAAavK,OAAO,SAACzL,GAAU,OAAAs+J,EAAMv7J,QAAQ/C,EAAMqF,WAAa,IACvF5T,KAAK2W,KAAKqoG,oBAAsB8tD,EAChC9sK,KAAK2W,KAAK6N,mBAAqBuoJ,EAC/BF,EAAMp6J,QAAQ,SAACkmI,OACLq0B,EAAcN,EAAc5zJ,UAAU,SAAC88G,GAAQ,OAAAA,EAAIhiH,YAAc+kI,IACjEs0B,EAAiBr4J,EAAK+B,KAAKu2J,uBAGjCt4J,EAAK+B,KAAKu2J,uBAAyBD,EAC9BjzJ,OAAO,SAACV,GACL,OAAOA,EAAIvF,WAAauF,EAAIvF,UAAUpT,QAAUqsK,UAGzD,CAEHhtK,KAAK2W,KAAKqoG,oBAAsB,GAChCh/G,KAAK2W,KAAKu2J,uBAAyB,kBACxBC,OACDC,EAAgB7oJ,EAAazL,UAAU,SAAC88G,GAAQ,OAAAA,EAAIhiH,YAAcu5J,EAAOv5J,YAC3Ew5J,GAAiB,GACjB7oJ,EAAarJ,OAAOkyJ,EAAe,QAH3C,IAAqB,IAAAC,EAAAt9J,EAAA28J,GAAaY,EAAAD,EAAAnrK,QAAAorK,EAAAlrK,KAAAkrK,EAAAD,EAAAnrK,OAAA,GAAjBorK,EAAAnrK,4GAMjBnC,KAAK2W,KAAK6N,mBAAqBD,IAIhCkoJ,EAAAvsK,UAAAqtK,+BAAP,SAAsCt2J,OAC5Bu2J,EAAUxtK,KAAK2W,KAAKu2J,uBACpBn5J,EAAYyG,GAAS3G,aAAaoD,GACxC,OAAOu2J,EAAQl2J,KAAK,SAAC/I,GACjB,OAAAiM,GAASlH,iBAAiB/E,EAAMwF,WAAa,CAAC,CAAEH,UAAWqD,EAAShD,WAAWL,UAAWzR,MAAO8U,EAAS9U,QAAU4R,MAGrH04J,EAAAvsK,UAAAutK,wBAAP,SAA+Bx2J,EAA0B8D,OAC/CpE,EAAO3W,KAAK2W,KACd+2J,GAAa,EAMjB,OALAz2J,EAASC,QAAQzE,QAAQ,SAAA4O,IACjB1K,EAAKoF,WAAasF,EAAI1K,EAAKoF,cAAgBhB,EAAQsG,IAAQtG,KAC3D2yJ,GAAa,KAGdA,GAGJjB,EAAAvsK,UAAAytK,qBAAP,SAA4B12J,OAClBN,EAAO3W,KAAK2W,KACdA,EAAKkK,YAAY8wF,cACjBh7F,EAAKuO,SAAQ,OAGX0oJ,EAAiBj3J,EAAKu2J,uBACtB3+J,EAA6BvO,KAAKutK,+BAA+Bt2J,GACnE1I,EACAA,EAAMgJ,UAAYhJ,EAAMgJ,SAExBq2J,EAAeprK,KAAK,CAChB+U,UAAWZ,EAAKk3J,eAChB95J,UAAWyG,GAAS3G,aAAaoD,KAGzCjX,KAAK2W,KAAKu2J,uBAAsBxqK,EAAOkrK,GACnCj3J,EAAKwM,aACLxM,EAAKolJ,4BAA4BplJ,EAAK8M,gBAIvCgpJ,EAAAvsK,UAAA4tK,2BAAP,SAAkC72J,OACxB1I,EAA6BvO,KAAKutK,+BAA+Bt2J,IACtD1I,EAAQA,EAAMgJ,SAAWvX,KAAK2W,KAAKk3J,iBAEhD7tK,KAAK2tK,qBAAqB12J,GAE1BA,EAAS/C,aACTlU,KAAK8tK,2BAA2B72J,EAAS/C,cAIvCu4J,EAAAvsK,UAAAokB,2BAAV,SAAqC1Q,OAC3BorG,EAAsBh/G,KAAK2W,KAAKqoG,oBAChCrrG,EAAQqrG,EAAoBlmG,UAAU,SAAC3C,GAAS,OAAAA,EAAKvC,YAAcA,KAC1D,IAAXD,GACAqrG,EAAoB9jG,OAAOvH,EAAO,IAInC84J,EAAAvsK,UAAAysK,4BAAP,eACUD,EAAgB1sK,KAAK2W,KAAKqoG,oBAChCh/G,KAAK2W,KAAK6N,mBAAmBjQ,KAAK,SAACW,EAAG3V,OAC5BwuK,EAAarB,EAAcp1J,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcsB,EAAEtB,YAC/Do6J,EAAatB,EAAcp1J,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAAcrU,EAAEqU,YACrE,OAAIm6J,GAAcC,EACPtB,EAAcp7J,QAAQy8J,GAAcrB,EAAcp7J,QAAQ08J,GAAc,GAAK,EAC7ED,GACC,EACDC,EACA,EAEA,KAKZvB,EAAAvsK,UAAA+tK,sBAAP,SAA6Bn6J,GAIzB,QAHIo6J,EAAW,KACTC,EAAa3zJ,GAAS3G,aAAaC,GAEhCtT,EAAI,EAAGA,EAAI2tK,EAAWxtK,OAAQH,IAAK,KAClC4tK,EAAaD,EAAW3tK,GAC9B0tK,GAAY,IAAIE,EAAWx6J,UAAS,OAAOw6J,EAAWjsK,MAAK,IAEvD3B,EAAI2tK,EAAWxtK,OAAS,IACxButK,GAAY,MAKpB,OAFAA,GAAY,MAKpBzB,GArJuC9sJ,OCOtB,gBACF,WAKf0uJ,GAAA,SAAAv0J,GAAA,SAAAu0J,mDAiiBA,OAhiBiDr2J,EAAAA,EAAAA,GAUtCq2J,EAAAnuK,UAAA46G,uBAAP,SAA8BC,EAAkB3H,EAAkB3+F,GAC9DzU,KAAKsuK,oBAAsB,CACvBvzD,SAAUA,EACV3H,SAAUA,EACV5rG,UAAWiN,IAIX45J,EAAAnuK,UAAAquK,oBAAR,SAA4BxzD,EAAkB3H,EAAkBo7D,OACtDC,EAAcD,IAAiBE,GACjCA,GAAiCA,GAOrC,OANI1uK,KAAKsuK,qBAAuBtuK,KAAKsuK,oBAAoB9mK,YAAcgnK,EACnExuK,KAAKsuK,oBAAoB9mK,UAAYinK,EAErCzuK,KAAK86G,uBAAuBC,EAAU3H,EAAUq7D,GAG7CD,IAAiBE,GACpB1uK,KAAKsuK,oBAAoBvzD,SAAW/6G,KAAKsuK,oBAAoBl7D,UAG9Di7D,EAAAnuK,UAAA49G,WAAP,SAAkBod,EAAyBV,GACvCx6H,KAAK2uK,sBAAsBzzC,EAAYV,IAGpC6zC,EAAAnuK,UAAA89G,aAAP,SAAoBkd,EAAyBV,GACzCx6H,KAAK4uK,wBAAwB1zC,EAAYV,IAGtC6zC,EAAAnuK,UAAAw5H,yBAAP,SAAgC13G,OACtBJ,EAAS5hB,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAAA7Y,GAAK,OAACA,EAAEskH,cAAanuG,KAAK,SAAC4I,GAAQ,OAAAA,EAAI8J,eAAiBhI,IAGnG,IAFkBhiB,KAAK2W,KAAK0iH,gBACM/5E,YACZtkB,aAAgBpZ,GAAUA,EAAO0I,OACnD,OAAO,EACJ,GAAI1I,EAAQ,CACf,GAAI5hB,KAAK6uK,2BAA2BjtJ,GAAW,OAAO,MAChDktJ,EAAY9uK,KAAK+uK,8BAA8B/sJ,GACrD,OAAOhiB,KAAK85H,uBAAyBg1C,EAAUE,YAAchvK,KAAK+5H,4BAClE/5H,KAAK+5H,4BAA8B+0C,EAAUG,WAEjD,OAAO,GAEHZ,EAAAnuK,UAAA2uK,2BAAR,SAAmCn4J,OACzBkjH,EAAW55H,KAAK2W,KAAKyK,YAAYzgB,OAAS,EAAIX,KAAK2W,KAAKyK,YAAYuqB,MAAM6tF,WAAax5H,KAAK2W,KAAK0iH,gBAEvG,IADyBO,EAASt6E,YACZtkB,aAAetkB,EAAO4T,OAAU,OAAO,MACvD3W,EAAQimH,EAASp6E,SAASluC,QAAQoF,GACxC,OAAO1W,KAAK85H,uBAAyBF,EAAS51E,oBAAoBrwC,EAAQ,GAAK3T,KAAK+5H,4BAChF/5H,KAAK+5H,4BAA8BH,EAAS51E,oBAAoBrwC,IAGjE06J,EAAAnuK,UAAAy5H,wBAAP,SAA+B33G,OAErBquG,EADWrwH,KAAK2W,KAAK0iH,gBACO/5E,YAC5B19B,EAAS5hB,KAAK2W,KAAKsJ,WAAWjG,OAAO,SAAA7Y,GAAK,OAACA,EAAEskH,cAAanuG,KAAK,SAAC4I,GAAQ,OAAAA,EAAI8J,eAAiBhI,IACnG,IAAKquG,EAAiBr1F,aAAepZ,EAAO0I,OACxC,OAAO,EAEX,GAAItqB,KAAK6uK,2BAA2BjtJ,GAAW,OAAO,MAChDktJ,EAAY9uK,KAAK+uK,8BAA8B/sJ,GACrD,OAAOhiB,KAAK+5H,4BAA8B+0C,EAAUG,YAGjDZ,EAAAnuK,UAAAipF,oBAAP,SAA2BrlD,EAAsB02F,GAC7Cx6H,KAAKkvK,wBAAwBprI,EAAS02F,IAGnC6zC,EAAAnuK,UAAAkpF,mBAAP,SAA0BtlD,EAAsB02F,GAC5Cx6H,KAAKmvK,wBAAwBrrI,EAAS02F,IAE1Ch7H,OAAAgC,eAAW6sK,EAAAnuK,UAAA,qBAAkB,KAA7B,WACI,OAAO85H,EAAIh6H,KAAK2W,KAAKsoG,cAAkBj/G,KAAK2W,KAAKuoG,iBAAiBllG,OAAO,SAAA7Y,GAAK,OAACA,EAAEskH,cAChFlxG,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAE8U,aAAezqB,EAAEyqB,gDAGhCqkJ,EAAAnuK,UAAAm9G,WAAP,SAAkB6e,EAA2B1B,OACnCx4G,EAAqBw4G,EAAa3nC,OAAS2nC,EAAa3nC,OAAOogB,mBAAqB,EACpFm8D,EAAoBpvK,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAAwF,GAAK,OAACA,EAAE2oG,aAAe3oG,EAAEkN,eAAiBhI,EAAqB,IAC1GR,EAAWg5G,EAAan5G,IACxBA,EAAMrhB,KAAK2W,KAAKqlH,cAAcx6G,GACpCxhB,KAAKqvK,iBAAiBnzC,EAAckzC,EAAmB/tJ,EAAKm5G,EAAc,QACtE40C,GACApvK,KAAK86G,uBAAuBs0D,EAAkBr0D,SAAUq0D,EAAkBh8D,SAAU,OAIlFi7D,EAAAnuK,UAAAmvK,iBAAV,SAA2BnzC,EAA2BkzC,EAAmB/tJ,EAAKm5G,EAAc/lH,GAA5F,IAAAG,EAAA5U,KACI,GAAIovK,GAAqB/tJ,EAAIM,MAAO,KAC5B2tJ,EAAWjuJ,EAAIM,MAAMrK,KAAK,SAAAi4J,GAAY,OAAAA,EAAS3tJ,SAAWwtJ,IACxD7zE,EAAYv7F,KAAK05H,yBAAyB01C,EAAkBplJ,cAClE,GAAKslJ,GAAa/zE,EAeX,CACH,GAAIv7F,KAAK2W,KAAKwM,aAAenjB,KAAKi6H,gBAAgB54G,EAAI1N,OAMlD,YALY,SAARc,EACAzU,KAAKg7H,iBAAiB35G,EAAI1N,MAAO6mH,EAAa3nC,OAAOogB,oBAErDjzG,KAAK46H,qBAAqBv5G,EAAI1N,MAAO6mH,EAAa3nC,OAAOogB,qBAIjEjzG,KAAKwvK,WAAWF,EAAShvI,mBAxBA,CACzBtgC,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAa/CxzC,KAAK23H,8BAA8Bt2G,EAAI1N,MAAOy7J,EAAkBplJ,cAAc,EAZnE,WACPslJ,EAAWjuJ,EAAIM,MAAMrK,KAAK,SAAAi4J,GAAY,OAAAA,EAAS3tJ,SAAWwtJ,IACtDx6J,EAAK+B,KAAKwM,aAAevO,EAAKqlH,gBAAgB54G,EAAI1N,OACtC,SAARc,EACAG,EAAKomH,iBAAiB35G,EAAI1N,MAAO6mH,EAAa3nC,OAAOogB,oBAErDr+F,EAAKgmH,qBAAqBv5G,EAAI1N,MAAO6mH,EAAa3nC,OAAOogB,oBAIjEr+F,EAAK46J,WAAWF,EAAShvI,sBAc9B,CAEH,GAAItgC,KAAKi6H,gBAAgB54G,EAAI1N,OAQzB,OANC3T,KAAS,KAAS+nB,QAAQ9F,oBACf,SAARxN,EACAzU,KAAK2W,KAAKugH,YAAYvrF,MAAM7H,QAAQxD,cAAciT,QAElDvzC,KAAK2W,KAAKugH,YAAYC,KAAKrzF,QAAQxD,cAAciT,SAIzD,GAAY,SAAR9+B,EACAqF,EAAA5Z,UAAM89G,aAAYp9G,KAAAZ,KAACk8H,EAAc,CAAC76G,IAAKA,EAAI1N,MAAOiO,OAAQ,QACvD,KACE6tJ,EAAmB,EACxBzvK,KAAK2W,KAAKuoG,gBAAgBzsG,QAAQ,SAACyN,GAC/BuvJ,EAAmBh0J,KAAK4O,IAAIolJ,EAAkBvvJ,EAAI8J,gBAEtDlQ,EAAA5Z,UAAM49G,WAAUl9G,KAAAZ,KAACk8H,EAAc,CAAC76G,IAAKA,EAAI1N,MAAOiO,OAAQ6tJ,OAK7DpB,EAAAnuK,UAAAk9G,mBAAP,SAA0B8e,EAA2B1B,OAC3Cx4G,EAAqBw4G,EAAa3nC,OAAS2nC,EAAa3nC,OAAOogB,mBAAqB,EACpFzxF,EAAWg5G,EAAan5G,IACxBA,EAAMrhB,KAAK2W,KAAKqlH,cAAcx6G,GAC9BkuJ,EACL1vK,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAAwF,GAAK,OAACA,EAAE2oG,aAAe3oG,EAAEkN,eAAiBhI,EAAqB,IAAMlF,EAAE+M,SAC9F7pB,KAAKqvK,iBAAiBnzC,EAAcwzC,EAAmBruJ,EAAKm5G,EAAc,QACvEk1C,GACA1vK,KAAK86G,uBAAuB40D,EAAkB30D,SAAU20D,EAAkBt8D,SAAU,OAIpFi7D,EAAAnuK,UAAAyuK,sBAAR,SAA8BzzC,EAAyBV,GAAvD,IAQQm1C,EARR/6J,EAAA5U,KACU4vK,EAAkD,yBAArC10C,EAAW3rE,QAAQl6C,cAChCw6J,EAAkBr1C,EAAa3nC,OAAU2nC,EAAa3nC,OAAOugB,SAAW,EACxE08D,EAAkB9vK,KAAKuuK,oBAAoB/zC,EAAa3nC,OAAS2nC,EAAa3nC,OAAOkoB,SAAW,EAClG80D,EACAnB,IACEqB,EAAcv1C,EAAa54G,OAC3BikG,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAM,SAAAwF,GAAK,OAAAA,EAAE+oG,cAAgB/oG,EAAEkN,eAAiB+lJ,IAGnFC,EAAqBnqD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAChD,OAACA,EAAEkyG,SAAWw8D,GAAmB1uK,EAAEiyG,SAAWjyG,EAAEy6G,cAAgBi0D,IAChE1uK,EAAE45G,UAAY+0D,IACbA,EAAkB3uK,EAAE26G,QAAUg0D,EAAkB3uK,EAAE45G,SAAW55G,EAAE06G,kBACpE,GAAI+zD,IAAeI,EAAoB,KAE7BC,EAAejwK,KAAK2W,KAAK6vG,sBAAwB,EACvDwpD,EAAqBnqD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAC5C,OAACA,EAAEkyG,SAAW48D,GAAgB9uK,EAAEiyG,SAAWjyG,EAAEy6G,cAAgBq0D,IAC7D9uK,EAAE45G,UAAY+0D,IACbA,EAAkB3uK,EAAE26G,QAAUg0D,EAAkB3uK,EAAE45G,SAAW55G,EAAE06G,kBACpE8zD,GAAW,MAETnuJ,EAAWmuJ,EAAWn1C,EAAan5G,IAAM,EAAIm5G,EAAan5G,IAChE,KAAIG,EAAW,GAAf,KAIIy+I,EACEzkF,EAAK,YACPykF,EAAUrrJ,EAAK+B,KAAKqlH,cAAcx6G,KACnBy+I,EAAQt+I,MACnB/M,EAAK46J,WAAWQ,EAAmBruJ,MAAMrK,KAAK,SAACnW,GAAM,OAAAA,EAAEqgB,WAAay+I,EAAQtsJ,QAAO2sB,eAC5E2/H,GACPA,EAAQ3/H,cAAciT,MAAM,CAAEC,eAAe,KAGjDxzC,KAAKm+H,4BAA4B38G,EAAUwuJ,EAAmBhmJ,eAC9DhqB,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC3CxzC,KAAKs+H,4BAA4B98G,EAAUwuJ,EAAmBhmJ,aAAcwxD,IAEhFA,MAIA6yF,EAAAnuK,UAAA0uK,wBAAR,SAAgC1zC,EAAyBV,GAAzD,IAQQ01C,EARRt7J,EAAA5U,KACU4vK,EAAkD,yBAArC10C,EAAW3rE,QAAQl6C,cAChC06J,EAAcv1C,EAAa54G,OAC3BikG,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAM,SAAAwF,GAAK,OAAAA,EAAE+oG,cAAgB/oG,EAAEkN,eAAiB+lJ,IACjFI,EAAgB31C,EAAa3nC,OAAS2nC,EAAa3nC,OAAOwgB,QAAUmnB,EAAa3nC,OAAOugB,SAAW,EAAI,EACvG08D,EAAkB9vK,KAAKuuK,oBAAoB/zC,EAAa3nC,OAAS2nC,EAAa3nC,OAAOkoB,SAAW,EAClGyf,EAAa3nC,OAAS2nC,EAAa3nC,OAAOugB,SAAW,EACrDs7D,IAGAU,EAAoBvpD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAAK,OAAAA,EAAEiyG,WAAa+8D,GACnEhvK,EAAE45G,UAAY+0D,IACbA,EAAkB3uK,EAAE26G,QAAUg0D,EAAkB3uK,EAAE45G,SAAW55G,EAAE06G,mBAChE+zD,GAAeR,IAEfA,EAAoBvpD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAAK,OAAe,IAAfA,EAAEiyG,UAClDjyG,EAAE45G,UAAY+0D,IACbA,EAAkB3uK,EAAE26G,QAAUg0D,EAAkB3uK,EAAE45G,SAAW55G,EAAE06G,kBACpEq0D,GAAW,OAET1uJ,EAAW0uJ,EAAW11C,EAAan5G,IAAM,EAAIm5G,EAAan5G,IAChE,KAAIG,EAAWxhB,KAAK2W,KAAKiiH,SAASj4H,OAAS,GAA3C,KAIIu/J,EACE1kF,EAAK,YACP0kF,EAAUtrJ,EAAK+B,KAAKqlH,cAAcx6G,KACnB0+I,EAAQv+I,MACnB/M,EAAK46J,WAAWJ,EAAkBztJ,MAAMrK,KAAK,SAACnW,GAAM,OAAAA,EAAEqgB,WAAa0+I,EAAQvsJ,QAAO2sB,eAC3E4/H,GACPA,EAAQ5/H,cAAciT,MAAM,CAAEC,eAAe,KAGjDxzC,KAAKm+H,4BAA4B38G,EAAU4tJ,EAAkBplJ,eAC7DhqB,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC3CxzC,KAAKs+H,4BAA4B98G,EAAU4tJ,EAAkBplJ,aAAcwxD,IAE/EA,MAIA6yF,EAAAnuK,UAAAgvK,wBAAR,SAAgCzwC,EAA0BjE,GAA1D,IAAA5lH,EAAA5U,KACU+vK,EAAcv1C,EAAa54G,OAC7BikG,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAM,SAAAwF,GAAK,OAAAA,EAAE+oG,cAAgB/oG,EAAEkN,eAAiB+lJ,IAC/EK,EAAgB51C,EAAa3nC,OAAOipB,QAAU0e,EAAa3nC,OAAOkoB,SAAW,EAC7E80D,EAAkB7vK,KAAKuuK,oBAAoB/zC,EAAa3nC,OAAOkoB,SACjEyf,EAAa3nC,OAAOugB,SACpBs7D,IACEltJ,EAAWg5G,EAAan5G,IAE1B+tJ,EAAoBvpD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAAK,OAAAA,EAAE45G,WAAaq1D,GACnEjvK,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,eACpE,IAAKwzD,EAAmB,CAGpB,KADAvpD,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAAnW,GAAK,OAAAA,EAAE0kH,eAAiB1kH,EAAE0oB,QAAU1oB,EAAE6oB,eAAiB67F,EAAa77F,aAAe,KAGrH,OAAO,KAGXolJ,EAAoBvpD,EAAalzG,SAAS2E,KAAK,SAAAnW,GAAK,OAAe,IAAfA,EAAE45G,UAClD55G,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,mBAElEpgC,EAAK,eACD60F,EAAcjB,EAAkBztJ,MAAMrK,KAAK,SAACnW,GAAM,OAAAA,EAAEqgB,WAAaA,IAAU8e,cAClF1rB,EAAK46J,WAAWa,IAEdrwK,KAAK05H,yBAAyB01C,EAAkBplJ,cAIjDwxD,KAHAx7E,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC/CxzC,KAAK23H,8BAA8Bn2G,EAAU4tJ,EAAkBplJ,cAAc,EAAOwxD,KAMpF6yF,EAAAnuK,UAAAivK,wBAAR,SAAgC1wC,EAA0BjE,GAA1D,IAAA5lH,EAAA5U,KACU+vK,EAAcv1C,EAAa54G,OAC7BikG,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAM,SAAAwF,GAAK,OAAAA,EAAE+oG,cAAgB/oG,EAAEkN,eAAiB+lJ,IAC/ED,EAAkBt1C,EAAa3nC,OAAOkoB,SACtC80D,EAAkB7vK,KAAKuuK,oBAAoBuB,EAC7Ct1C,EAAa3nC,OAAOugB,SACpBs7D,IACEltJ,EAAWg5G,EAAan5G,IAG1BquJ,EAAoB7pD,EAAalzG,SACpC2E,KAAK,SAAAnW,GAAK,OAACA,EAAE26G,SAAWg0D,GAAmB3uK,EAAE45G,SAAW55G,EAAE06G,iBAAmBi0D,IAC1E3uK,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,eACpE,IAAK8zD,EAAmB,CAGpB,KADA7pD,EAAe7lH,KAAK2W,KAAK4O,QAAQjO,KAAK,SAAAnW,GAAK,OAAAA,EAAE0kH,eAAiB1kH,EAAE0oB,QAAU1oB,EAAE6oB,eAAiB67F,EAAa77F,aAAe,KAGrH,OAAO,SAELsmJ,EAAazqD,EAAaa,2BAA2Bb,EAAalzG,UAAUhS,OAElF+uK,EAAoB7pD,EAAalzG,SAChC2E,KAAK,SAAAnW,GAAK,OAACA,EAAE26G,SAAWw0D,EAAa,GAAKnvK,EAAE45G,SAAW55G,EAAE06G,iBAAmBy0D,EAAa,IACtFnvK,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,mBAGlEpgC,EAAK,eACD+0F,EAAcb,EAAkB/tJ,MAAMrK,KAAK,SAACnW,GAAM,OAAAA,EAAEqgB,WAAaA,IAAU8e,cACjF1rB,EAAK46J,WAAWe,IAEfvwK,KAAK25H,wBAAwB+1C,EAAkB1lJ,cAIhDwxD,KAHAx7E,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC/CxzC,KAAK23H,8BAA8Bn2G,EAAUkuJ,EAAkB1lJ,cAAc,EAAOwxD,KAMrF6yF,EAAAnuK,UAAAopF,aAAP,SAAoB9nE,EAAkB64G,EAA4Bm2C,GAAlE,IAAA57J,EAAA5U,UAAsC,IAAAq6H,IAAAA,GAAA,OAC5Bo2C,EAAUzwK,KAAK2W,KAAK4O,QAAQvL,OAAO,SAAA7Y,GAAK,OAAAA,EAAE0kH,eAAiB1kH,EAAE0oB,SAAQtV,KAAK,SAACW,EAAG3V,GAAM,OAAA2V,EAAE8U,aAAezqB,EAAEyqB,eACvG0mJ,EAAaD,EAAQA,EAAQ9vK,OAAS,GACtCgwK,EAAqBD,EAAW/9J,SAChCoqJ,EAAc2T,EAAWhqD,2BAA2BiqD,GAAoBhwK,OACxEkvK,EAAkB7vK,KAAKuuK,oBACzBvuK,KAAKsuK,oBAAsBtuK,KAAKsuK,oBAAoBvzD,SAAW,EAC/Dy1D,GAAgBxwK,KAAK2W,KAAK6vG,sBAC1BkoD,IACEU,EAAoBsB,EAAW/9J,SAAS2E,KAAK,SAAAnW,GAC/C,OAACA,EAAE26G,SAAWihD,EAAa,GAAK57J,EAAE45G,SAAW55G,EAAE06G,iBAAmBkhD,EAAa,IAC/E57J,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,eAC9Dg1D,EAAgBD,EAAmB/9J,UAAUtB,QAAQ89J,GAGvDl0C,GADYb,EAAYr6H,KAAK2W,KAAK4iH,iBAAmBv5H,KAAK2W,KAAKyK,aAC1C9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,IACrD,GAAK05G,EAGL,GAFAA,EAAaA,EAAW56F,cAEnBtgC,KAAK05H,yBAAyB01C,EAAkBplJ,cAArD,KAUU6mJ,EAAY31C,EAAW1sD,iBAAiBxuE,KAAK8wK,2BAC7C9vJ,EAAQ6vJ,EAAUA,EAAUlwK,OAAS,GAAGgS,SAASi+J,GACvD5wK,KAAKwvK,WAAWxuJ,OAZpB,CACIhhB,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAM/CxzC,KAAK23H,8BAA8Bn2G,EAAU4tJ,EAAkBplJ,cAAc,EALlE,eACD6mJ,EAAY31C,EAAW1sD,iBAAiB55D,EAAKk8J,2BAC7C9vJ,EAAO6vJ,EAAUA,EAAUlwK,OAAS,GAAGgS,SAASi+J,GACtDh8J,EAAK46J,WAAWxuJ,OAWrBqtJ,EAAAnuK,UAAAmpF,cAAP,SAAqB7nE,EAAkB64G,EAA4Bm2C,GAAnE,IAAA57J,EAAA5U,UAAuC,IAAAq6H,IAAAA,GAAA,QAA4B,IAAAm2C,IAAAA,EAAA,OACzDO,EAAc/wK,KAAK2W,KAAK4O,QAAQvL,OAAO,SAAA7Y,GAAK,OAAAA,EAAE0kH,eAAiB1kH,EAAE0oB,SAAQ,GACzE8mJ,EAAqBI,EAAYp+J,SAASC,UAC1Ci9J,EAAkB7vK,KAAKuuK,oBACzBvuK,KAAKsuK,oBAAsBtuK,KAAKsuK,oBAAoBvzD,SAAW,EAC/Dy1D,EACA9B,IACEU,EAAoB2B,EAAYp+J,SAAS2E,KAAK,SAAAnW,GAChD,OAAe,IAAfA,EAAE45G,UACF55G,EAAEiyG,UAAYy8D,IACbA,EAAkB1uK,EAAEkyG,QAAUw8D,EAAkB1uK,EAAEiyG,SAAWjyG,EAAEy6G,eAC9Dg1D,EAAgBD,EAAmBr/J,QAAQ89J,GAG7Cl0C,GADYb,EAAYr6H,KAAK2W,KAAK4iH,iBAAmBv5H,KAAK2W,KAAKyK,aAC1C9J,KAAK,SAAC+J,GAAQ,OAAAA,EAAI1N,QAAU6N,IACrD,GAAK05G,EAGL,GAFAA,EAAaA,EAAW56F,cAEnBtgC,KAAK25H,wBAAwBy1C,EAAkBplJ,cAApD,KAWUhJ,EADYk6G,EAAW1sD,iBAAiBxuE,KAAK8wK,2BAC3B,GAAGn+J,SAASi+J,GACpC5wK,KAAKwvK,WAAWxuJ,OAZpB,CACIhhB,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAM/CxzC,KAAK23H,8BAA8Bn2G,EAAU4tJ,EAAkBplJ,cAAc,EALnE,eAEAhJ,EADYk6G,EAAW1sD,iBAAiB55D,EAAKk8J,2BAC5B,GAAGn+J,SAASi+J,GACnCh8J,EAAK46J,WAAWxuJ,OAWlBqtJ,EAAAnuK,UAAA4wK,wBAAV,WACI,MAAO,wBAGDzC,EAAAnuK,UAAA6uK,8BAAV,SAAwCxwC,GAUpC,QATM3E,EAAW55H,KAAK2W,KAAKyK,YAAYzgB,OAAS,EAAIX,KAAK2W,KAAKyK,YAAYuqB,MAAM6tF,WAAax5H,KAAK2W,KAAK0iH,gBACjG23C,EAAgChxK,KAAKixK,wBAAwB1yC,GAC7D7nH,EAASs6J,EAAUt6J,OACnBw6J,EAAet3C,EAASp6E,SAASluC,QAAQoF,GAC3Cu4J,EAAar1C,EAAS51E,oBAAoBktH,GAAelC,EAAc,EAErEmC,EAAaz6J,EAAO0wG,0BAA0B1wG,EAAO/D,UACrDooG,EAAWi2D,EAAUj2D,UAAY,EACjCe,EAASk1D,EAAUl1D,QAAUf,EAAW,EACrCv6G,EAAI,EAAGA,EAAIu6G,EAAUv6G,IAC1ByuK,GAAcx1H,SAAS03H,EAAW3wK,EAAI,GAAI,IAE9CwuK,GAAeC,EACf,IAAK,IAAI/4J,EAAI6kG,EAAU7kG,EAAI4lG,EAAQ5lG,IAC/B84J,GAAgBv1H,SAAS03H,EAAWj7J,EAAI,GAAI,IAEhD,MAAO,CAAC+4J,WAAUA,EAAED,YAAWA,IAGzBX,EAAAnuK,UAAA+wK,wBAAV,SAAkC1yC,GAE9B,OADAA,EAAkBA,EAAkB,EAAI,EAAIA,EACrCv+H,KAAK2W,KAAKsJ,WAAW3I,KAAK,SAAC4I,GAAQ,OAACA,EAAI2lG,cAAgB3lG,EAAI8J,eAAiBu0G,KAGjF8vC,EAAAnuK,UAAAi+H,4BAAP,SAAmC38G,EAAkBQ,GACjD,GAAIhiB,KAAKoxK,iBAAiB5vJ,GACtB,OAAO1H,EAAA5Z,UAAMi+H,4BAA2Bv9H,KAAAZ,KAACwhB,EAAUQ,GAEvD,IAAKlI,EAAA5Z,UAAMi+H,4BAA2Bv9H,KAAAZ,KAACwhB,EAAUQ,GAAsB,OAAO,MACzEq8G,EAAYr+H,KAAK2W,KAAK4iH,iBAAiBv/G,OAAO,SAAAzZ,GAAK,OAAY,IAAZA,EAAEoT,QACtDhR,OAAO3C,KAAK2W,KAAK8K,QAAQ7O,WAAW0E,KAAK,SAAAlW,GAAK,OAAAA,EAAEuS,QAAU6N,IACzDia,EAAahgB,KAAKutB,IAAIhpC,KAAK2W,KAAKuhH,wBAAwB54E,YAAY7jB,WACpE2gG,EAAkBp8H,KAAK2W,KAAK+9G,WAAaj5G,KAAKC,KAAK1b,KAAK2W,KAAK+9G,YAAc,EAC3Eo6C,EAAY9uK,KAAKqxK,2BAA2B7vJ,EAAUQ,GAC5D,UAAKq8G,GAAaA,EAAU/9F,cAAcu7F,UAAYizC,EAAUwC,UAAY71J,KAAKutB,IAAIhpC,KAAKuxK,sBACnFn1C,GAAmBA,EAAkB0yC,EAAU0C,UAAY/1I,IAOtEj8B,OAAAgC,eAAI6sK,EAAAnuK,UAAA,sBAAmB,KAAvB,WACK,OAAOu5C,SAASz5C,KAAK2W,KAAKuhH,wBAAwB94E,GAAG/qC,SAASiiC,eAAexS,QAAQxD,cAAcj9B,MAAMs3B,IAAK,qCAG1G0zI,EAAAnuK,UAAAkxK,iBAAR,SAAyB5vJ,OACfP,EAASjhB,KAAK2W,KAAKiiH,SAASp3G,GAClC,OAAOP,EAAO/J,SAAW+J,EAAO/J,QAAQvW,QAGrC0tK,EAAAnuK,UAAAo+H,4BAAP,SAAmC98G,EAAkBQ,EAA4Bw5D,GAC7E,GAAIx7E,KAAKoxK,iBAAiB5vJ,GACtB,OAAO1H,EAAA5Z,UAAMo+H,4BAA2B19H,KAAAZ,KAACwhB,EAAUQ,EAAoBw5D,OAErE4gD,EAAkBp8H,KAAK2W,KAAK+9G,WAAaj5G,KAAKC,KAAK1b,KAAK2W,KAAK+9G,YAAc,EAC3Ej5F,EAAYhgB,KAAKutB,IAAIhpC,KAAK2W,KAAKuhH,wBAAwB54E,YAAY7jB,WACnEqzI,EAAY9uK,KAAKqxK,2BAA2B7vJ,EAAUQ,GACtDq8G,EAAYr+H,KAAK2W,KAAK4iH,iBAAiBv/G,OAAO,SAAAzZ,GAAK,OAAY,IAAZA,EAAEoT,QACtDhR,OAAO3C,KAAK2W,KAAK8K,QAAQ7O,WAAW0E,KAAK,SAAAlW,GAAK,OAAAA,EAAEuS,QAAU6N,IACzDiwJ,EAAeh2I,EAAYqzI,EAAU4C,UAAarzC,GAChDA,EAAU/9F,cAAcu7F,UAAYizC,EAAUwC,UAAY71J,KAAKutB,IAAIhpC,KAAKuxK,sBAC1E16H,EAAe46H,EAAa3C,EAAU4C,OAASj2J,KAAKutB,IAAIvN,EAAY2gG,EAAkB0yC,EAAU0C,WAEtGxxK,KAAK2W,KAAKuhH,wBAAwB95E,YACjCvZ,KAAK8G,EAAAA,SAAS5G,UAAU,WACrBy2C,MAGAi2F,EACAzxK,KAAK2W,KAAKuhH,wBAAwBh9F,eAAiB2b,EAEnD72C,KAAK2W,KAAKuhH,wBAAwBr1E,aAAahM,IAIhDw3H,EAAAnuK,UAAAmxK,2BAAP,SAAkC7vJ,EAAkB+8G,OAC1CyyC,EAAgChxK,KAAKixK,wBAAwB1yC,GAC7D+yC,GAAaN,EAAU59D,SAAW,GAAMpzG,KAAK2W,KAAK62H,iBAClDkkC,EAAS1xK,KAAK2W,KAAKuhH,wBAAwB96E,WAAW57B,GAAY8vJ,EAExE,MAAO,CAAEI,OAAMA,EAAEF,UADCE,EAAU1xK,KAAK2W,KAAK62H,iBAAmBwjC,EAAUp1D,YACvC01D,UAASA,IAGlCjD,EAAAnuK,UAAAy3H,8BAAP,SACIn2G,EAAkBQ,EAA4Bq4G,EAA4B7+C,GAD9E,IAAA5mE,EAAA5U,UACkD,IAAAq6H,IAAAA,GAAA,OACxCy0C,EAAY9uK,KAAK+uK,8BAA8B/sJ,GAC/C2vJ,EAAU3xK,KAAKqwH,iBAAiB7uG,GACtCxhB,KAAK2W,KAAKwiH,cAAc/6E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACHy2C,EACAA,IAEA5mE,EAAK46J,WAAW56J,EAAK2iH,6BAA6B/1G,EAAUQ,EAAoBq4G,UAGtF92E,EAAcouH,EAAQryH,YAAYhkB,WAAawzI,EAAUG,WACzDjsH,EAAgBvJ,SAASk4H,EAAQpyH,oBAAqB,IACtDiE,EAAaD,EAAaurH,EAAUG,WAAaH,EAAUE,YAAchsH,EAC/E2uH,EAAQz2I,eAAiBsoB,GAGnB6qH,EAAAnuK,UAAAsvK,WAAV,SAAqBoC,OAEXC,EAAyB7xK,KAAK2W,KAAKgoH,MAAMr+F,cAAcpvB,wBACvD4gK,EAAUF,EAAS1gK,wBAAwBypB,IAAMk3I,EAAuBl3I,IACxEo3I,EAAaH,EAAS1gK,wBAAwBspB,OAASq3I,EAAuBr3I,OAEhFs3I,EAAU,GAEV9xK,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC/CxzC,KAAK2W,KAAKuhH,wBAAwB95E,YAC7BvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACP6sI,EAASr+H,MAAM,CAAEC,eAAe,MAExCxzC,KAAK2W,KAAKuhH,wBAAwBr1E,aAAaivH,IACxCC,EAAa,GAEpB/xK,KAAK2W,KAAK2pB,cAAciT,MAAM,CAAEC,eAAe,IAC/CxzC,KAAK2W,KAAKuhH,wBAAwB95E,YAC7BvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACP6sI,EAASr+H,MAAM,CAAEC,eAAe,MAExCxzC,KAAK2W,KAAKuhH,wBAAwBr1E,aAAakvH,IAG/CH,EAASr+H,MAAM,CAAEC,eAAe,KAIjC66H,EAAAnuK,UAAAu9G,cAAP,WACIz9G,KAAKsuK,oBAAsB,KAC3Bx0J,EAAA5Z,UAAMu9G,cAAa78G,KAAAZ,OAGhBquK,EAAAnuK,UAAAq9G,aAAP,WACIv9G,KAAKsuK,oBAAsB,KAC3Bx0J,EAAA5Z,UAAMq9G,aAAY38G,KAAAZ,2BA/hBzBgS,EAAAA,aAiiBDq8J,EAjiBA,CACiDn1C,ICO7C1nF,GAAU,EAwBdwgI,GAAA,SAAAl4J,GAAA,SAAAk4J,IAAA,IAAAp9J,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAoBY4U,EAAAi1B,IAAM,YAAY2H,KAkBhB58B,EAAAq9J,qBAA8C,GAI9Cr9J,EAAAs9J,qBAA8C,GAchDt9J,EAAAu9J,qBAAsB,EACtBv9J,EAAAw9J,iBAAmB,KA4FnBx9J,EAAAwpF,cAAgB,KAmFjBxpF,EAAAy9J,0BAA4B,IAAIlpJ,EAAAA,aA8ChCvU,EAAA09J,6BAA+B,IAAInpJ,EAAAA,aAWnCvU,EAAAi5J,gBAAiB,EASjBj5J,EAAAgC,cAAkC,GAgGlChC,EAAA29J,eAAiB,IAAIppJ,EAAAA,eA+gBhC,OAt4BsCnR,EAAAA,EAAAA,GA+ClCxY,OAAAgC,eAEWwwK,EAAA9xK,UAAA,KAAE,KAFb,WAGI,OAAOF,KAAK6pC,SAEhB,SAAc1nC,GACVnC,KAAK6pC,IAAM1nC,mCAUf3C,OAAAgC,eACWwwK,EAAA9xK,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK6rB,WAGhB,SAAgB1pB,GACZnC,KAAK6rB,MAAQ1pB,GAAS,GACtBnC,KAAK0iB,eAAeC,oBAChB3iB,KAAKg0J,gBACLh0J,KAAKk0J,eAETl0J,KAAK4tC,IAAI+U,gDAUbnjD,OAAAgC,eAAIwwK,EAAA9xK,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKo+F,mBAahB,SAAiBj8F,GACbnC,KAAKo+F,cAAgBj8F,mCAWzB3C,OAAAgC,eAAIwwK,EAAA9xK,UAAA,iBAAc,KAalB,WACI,OAAOF,KAAKk4H,wBAAwB/5E,oBAdxC,SAAmB7rB,GACftyB,KAAKk4H,wBAAwB/5E,eAAiB7rB,EAC9CtyB,KAAK4tC,IAAIrL,iDAeb/iC,OAAAgC,eAAYwwK,EAAA9xK,UAAA,WAAQ,KAApB,WACI,OAAOF,KAAY,yCAWvBR,OAAAgC,eACIwwK,EAAA9xK,UAAA,sBAAmB,KADvB,WAEI,OAAOF,KAAKiyK,0BAoBhB,SAAwB9vK,GAAxB,IAAAyS,EAAA5U,KACI,GAAImC,GAASA,EAAMxB,OAAS,GACxB,MAAMkP,MAAM,gDAEV2iK,EAAwCxyK,KAAKg/G,oBAC7Cu5B,EAAwCp2I,EAc9C,GAbAnC,KAAKiyK,qBAAuB7iK,GAAWjN,GACvCnC,KAAKqyK,0BAA0B9vJ,KAAKviB,KAAKiyK,sBACzCjyK,KAAKiuJ,wBAA0B7+I,GAAWjN,GACtCnC,KAAKyyK,SAAS97J,MAGd3W,KAAK0yK,iBACL1yK,KAAKyyK,SAAS9F,8BACd3sK,KAAKmnB,iBAGLnnB,KAAKwkB,mBAAmBrQ,QAAQtT,MAAMb,KAAKwkB,mBAAoBxkB,KAAKiyK,uBAEnEjyK,KAAKqgH,OAAShzE,KAAKC,UAAUklI,KAAoBnlI,KAAKC,UAAUirG,IAAmBv4I,KAAKigB,WAAY,KAC/F0yJ,EAAoC,GACpCC,EAAsC,GACrBr6B,EAAev+H,OAAO,SAAClC,GAC1C,OAAQ06J,EAAe5lJ,KAAK,SAACjd,GACzB,OAAOmI,EAAIlE,YAAcjE,EAAKiE,cAGvBnB,QAAQ,SAAC+0C,GACpBmrH,EAAYnwK,KAAKoS,EAAK+jH,gBAAgBnxE,EAAK5zC,aAC5C5T,MACsBwyK,EAAex4J,OAAO,SAAClC,GAC5C,OAAQygI,EAAe3rH,KAAK,SAACjd,GACzB,OAAOmI,EAAIlE,YAAcjE,EAAKiE,cAGrBnB,QAAQ,SAAC+0C,GACtBorH,EAAcpwK,KAAKoS,EAAK+jH,gBAAgBnxE,EAAK5zC,aAC9C5T,MACHA,KAAKmnB,oBACC0rJ,EAA2C,CAC7Cr9J,YAAa+iI,EACbu6B,eAAgBH,EAChBl6B,iBAAkBm6B,GAEtB5yK,KAAKuyK,eAAehwJ,KAAKswJ,qCAmBjCrzK,OAAAgC,eACIwwK,EAAA9xK,UAAA,yBAAsB,KAD1B,WAEI,OAAOF,KAAKkyK,0BAmBhB,SAA2B/vK,GACnBA,IAAUnC,KAAKkyK,sBACflyK,KAAKsyK,6BAA6B/vJ,KAAKpgB,GAE3CnC,KAAKkyK,qBAAuB/vK,EACxBnC,KAAK+nB,QAAQpR,MACb3W,KAAK4tC,IAAIrL,iDAsCjB/iC,OAAAgC,eACWwwK,EAAA9xK,UAAA,qBAAkB,KAD7B,WAEI,OAAOF,KAAKmyK,yBAGhB,SAA8BhwK,GAEtBnC,KAAK+yK,eADL5wK,EACsBnC,KAAKurJ,QAAQj0I,KAAKtX,KAAKg/G,qBAAqB7+G,SAE5C,KAEtBH,KAAKigB,YAAcjgB,KAAKg/G,qBACxBh/G,KAAKgzK,wBAAwB7wK,GAGjCnC,KAAKmyK,oBAAsBhwK,mCAa/B3C,OAAAgC,eACIwwK,EAAA9xK,UAAA,kBAAe,KAQnB,WACI,OAAOF,KAAKoyK,kBAAoBpyK,KAAKyhI,gBAAgByP,kCAVzD,SACoB/uI,GAChBnC,KAAKoyK,iBAAmBjwK,EACxBnC,KAAKmnB,iDA+ET3nB,OAAAgC,eAAWwwK,EAAA9xK,UAAA,gBAAa,KAAxB,eACU0V,EAAM,IAAIu0G,EAAAA,UAChB,IAAKnqH,KAAKizK,eACN,OAAOr9J,MAELw8I,EAAQpyJ,KAAKizK,eAAej5J,OAAO,SAACiC,GACtC,OAAoD,OAA7CA,EAAK6nB,QAAQxD,cAAcvD,gBAGtC,OADAnnB,EAAI8vB,MAAM0sH,GACHx8I,mCAYXpW,OAAAgC,eAAIwwK,EAAA9xK,UAAA,qBAAkB,KAAtB,WACI,OAAOF,KAAK00C,yBAAyB,kDAUzCl1C,OAAAgC,eAAIwwK,EAAA9xK,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAKkzK,uBAUhB,SAAqBnhI,GACjB/xC,KAAKkzK,kBAAoBnhI,EACzB/xC,KAAKmnB,iDAWT3nB,OAAAgC,eAAIwwK,EAAA9xK,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKmzK,wBAUhB,SAAsBphI,GAClB/xC,KAAKmzK,mBAAqBphI,EAC1B/xC,KAAKmnB,iDAiBF6qJ,EAAA9xK,UAAAgY,QAAP,SAAejE,GACPjU,KAAKozK,qBAAqBn/J,KAG9BjU,KAAKklB,SAAQ,GACTjR,aAAsBtU,MACtBK,KAAKyyK,SAAS7F,iBAAiB34J,GAE/BjU,KAAKyyK,SAASv6J,QAAQjE,GAE1BjU,KAAKmnB,eAAc,KAahB6qJ,EAAA9xK,UAAAmzK,cAAP,SAAqBrzJ,GACjBhgB,KAAKyyK,SAASrsJ,cAAcpG,GAC5BhgB,KAAKmnB,eAAc,IAWhB6qJ,EAAA9xK,UAAA63H,gBAAP,SAAuBhhH,OACbxI,EAA6BvO,KAAKszK,qBAAqBv8J,GAC7D,OAAOxI,EAAQA,EAAMgJ,SAAWvX,KAAK6tK,gBAWlCmE,EAAA9xK,UAAAk4H,YAAP,SAAmBnhH,GACfjX,KAAKuzK,aAAat8J,GAClBjX,KAAKmnB,iBAWF6qJ,EAAA9xK,UAAAszK,iBAAP,SAAwBv8J,GACpBjX,KAAKyzK,kBAAkBx8J,GACvBjX,KAAKmnB,iBAMF6qJ,EAAA9xK,UAAAq7H,gBAAP,SAAuBt6G,GAEnB,OAAOA,EAAO/J,SAAW+J,EAAO/J,QAAQvW,QAUrCqxK,EAAA9xK,UAAAwzK,mBAAP,WACI1zK,KAAKktK,uBAAyB,GAC9BltK,KAAK6tK,gBAAkB7tK,KAAK6tK,eAC5B7tK,KAAKmnB,iBAUT3nB,OAAAgC,eAAIwwK,EAAA9xK,UAAA,sBAAmB,KAAvB,WACI,OAAOF,KAAKigB,WAAW2M,KAAK,SAAC1M,GAAQ,OAAAA,EAAIyiG,YAAcziG,EAAIulG,+CAGvDusD,EAAA9xK,UAAA8yK,wBAAR,SAAgC7wK,GAAhC,IAAAyS,EAAA5U,KACQA,KAAKigB,WAAWtf,OAAS,IAAMX,KAAK+yG,kBACpC/yG,KAAKg/G,oBAAoBvsG,QAAQ,SAAC0D,GAClBvB,EAAK+jH,gBAAgBxiH,EAAKvC,WAClCiW,OAAS1nB,KAYzB3C,OAAAgC,eAAWwwK,EAAA9xK,UAAA,kBAAe,KAA1B,WACI,OAAQF,KAAKmvH,eAAiBnvH,KAAKmvH,cAAcxM,YAC5C3iH,KAAKiuJ,wBAAwBttJ,wCAM5BqxK,EAAA9xK,UAAAozK,qBAAV,SAA+Br8J,GAC3B,OAAOjX,KAAKyyK,SAASlF,+BAA+Bt2J,IAM9C+6J,EAAA9xK,UAAAqzK,aAAV,SAAuBt8J,GACnBjX,KAAKyyK,SAAS9E,qBAAqB12J,IAM7B+6J,EAAA9xK,UAAAuzK,kBAAV,SAA4Bx8J,GACxBjX,KAAKyyK,SAAS3E,2BAA2B72J,IAMnC+6J,EAAA9xK,UAAAwyK,eAAV,WACI1yK,KAAKyyK,SAAS/tJ,cAAc1kB,KAAKiyK,uBAM9BD,EAAA9xK,UAAAymI,gBAAP,SAAuB/yH,GACnB,QAAO5T,KAAKg/G,oBAAoB1nG,KAAK,SAAAs+G,GAAO,OAAAA,EAAIhiH,YAAcA,KAM3Do+J,EAAA9xK,UAAAq3B,WAAP,SAAkBjW,EAASE,GACvB,MAAO,CACHo8B,UAAWt8B,EACX3N,MAAO6N,EACPqhJ,WAAY7iK,KAAKu7H,gBAAgBj6G,GAAW,WAAathB,KAAKy6H,aAAan5G,GAAW,aAAe,YAO7G9hB,OAAAgC,eAAWwwK,EAAA9xK,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKqgB,cAA6C,IAA7BrgB,KAAKqgB,aAAa1f,OAChCX,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK4zK,2BAG9D5zK,KAAK6pI,WAAe7pI,KAAKwU,MAA4B,IAApBxU,KAAK24J,WAIlB,IAApB34J,KAAK24J,WACE34J,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK6zK,8BADlE,EAHW7zK,KAAK8zK,oBAAsB9zK,KAAK8zK,oBAAsB9zK,KAAK+zK,4DAWnE/B,EAAA9xK,UAAAsvI,cAAP,SAAqBl9H,GACjBtS,KAAKqzK,cAAc/gK,EAAMgpD,MAAM3tD,KAM5BqkK,EAAA9xK,UAAA8zK,kBAAP,SAAyB1hK,GAErB,QADM2hK,EAAc,cACXzzK,OACC2V,EAAOa,EAAKgoG,oBAAoBhlG,OAAO,SAACiC,GAC1C,OAAOA,EAAKrI,YAActB,EAAMinF,WAAW/4F,GAAGmN,KAC/C,GAEH,IAAKqJ,EAAK2hH,gBAAgBxiH,EAAKvC,WAAW+uG,+BAI1CsxD,EAAYzxK,KAAK2T,WATZ3V,EAAI,EAAGA,EAAI8R,EAAMinF,WAAW54F,OAAQH,IAAG,SAAvCA,wCAWTR,KAAKktK,uBAAyB,GAC9BltK,KAAKiuJ,wBAA0BgmB,EAE3B3hK,EAAM+oD,yBAAyB64G,gBAE/Bl0K,KAAKg/G,oBAAsBh/G,KAAKiuJ,yBAEpCjuJ,KAAKmnB,iBAMF6qJ,EAAA9xK,UAAAi0K,iBAAP,WACIn0K,KAAKg/G,oBAAsBh/G,KAAKiuJ,wBAChCjuJ,KAAKmnB,iBAMF6qJ,EAAA9xK,UAAAmvI,cAAP,SAAqB/8H,OAEX8hK,EADcp0K,KAAKwkB,mBACMlN,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAActB,EAAMgpD,MAAM3tD,KAC7EymK,EAAW3/J,IAAM,EAAI2/J,EAAW3/J,IAChCzU,KAAKuU,KAAK6/J,GACVp0K,KAAKmnB,iBAMF6qJ,EAAA9xK,UAAAy3F,cAAP,SAAqBrlF,GACjB,GAAgC,MAA5BA,EAAM+oD,cAAcp6D,KAA2C,aAA5BqR,EAAM+oD,cAAcp6D,KAAkD,UAA5BqR,EAAM+oD,cAAcp6D,IAAiB,KAE5GmzK,EADcp0K,KAAKwkB,mBACMlN,KAAK,SAACnB,GAAS,OAAAA,EAAKvC,YAActB,EAAMgpD,MAAM3tD,KAC7EymK,EAAW3/J,IAAM,EAAI2/J,EAAW3/J,IAChCzU,KAAKuU,KAAK6/J,GACVp0K,KAAKmnB,kBAOb3nB,OAAAgC,eAAcwwK,EAAA9xK,UAAA,0BAAuB,KAArC,eACU64J,EAAW/4J,KAAKm+C,gBAAkBn+C,KAAK24J,WAC7C,OAAO34J,KAAKoX,kBAAoBqE,KAAKwtB,IAAIjpC,KAAKgwJ,2BAC1ChwJ,KAAKmlB,OAAS1J,KAAKwtB,IAAI8vH,EAAU/4J,KAAKsnB,SAAWyxI,oCAM/CiZ,EAAA9xK,UAAAk5J,mBAAV,WACI,OAAOp5J,KAAKq0K,UAAYr0K,KAAKq0K,UAAU/zI,cAAcwZ,aAAe,GAQjEk4H,EAAA9xK,UAAA41J,uBAAP,eACQ7kJ,EAAQ6I,EAAA5Z,UAAM41J,uBAAsBl1J,KAAAZ,MAMxC,OAJIA,KAAKg/G,oBAAoBr+G,QAAUX,KAAKs0K,uBACxCrjK,GAASjR,KAAKs0K,qBAAqBh0I,cAAc84F,aAG9CnoH,GAMD+gK,EAAA9xK,UAAAmjD,SAAV,SAAmBhiC,EAAmBO,GAClC,GAAI5hB,KAAKg/G,qBAAuBh/G,KAAKg/G,oBAAoBr+G,QAClC,iBAAhB,EAA0B,KACvB6gB,EAAWxhB,KAAKu0K,eAAejjK,QAAQ+P,GACvCmzJ,EAAgBx0K,KAAKy0K,iBAAiBjzJ,GACxCgzJ,GACAx0K,KAAKyzK,kBAAkBe,GAI/B16J,EAAA5Z,UAAMmjD,SAAQziD,KAAAZ,KAACqhB,EAAKO,EAAQ5hB,KAAK00K,qBAMrCl1K,OAAAgC,eAAWwwK,EAAA9xK,UAAA,2BAAwB,KAAnC,WACI,OAAIF,KAAK20K,iBACE30K,KAAK20K,iBAEL30K,KAAK40K,yDAOb5C,EAAA9xK,UAAA20K,oBAAP,SAA2B5gK,OACjB2N,EAAS5hB,KAAK24H,gBAAgB1kH,EAAWL,WAC/C,OAAQgO,GAAUA,EAAO+H,QAAW1V,EAAWL,WAKnDpU,OAAAgC,eAAWwwK,EAAA9xK,UAAA,eAAY,KAAvB,WACI,OAAIF,KAAK6tK,eACE7tK,KAAK+sJ,+BAAiC/sJ,KAAK80K,wBAE3C90K,KAAKgtJ,iCAAmChtJ,KAAK+0K,0DAOrD/C,EAAA9xK,UAAA80K,mBAAP,SAA0BphK,OAChBgO,EAAS5hB,KAAK24H,gBAAgB/kH,GACpC,OAAOgO,GAAUA,EAAO+gG,WAMrBqvD,EAAA9xK,UAAAq4D,mBAAP,WACIz+C,EAAA5Z,UAAMq4D,mBAAkB33D,KAAAZ,MACpBA,KAAKg+H,gBAAkBh+H,KAAK+yG,mBAC5B/yG,KAAKi+H,WAAaC,GAAW7kB,kBAE7Br5G,KAAKi1K,gBACLj1K,KAAKkzK,kBAAoBlzK,KAAKi1K,cAAcljI,UAG5C/xC,KAAKk1K,oBAAsBl1K,KAAKigB,YAAcjgB,KAAKg/G,qBACnDh/G,KAAKgzK,wBAAwBhzK,KAAKk1K,oBAEtCl1K,KAAKm1K,2BAGFnD,EAAA9xK,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACI8Z,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,MACdA,KAAKuyK,eAAe1tI,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAAC/2B,GAC1D4G,EAAKsQ,SAAQ,GACbtQ,EAAK8N,eAAeu1H,mBAAmBjqI,MAIxCgkK,EAAA9xK,UAAA0yC,UAAP,WAAA,IAAAh+B,EAAA5U,KACI,GAAIA,KAAK+yK,gBAAkB/yK,KAAKigB,aAAejgB,KAAK+yG,iBAAkB,KAC5D9wD,EAAUjiD,KAAK+yK,eAAevwH,KAAKxiD,KAAKg/G,qBAC1C/8D,GAAWjiD,KAAKigB,WAAWtf,OAAS,IACpCshD,EAAQg3C,iBAAiB,SAAC9/E,GACVvE,EAAK+jH,gBAAgBx/G,EAAI8C,KAAKrI,WACtCiW,QAAS,IAEjBo4B,EAAQ6H,mBAAmB,SAAC3wC,GACZvE,EAAK+jH,gBAAgBx/G,EAAI8C,KAAKrI,WACtCiW,QAAS,KAIzB/P,EAAA5Z,UAAM0yC,UAAShyC,KAAAZ,OAMnBgyK,EAAA9xK,UAAAy+J,gBAAA,SAAgBZ,EAAoB7oH,GAChC,QADY,IAAA6oH,IAAAA,GAAA,QAAoB,IAAA7oH,IAAAA,GAAA,GAC5Bl1C,KAAKg/G,oBAAoBr+G,OAAQ,KAC3By0K,EAAS,GAYf,OADAp1K,KAAK44H,SAASnmH,QATE,SAACwO,GACTA,EAAOhN,YAAcgN,EAAOmoC,UAC5BgsH,EAAO5yK,KAAK,MAGhB4yK,EAAO5yK,KAAKye,KAKTjhB,KAAK89J,yBAAyBsX,EAAQrX,EAAY7oH,GAEzD,OAAOp7B,EAAA5Z,UAAMy+J,gBAAe/9J,KAAAZ,KAAC+9J,EAAY7oH,IAIzC88H,EAAA9xK,UAAAi1K,wBAAR,WACQn1K,KAAK+yG,mBACL/yG,KAAKozF,WAAa,IAAIi7E,GACtBruK,KAAKozF,WAAWz8E,KAAO3W,OAIvBgyK,EAAA9xK,UAAAkzK,qBAAR,SAA6Bn/J,WACzB,GAAIA,aAAsBtU,MAAO,KAC7B,IAA+B,IAAA01K,EAAAtlK,EAAAkE,GAAUqhK,EAAAD,EAAAnzK,QAAAozK,EAAAlzK,KAAAkzK,EAAAD,EAAAnzK,OAAE,CACvC,IADuBozK,EAAAnzK,MACDyR,UAClB,OAAO,uGAGf,OAAO,EAEX,OAAQK,EAAWL,+BAt5B1Bk+B,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBvmF,UAAW,CACP+pH,GACAyd,GACA/kC,GACAf,GACA,CAAE1kD,QAASxsC,GAAoB+qE,SAAU+hF,IACzC,CAAEtgH,QAASm/F,GAAsBl/F,YAAaG,EAAAA,WAAW,WAAM,OAAAylH,KAC/DnzC,GACAjU,GACAjuE,GACAW,GACAujE,IAEJnyG,SAAU,WACVqjC,SAAA,sodAiDC5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAeAA,EAAAA,mCA4EAA,EAAAA,yCAyEAgd,EAAAA,uCAYAhd,EAAAA,4CAkCAgd,EAAAA,+BAWAhd,EAAAA,kCAoBAA,EAAAA,+BA4BAA,EAAAA,gCA8BAA,EAAAA,8BA2BAgd,EAAAA,8BAMA0gC,EAAAA,aAAYr+C,KAAA,CAAC07I,GAAgC,CAAEhzG,KAAMgzG,GAAgC/yG,UAAQ,4BAG7FinC,EAAAA,aAAY5vE,KAAA,CAAC4pH,GAA4B,CAAElhF,KAAMkhF,sCAMjDnhF,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,uBAyB1DF,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE2oC,UAAQ,OAwetCq7H,EAz5BA,CAmBsC1mB,ICvDtCiqB,GAAA,WAOI,SAAAA,EAAYxtJ,GACR/nB,KAAK+nB,QAAO,EAgBpB,OAbWwtJ,EAAAr1K,UAAAsE,UAAP,SAAiBoY,EAAmBpH,EAAmC7H,EAAYwa,OAE3E3X,EADEmG,EAAO3W,KAAK+nB,QAAQpR,KAU1B,OAJInG,EAHCgF,EAAY7U,OAGJ6Z,GAASjG,KAAKnF,GAAWwN,GAAapH,GAFtCoH,EAIbjG,EAAK0gG,mBAAqB7mG,EAEnBA,uBAtBdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,WACN4I,MAAM,+CATDjJ,MA+BT41J,EAxBA,GA6BAC,GAAA,WAOI,SAAAA,EAAYztJ,GACR/nB,KAAK+nB,QAAO,EA8BpB,OA3BWytJ,EAAAt1K,UAAAsE,UAAP,SAAiBoY,EAAmB3I,EAChC6C,EAAwDU,EACxD7J,EAAYiJ,EAAsBuR,OAK9B3X,EAHEjC,EAAQ,CAAEiH,YAAa,GAAIsB,UAAW,GAAIU,gBAAeA,GACzDb,EAAyB3W,KAAK+nB,QAAQpR,KAC5CpI,EAAMiH,YAAcmB,EAAKqoG,wBAEnBnoG,EAA6B,CAAErC,KAAM,GAAI5S,SAAU,IAiBzD,OAfK2M,EAAMiH,YAAY7U,QAQnB4N,EAAMuI,UAAYH,EAAKu2J,uBACvB3+J,EAAMiJ,gBAAkBb,EAAKk3J,eAC7Br9J,EAASgK,GAASzD,MAAM3H,GAAWwN,GAAarO,EAAOoI,EAAMC,EAAeC,KAR5ED,EAAcsE,OAAO,EAAGtE,EAAcjW,QACtC6P,EAAS,CACLgE,KAAMoI,EACNhb,SAAUgb,IAOlBjG,EAAK+9J,mBAAqBlkK,EAAOgE,KACjCmC,EAAK49J,eAAiB19J,EAAWrC,KACjCmC,EAAK89J,iBAAmB59J,EAAWjV,SAC5B4O,uBApCdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,cACN4I,MAAM,+CAtCDjJ,MA0ET61J,EAtCA,GA2CAC,GAAA,WAMI,SAAAA,EAAoB1tJ,GAAA/nB,KAAA+nB,QAAAA,EAwBxB,OAtBW0tJ,EAAAv1K,UAAAsE,UAAP,SAAiBoY,EAA4BzB,EAAUmM,EAAc3Z,EAAYwa,GAE7E,QAFyC,IAAAhN,IAAAA,EAAA,QAAU,IAAAmM,IAAAA,EAAA,KAE9CtnB,KAAK+nB,QAAQpR,KAAKwO,OACnB,OAAOvI,MAGLrO,EAAQ,CACVoF,MAAOwH,EACPC,eAAgBkM,GAEpB9M,GAASmB,mBAAmBpN,EAAOqO,EAAWpI,KAAK7T,YAE7C6P,EAAS,CACXgE,KAAMgG,GAASW,KAAK/L,GAAWwN,EAAWpI,MAAOjG,GACjD3M,SAAU4Y,GAASW,KAAK/L,GAAWwN,EAAWhb,UAAW2M,IAM7D,OAJIvO,KAAK+nB,QAAQpR,KAAKwE,OAAS5M,EAAMoF,QACjC3T,KAAK+nB,QAAQpR,KAAKwE,KAAO5M,EAAMoF,OAEnC3T,KAAK+nB,QAAQpR,KAAKy/I,YAAc7nJ,EACzBiC,uBA5BdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,aACN4I,MAAM,+CAjFDjJ,MA6GT81J,EA9BA,GAmCAC,GAAA,WAMI,SAAAA,EAAoB3tJ,GAAA/nB,KAAA+nB,QAAAA,EAoBxB,OAlBW2tJ,EAAAx1K,UAAAsE,UAAP,SAAiBoY,EAAmB5D,EAChCiP,EACAhO,EAAoDtM,EAAYwa,EAAqBC,OAC/EzR,EAAO3W,KAAK+nB,QAAQpR,KACpBpI,EAAQ,CACVyK,gBAAiBA,EACjBxC,SAAUyR,EACVhO,wBAAyBA,GAG7B,GAAIxB,GAAyBG,MAAMrK,EAAMyK,kBAAoBP,GAAyBG,MAAMrK,EAAM0L,yBAC9F,OAAO2C,MAGLpM,EAASgK,GAASR,OAAO5K,GAAWwN,GAAarO,GAEvD,OADAoI,EAAK0J,aAAe7P,EACbA,uBAxBdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,gBACN4I,MAAM,+CApHDjJ,MA4IT+1J,EA1BA,kBC5GI,SAAAC,EACW5tJ,EACAlH,EACAgC,EACAihB,EACA8J,GALX,IAAAh5B,EAOQkF,EAAAlZ,KAAAZ,KAAM+nB,EAASlH,EAAagC,EAAkBihB,EAAS8J,IAAI5tC,YANxD4U,EAAAmT,QAAAA,EACAnT,EAAAiM,YAAAA,EACAjM,EAAAiO,iBAAAA,EACAjO,EAAAkvB,QAAAA,EACAlvB,EAAAg5B,IAAAA,IASf,OAjByC51B,EAAAA,EAAAA,GAarCxY,OAAAgC,eACIm0K,EAAAz1K,UAAA,mBAAgB,KADpB,WAEI,OAAOF,KAAK2W,KAAKo8F,sEAtBxBjhE,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,eACVqjC,SAAA,qlOACA5iC,UAAW,CAAC,CAAEg9C,QAASuyD,GAAiBtyD,YAAaG,EAAAA,WAAW,WAAM,OAAAopH,mDARjEh2J,UACyBkxF,UAAzBe,UAJgDtuE,EAAAA,kBAAY2L,EAAAA,+DA0BhEE,EAAAA,YAAWnhC,KAAA,CAAC,8BAIjB2nK,GAjByCj3D,ICGzCk3D,GAAA,WAOI,SAAAA,EAAY7tJ,GACR/nB,KAAK+nB,QAAO,EAsHpB,OAnHW6tJ,EAAA11K,UAAAsE,UAAP,SAAiBoY,EACbg7H,EACA6gB,EACAod,EACAloK,EAAYwa,EAAqB2tJ,GAEjC,OAAKl5J,EAAWpI,MAASojI,GAAc6gB,IAA2BrI,GAA2B92C,cAItFt5G,KAAK+1K,eAAepoK,EAAIiP,EAAYi5J,GAHhCj5J,EAAWpI,MAMlBohK,EAAA11K,UAAA61K,eAAR,SAAuBC,EAAgBp5J,EAA4Bi5J,SACzDI,EAAqB,GACrBC,EAAe,IAAI5lK,IACnBqG,EAAyB3W,KAAK+nB,QAAQpR,KACtCw/J,EAAmBx/J,EAAK+L,eAAeg1H,uBAE7C,GAAI96H,EAAWhb,SAASjB,SAAWgW,EAAK4kH,gBAAgB3+G,EAAWpI,KAAK,KACpEmC,EAAK4kH,gBAAgB3+G,EAAWhb,SAAS,KAAOi0K,IAAoB3lB,GAAoB11H,OAAQ,KAC1FrjB,EAA8C,GAEpD,IADAA,EAAO3U,KAAKoa,EAAWhb,SAAS,IACzBuV,EAAOA,EAAOxW,OAAS,GAAGuT,aAC7BiD,EAAO3U,KAAK2U,EAAOA,EAAOxW,OAAS,GAAGuT,aAE1CiD,EAAOtC,UACPsC,EAAO1E,QAAQ,SAAA2jK,GAAK,OAAAA,EAAElsJ,MAAO,KAC7Bhc,EAAA0O,EAAWpI,MAAK0G,OAAMra,MAAAqN,EAAAxL,EAAA,CAAC,EAAG,GAAMyU,IAEpC,IAAK,IAAI3W,EAAI,EAAGA,EAAIoc,EAAWpI,KAAK7T,OAAQH,IAAK,KACvCygB,EAASrE,EAAWpI,KAAKhU,GAC3B61K,GAAU,EACVnI,OAAQ,EACRsG,EAAgC,KAapC,GAZI79J,EAAK4kH,gBAAgBt6G,IACrBo1J,IAAYp1J,EAAOiJ,KACnBjJ,EAAOiJ,KAAO,KACdsqJ,EAAa,EACbtG,EAAWluK,KAAK+nB,QAAQkmJ,sBAAsBuG,IAE9CtG,EAAWluK,KAAK+nB,QAAQR,WAAWtG,GAElCo1J,GACDJ,EAAmBzzK,KAAKye,GAGxB40J,IAAoB3lB,GAAoB11H,QAAU07I,EAAahlI,IAAIg9H,GAGnE,QAFMoI,EAAeJ,EAAapoK,IAAIogK,GAE7Bh4J,EAAI,EAAGA,EAAIogK,EAAa31K,OAAQuV,IAAK,KACpCqgK,EAAcD,EAAapgK,GAC3BsgK,EAAgBx2K,KAAK+nB,QAAQkmJ,sBAAsBsI,GACnDr/J,EAAUlX,KAAKy2K,oBAAoB9/J,EAAM4/J,EAAYr/J,QAAQW,SAE7D6+J,EAAgC,CAClCttH,UAFczyC,EAAK+L,eAAeq1H,mBAAmBy+B,EAAet/J,GAGpEmT,IAAK8rJ,GAETF,EAAmBzzK,KAAKk0K,GAIhC,GAAsB,OAAlBlC,GAA2B79J,EAAKohH,gBAAgBy8C,GAIpD,GAAIqB,IAAoB3lB,GAAoBv1H,IAAK,CACvCzjB,EAAUlX,KAAKy2K,oBAAoB9/J,EAAM69J,EAAct9J,QAAQW,SAE/D6+J,EAAgC,CAClCttH,UAFczyC,EAAK+L,eAAeq1H,mBAAmBm2B,EAAUh3J,GAG/DmT,IAAK8rJ,GAETF,EAAmBzzK,KAAKk0K,QACrB,GAAIb,IAAoB3lB,GAAoB11H,OAAQ,CAGvD,QAFIm8I,EAAYnC,EAETmC,EAAUx/J,QAAUw/J,EAAUx/J,OAAOxW,OAAS,GAAKgW,EAAKohH,gBAAgB4+C,IAC3EA,EAAYA,EAAUx/J,OAAOw/J,EAAUx/J,OAAOxW,OAAS,OAGvDi2K,OAAW,EAEXA,EADAjgK,EAAKohH,gBAAgB4+C,GACP32K,KAAK+nB,QAAQR,WAAWovJ,EAAUz/J,QAAQy/J,EAAUz/J,QAAQvW,OAAS,IAErEX,KAAK+nB,QAAQkmJ,sBAAsB0I,IAGjDL,EAAeJ,EAAapoK,IAAI8oK,MAEhCN,EAAe,GACfJ,EAAaxtJ,IAAIkuJ,EAAaN,IAElCA,EAAaniK,QAAQqgK,IAI7B,OAAOyB,GAGHL,EAAA11K,UAAAu2K,oBAAR,SAA4B9/J,EAAMnC,GAC9B,OAAKmC,EAAKmF,aAAawE,SAGH3J,EAAKmF,aAAa0E,oBAAoBxG,OAAO,SAAA1Z,GAAK,MAAW,WAAXA,EAAE4R,OAAmBoK,IAAI,SAAAhc,GAAK,OAAAA,EAAEqN,KAC1F8E,QAAQ,SAAAsI,OAEVpH,GADWgD,EAAKoF,WAAavH,EAAK8H,IAAI,SAAAnD,GAAO,OAAAA,EAAIxC,EAAKoF,cAAevH,GACpDlD,QAAQyJ,IAChB,IAAXpH,GACAa,EAAK0G,OAAOvH,EAAO,KAGpBa,GAVIA,uBAlHlBmU,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,cACN4I,MAAM,+CAhBDjJ,MA4ITi2J,EA9HA,GCaAiB,GAAA,WAAA,SAAAA,KAiDA,OALgBA,EAAAh/F,QAAd,WACE,MAAO,CACHC,SAAU++F,wBA9CjB7nK,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZ+iK,GACA2D,GACA/9C,GACA8xB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAyrB,GACAC,GACAF,GACAG,GACAE,IAEF1mK,QAAS,CACP8iK,GACAp6C,GACA+9C,GACAjsB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAyiB,GACAgJ,GACAC,GACAF,GACAG,GACAE,IAEFn5H,QAAS,CACPC,EAAAA,aACAo1C,EAAAA,YACAkI,GACAwyE,GACAtF,QAKFj0H,EAAAA,CADCtV,GAAgB,+KAMnBk5I,EAjDA,kBCpBA,SAAAC,mDAoRA,OApR2C9+J,EAAAA,EAAAA,GAChC8+J,EAAA52K,UAAAwgB,aAAP,SAAoB5E,OACVnF,EAAO3W,KAAK2W,KACZnC,EAAOsH,EAAenF,EAAK6P,+BAAiC7P,EAAKogK,SACvE,OAAOviK,GAAc,IAGlBsiK,EAAA52K,UAAAkgB,iBAAP,eACUzJ,EAAO3W,KAAK2W,KACZnC,EAAOmC,EAAKqgK,qBAAqBh9J,OAAO,SAAAqH,GAAO,OAAAA,EAAIrG,sBAAwBhH,YAAyC,IAA5BqN,EAAIrG,sBAC7FsB,IAAI,SAAAnD,GAAO,OAAAA,EAAI3E,OAChBmC,EAAKmF,aAAawE,SACE3J,EAAKmF,aAAa0E,oBAAoBxG,OAAO,SAAA1Z,GAAK,OAAAA,EAAE4R,OAASkK,GAAgBjC,SAAQmC,IAAI,SAAAhc,GAAK,OAAAA,EAAEqN,KACxG8E,QAAQ,SAAAsI,OAEVpH,GADWgD,EAAKoF,WAAavH,EAAK8H,IAAI,SAAAnD,GAAO,OAAAA,EAAIxC,EAAKoF,cAAevH,GACpDlD,QAAQyJ,IAChB,IAAXpH,GACAa,EAAK0G,OAAOvH,EAAO,KAI/B,OAAOa,GAGJsiK,EAAA52K,UAAA+2K,WAAP,SAAkBl8J,OACRpE,EAAO3W,KAAK2W,KACZ6R,EAAiB7R,EAAK4R,gBAC5BC,EAAeE,IAAI3N,GAAO,GAC1BpE,EAAK4R,gBAAkBC,EACnB7R,EAAKwM,aACLxM,EAAKuO,SAAQ,IAId4xJ,EAAA52K,UAAAg3K,aAAP,SAAoBn8J,OACVpE,EAAO3W,KAAK2W,KACZ6R,EAAiB7R,EAAK4R,gBAC5BC,EAAeE,IAAI3N,GAAO,GAC1BpE,EAAK4R,gBAAkBC,EACnB7R,EAAKwM,aACLxM,EAAKuO,SAAQ,IAId4xJ,EAAA52K,UAAAi3K,qBAAP,SAA4Bp8J,OAClBpE,EAAO3W,KAAK2W,KACZ6R,EAAiB7R,EAAK4R,gBACtB6uJ,EAAazgK,EAAKO,QAAQpJ,IAAIiN,GAEpC,GAAIq8J,EAAY,KACNC,EAAar3K,KAAKs3K,wBAAwBF,GAChD5uJ,EAAeE,IAAI3N,GAAQs8J,GAC3B1gK,EAAK4R,gBAAkBC,EAEvB7R,EAAKwM,aACLxM,EAAKuO,SAAQ,IAKd4xJ,EAAA52K,UAAA+8G,6BAAP,SAAoC57F,EAAsB9J,EAAmBjF,EAAe0P,GAA5F,IAAApN,EAAA5U,KACU2W,EAAO3W,KAAK2W,KAElB,GAAI0K,EAAI9J,WAAaA,IACd8J,EAAI1O,UAAa0O,EAAI1O,SAAShS,QAAagW,EAAK4gK,wBAClD5gK,EAAK6gK,gBAAmBn2J,EAAI7M,KAAKmC,EAAK6gK,kBAF3C,KAMMxpK,EAA4B,CAC9B+M,MAAOsG,EAAItG,MACXxD,SAAUA,EACVjF,MAAOA,EACP8P,QAAQ,GAIZ,GAFAzL,EAAK8gK,YAAYl1J,KAAKvU,IAElBA,EAAKoU,OAAT,KAIMoG,EAAiB7R,EAAK4R,gBAC5BC,EAAeE,IAAIrH,EAAItG,MAAOxD,GAC9BZ,EAAK4R,gBAAkBC,EAEnB7R,EAAKwM,aACLxM,EAAKuO,SAAQ,GAIjBq3B,sBAAsB,eACZ7pC,EAAKkC,EAAK+B,KAAKkM,iBAAiB6tE,cACtC,GAAIh+E,EAAI,KACEsO,EAAOpM,EAAKmN,0BAA0BrP,EAAG2O,IAAK3O,EAAGkP,QACnDZ,GACAA,EAAKsf,cAAciT,cAM5BujI,EAAA52K,UAAAw3K,sBAAP,SAA6Bz2J,GAIzB,QAHMtK,EAAO3W,KAAK2W,KACZ6R,EAAiB7R,EAAK4R,gBAErBtH,EAAOvK,QAAQ,CAClBuK,EAASA,EAAOvK,OACC1W,KAAKs3K,wBAAwBr2J,IAG1CuH,EAAeE,IAAIzH,EAAOlG,OAAO,GAGzCpE,EAAK4R,gBAAkBC,EAEnB7R,EAAKwM,aACLxM,EAAKuO,SAAQ,IAId4xJ,EAAA52K,UAAAo3K,wBAAP,SAA+Br2J,OACrBtK,EAAO3W,KAAK2W,KAEZY,EADSZ,EAAK4R,gBACIza,IAAImT,EAAOlG,OAEnC,OAAIxD,IAAavD,UACNuD,EAEA0J,EAAOtO,UAAYsO,EAAOtO,SAAShS,QAAUsgB,EAAOvN,MAAQiD,EAAKghK,gBAItEb,EAAA52K,UAAAmkB,oBAAV,SAA8BliB,EAAY4Y,EAAYpH,OAC5CgD,EAAO3W,KAAK2W,KAClB,GAAIA,EAAKoF,YAAcpF,EAAKihK,WACxB99J,EAAA5Z,UAAMmkB,oBAAmBzjB,KAAAZ,KAACmC,EAAO4Y,EAAOpH,OACrC,KACGsN,EAAStK,EAAKO,QAAQpJ,IAAIiN,GAC1B88J,EAAY52J,EAAOvK,OAASuK,EAAOvK,OAAOlC,KAAKmC,EAAK6F,cAAgB7F,EAAKnC,KAC/Eb,EAAQgD,EAAKoF,WAAa87J,EAAUv7J,IAAI,SAAAnb,GAAK,OAAAA,EAAEwV,EAAKoF,cAAazK,QAAQyJ,GACrE88J,EAAUvmK,QAAQyJ,GACtB88J,EAAUlkK,GAASxR,IAIpB20K,EAAA52K,UAAAmmB,0BAAP,SAAiCzE,GAC7B,OAAOA,EAAOzE,WAAaC,GAAS9C,QAAkC,IAAxBsH,EAAOoI,cAGlD8sJ,EAAA52K,UAAA6mB,cAAP,SAAqBhM,OACX+8J,EAAW93K,KAAK2W,KAChBohK,EACND,EAAS/7J,YACT+7J,EAASF,YACTE,EAASE,iBACTF,EAASh8J,aAAawE,QAElBy3J,GACAD,EAASh8J,aAAa0vB,eAG1B1xB,EAAA5Z,UAAM6mB,cAAanmB,KAAAZ,KAAC+a,GAEhBg9J,GACAD,EAASh8J,aAAaqI,YAAW,IAIlC2yJ,EAAA52K,UAAA2mB,kBAAP,SAAyB9L,EAAYpH,OAC3BmkK,EAAW93K,KAAK2W,KAChBsK,EAAS62J,EAAS5gK,QAAQpJ,IAAIiN,GAEpC,GAAI+8J,EAAS/7J,YAAc+7J,EAASF,YAMhC,GALAjkK,EAAQmkK,EAAS/7J,WACb+7J,EAAStjK,KAAK8H,IAAI,SAAAnb,GAAK,OAAAA,EAAE22K,EAAS/7J,cAAazK,QAAQyJ,GACvD+8J,EAAStjK,KAAKlD,QAAQyJ,GAC1BjB,EAAA5Z,UAAM2mB,kBAAiBjmB,KAAAZ,KAAC+a,EAAOpH,GAE3BmkK,EAASE,iBACL/2J,GAAUA,EAAOtO,UAAYsO,EAAOtO,SAAShS,OAAS,EACtD,IAAK,IAAIH,EAAI,EAAGA,EAAIygB,EAAOtO,SAAShS,OAAQH,IAAK,KACvCwiC,EAAQ/hB,EAAOtO,SAASnS,GAC9BsZ,EAAA5Z,UAAM6mB,cAAanmB,KAAAZ,KAACgjC,EAAMjoB,YAInC,KACG6B,EAAaqE,EAAOvK,OAASuK,EAAOvK,OAAOlC,KAAKsjK,EAASt7J,cAAgBs7J,EAAStjK,KACxFb,EAAQmkK,EAAS/7J,WACba,EAAWN,IAAI,SAAAnb,GAAK,OAAAA,EAAE22K,EAAS/7J,cAAazK,QAAQyJ,GACpD6B,EAAWtL,QAAQyJ,OAEjBk9J,EAAmB,GAMzB,GALAj4K,KAAKk4K,sBAAsBj3J,EAAQg3J,GAC/BA,EAAiBt3K,OAAS,GAC1Bm3K,EAAS1a,aAAa6a,GAGtBH,EAASh8J,aAAawE,QAAS,KACzB7D,EAAOq7J,EAASK,gBAAgBp9J,GACtC+8J,EAASh8J,aAAapO,IAAI,CACtBC,GAAIoN,EACJ7I,KAAMkK,GAAgBjC,OACtBkC,SAAU,KACVI,KAAMA,GAENG,EAAWjJ,SAGfiJ,EAAW1B,OAAOvH,EAAO,KAa3BmjK,EAAA52K,UAAA0iB,WAAV,SACIjM,EACAoE,EACAsI,EACAC,EACAC,GACA,GAAI5M,EAAKmF,aAAawE,QAAS,KACrB7D,EAAO9F,EAAKwhK,gBAAgBp9J,GAC5BoB,EAAuC,CACzCxO,GAAIoN,EACJ7I,KAAMkK,GAAgBhC,OACtBiC,SAAUkH,EACV9G,KAAMA,GAEV9F,EAAKmF,aAAapO,IAAIyO,EAAamH,QAEnC7T,GAAa4T,EAAsBE,IAIpCuzJ,EAAA52K,UAAAg4K,sBAAP,SAA6Bj3J,EAAyBm3J,WAC5CzhK,EAAO3W,KAAK2W,KAClB,GAAKsK,EAAOtO,UAAuC,IAA3BsO,EAAOtO,SAAShS,WAGxC,IAAoB,IAAAmP,EAAAC,EAAAkR,EAAOtO,UAAQ1C,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAhC,IAAM8gC,EAAK/yB,EAAA9N,MACRwU,EAAKkM,iBAAiBC,cAAckgB,EAAMjoB,QAC1Cq9J,EAAe51K,KAAKwgC,EAAMjoB,OAE9B/a,KAAKk4K,sBAAsBl1I,EAAOo1I,0GAInCtB,EAAA52K,UAAAsnB,wBAAP,SAA+BzM,GAC3B,OAAO/a,KAAKq4K,mBAAmBt9J,IAAUjB,EAAA5Z,UAAMsnB,wBAAuB5mB,KAAAZ,KAAC+a,IAGnE+7J,EAAA52K,UAAAm4K,mBAAR,SAA2Bt9J,OACjBpE,EAAO3W,KAAK2W,KAClB,IAAKA,EACD,OAAO,EAEX,GAAKA,EAAKqhK,iBAAmBrhK,EAAKihK,YAAejhK,EAAK6F,aAElD,QADI3L,EAAO8F,EAAKO,QAAQpJ,IAAIiN,GACrBlK,GAAM,KACHtC,EAAeoI,EAAKmF,aAAa+H,SAAShT,EAAKkK,OACrD,GAAIxM,GAASA,EAAM2D,OAASkK,GAAgBjC,OACxC,OAAO,EAEXtJ,EAAOA,EAAK6F,OAGpB,OAAO,GAEfogK,GApR2Cn3J,mBCP3C,SAAA24J,mDAeA,OAfkDtgK,EAAAA,EAAAA,GAEpCsgK,EAAAp4K,UAAAq6H,gBAAV,SAA0BvwG,EAAuBqwG,GAC7C,YAD6C,IAAAA,IAAAA,GAAA,GACzCA,EACO,wBAEU,IAAjBrwG,EACO,qBAEJ,iBAGDsuJ,EAAAp4K,UAAA67H,eAAV,WACI,MAAO,qBAEfu8C,GAfkDp/C,ICGlDq/C,GAAA,WAKI,SAAAA,EAAmBxmI,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BANCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wEANMo6C,EAAAA,eAWpByvH,EANA,GC+BI/mI,GAAU,EAkBdgnI,GAAA,SAAA1+J,GAAA,SAAA0+J,IAAA,IAAA5jK,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAmBY4U,EAAAi1B,IAAM,iBAAiB2H,KAwGxB58B,EAAAsC,QAAqC,IAAI5G,IAoBzCsE,EAAA6jK,iBAA8C,IAAInoK,IA+ClDsE,EAAAojK,iBAAkB,EAEjBpjK,EAAA8jK,gBAAkBC,SAoBlB/jK,EAAAgkK,iBAAsC,IAAItoK,IAyC3CsE,EAAAikK,sBAAwB,IAAI1vJ,EAAAA,aAoE5BvU,EAAA6iK,YAAc,IAAItuJ,EAAAA,aAKlBvU,EAAAkkK,YAAc,IAAIvoK,IAMjBqE,EAAAwpF,cAAgB,OA+W5B,OAzqB0CpmF,EAAAA,EAAAA,GAatCxY,OAAAgC,eAEWg3K,EAAAt4K,UAAA,KAAE,KAFb,WAGI,OAAOF,KAAK6pC,SAEhB,SAAc1nC,GACVnC,KAAK6pC,IAAM1nC,mCAUf3C,OAAAgC,eACWg3K,EAAAt4K,UAAA,OAAI,KADf,WAEI,OAAOF,KAAK6rB,WAGhB,SAAgB1pB,GACZnC,KAAK6rB,MAAQ1pB,GAAS,GACtBnC,KAAK0iB,eAAeC,oBAChB3iB,KAAKg0J,gBACLh0J,KAAKk0J,eAETl0J,KAAK4tC,IAAI+U,gDAUbnjD,OAAAgC,eAAIg3K,EAAAt4K,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKo+F,mBAahB,SAAiBj8F,GACbnC,KAAKo+F,cAAgBj8F,mCAQzB3C,OAAAgC,eAAIg3K,EAAAt4K,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK8rC,+CA8GhBtsC,OAAAgC,eACWg3K,EAAAt4K,UAAA,iBAAc,KADzB,WAEI,OAAOF,KAAK04K,qBAGhB,SAA0Bv2K,GACtBnC,KAAK04K,gBAAkBv2K,EACvBnC,KAAKmnB,iDAYT3nB,OAAAgC,eACWg3K,EAAAt4K,UAAA,kBAAe,KAD1B,WAEI,OAAOF,KAAK44K,sBAkBhB,SAA2Bz2K,GACvBnC,KAAK44K,iBAAmB54K,KAAK+4K,SAAS52K,GACtCnC,KAAK64K,sBAAsBt2J,KAAKviB,KAAK44K,kBACjC54K,KAAK+nB,QAAQpR,MACb3W,KAAK4tC,IAAIrL,iDA8BjB/iC,OAAAgC,eACWg3K,EAAAt4K,UAAA,8BAA2B,KADtC,WAEI,OAAOF,KAAKg5K,kCAGhB,SAAuC72K,GACnCnC,KAAKg5K,6BAA+B72K,EACpCnC,KAAKmnB,iDA+CT3nB,OAAAgC,eAAYg3K,EAAAt4K,UAAA,WAAQ,KAApB,WACI,OAAOF,KAAY,yCAchBw4K,EAAAt4K,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACI8Z,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,MAEdA,KAAKy3K,YAAY5yI,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAAC/2B,GACvD4G,EAAKqkK,2BAA2BjrK,MAIxCwqK,EAAAt4K,UAAA0yC,UAAA,WACI94B,EAAA5Z,UAAM0yC,UAAShyC,KAAAZ,OAMZw4K,EAAAt4K,UAAAq4D,mBAAP,WACQv4D,KAAKk5K,qBACLl5K,KAAKg5K,6BAA+Bh5K,KAAKk5K,mBAAmBnnI,UAEhEj4B,EAAA5Z,UAAMq4D,mBAAkB33D,KAAAZ,OAGpBw4K,EAAAt4K,UAAA+4K,2BAAR,SAAmCjrK,GAAnC,IAAA4G,EAAA5U,KACI,GAAIA,KAAKu3K,qBAAsB,KACrB4B,EAAWnrK,EAAK+M,MAElB/M,EAAKuJ,WAAavX,KAAK44K,iBAAiB1nI,IAAIioI,KAC5Cn5K,KAAK84K,YAAYprK,IAAIyrK,GAErBn5K,KAAKu3K,qBAAqB4B,EAAU,SAAAxmK,GAChCiC,EAAKkkK,YAAYlsI,UAAOusI,GACxBvkK,EAAKwkK,aAAazmK,EAAUwmK,GAC5BvkK,EAAKuS,gBAELo1B,sBAAsB,eACZq0D,EAASh8F,EAAKiO,iBAAiB6tE,cACrC,GAAIkgB,EAAQ,KACF5vF,EAAOpM,EAAK69J,SAAS5wJ,kBAAkB+uF,EAAOvvF,IAAKuvF,EAAOhvF,QAC5DZ,GACAA,EAAKsf,cAAciT,gBASvCilI,EAAAt4K,UAAAk5K,aAAR,SAAqBzmK,EAAiB0mK,GAAtC,UAAAzkK,EAAA5U,KACI,GAAIA,KAAK+b,YAAc/b,KAAK43K,WAAY,KACpC,IAAoB,IAAA0B,EAAAvpK,EAAA4C,GAAQ4mK,EAAAD,EAAAp3K,QAAAq3K,EAAAn3K,KAAAm3K,EAAAD,EAAAp3K,OAAE,CAAdq3K,EAAAp3K,MACNnC,KAAK43K,YAAcyB,wGAE7BvpK,EAAA9P,KAAKwU,MAAKhS,KAAI3B,MAAAiP,EAAApN,EAAIiQ,SACf,GAAI3S,KAAKwc,aAAc,KACtBE,EAAS1c,KAAKkX,QAAQpJ,IAAIurK,GAC1BG,EAAa98J,EAAOlI,KAExB,GAAIxU,KAAK8b,aAAawE,SAAWtgB,KAAK8b,aAAayE,sBAAqB,GAAM5f,OAAQ,CAElF,QADM8b,EAAO,GACNC,GACHD,EAAKja,KAAKka,EAAO3B,OACjB2B,EAASA,EAAOhG,OAKpB,QAFIkG,EAAa5c,KAAKwU,KAClByM,OAAM,aACDzgB,OACCi5K,EAAMh9J,EAAKjc,GAGjB,KAFAygB,EAASrE,EAAWtF,KAAK,SAAAlW,GAAK,OAAAA,EAAEwT,EAAKmH,cAAgB09J,mBAKrD78J,EAAaqE,EAAOjK,EAAKwF,sBAPpBhc,EAAIic,EAAK9b,OAAS,EAAGH,GAAK,EAAGA,IAAG,gBAAhCA,SASLygB,IACAu4J,EAAav4J,GAIrBu4J,EAAWx5K,KAAKwc,cAAgB7J,EAEpC3S,KAAK6iB,iBAAiBqE,qBACtBlnB,KAAKojB,gBAGDo1J,EAAAt4K,UAAA64K,SAAR,SAAiBW,OACPC,EAA+B,IAAIrpK,IAOzC,OALAopK,EAAMjnK,QAAQ,SAACtQ,EAAgBlB,EAAU24K,GAErCD,EAAUjxJ,IAAIznB,EAAKkB,KAGhBw3K,GAWJnB,EAAAt4K,UAAA25K,UAAP,SAAiB9+J,GACb/a,KAAKyyK,SAASwE,WAAWl8J,IAWtBy9J,EAAAt4K,UAAA45K,YAAP,SAAmB/+J,GACf/a,KAAKyyK,SAASyE,aAAan8J,IAWxBy9J,EAAAt4K,UAAA65K,UAAP,SAAiBh/J,GACb/a,KAAKyyK,SAAS0E,qBAAqBp8J,IAUhCy9J,EAAAt4K,UAAA85K,UAAP,WACIh6K,KAAK04K,gBAAkBC,SACvB34K,KAAKuoB,gBAAkB,IAAIjY,KAUxBkoK,EAAAt4K,UAAA+5K,YAAP,WACIj6K,KAAK04K,gBAAkB,EACvB14K,KAAKuoB,gBAAkB,IAAIjY,KAkBxBkoK,EAAAt4K,UAAAs3J,OAAP,SAAchjJ,EAAW+sG,GACrB,GAAIA,IAAgBvtG,WAA6B,OAAhButG,EAAsB,CACnDznG,EAAA5Z,UAAMglB,QAAOtkB,KAAAZ,MAAC,OAERuO,EAAQvO,KAAK8b,aAAa+H,SAAS09F,GAEzC,GAAIhzG,GAASA,EAAM2D,OAASkK,GAAgBjC,OACxC,MAAMtK,MAAM,kDAGVqqK,EAAel6K,KAAKkX,QAAQpJ,IAAIyzG,GAEtC,IAAK24D,EACD,MAAMrqK,MAAM,0BAGhB,GADA7P,KAAK0iB,eAAeC,kBAAkB,CAAC5H,MAAOm/J,EAAan/J,QACvD/a,KAAK+b,YAAc/b,KAAK43K,WACxBpjK,EAAKxU,KAAK43K,YAAcr2D,EACxBznG,EAAA5Z,UAAMs3J,OAAM52J,KAAAZ,KAACwU,OACV,KACGglK,EAAaU,EAAa1lK,KAC1B2lK,EAAWn6K,KAAKwc,aACtB,GAAIxc,KAAK8b,aAAawE,QAAS,KACrBpE,EAAQlc,KAAK+b,WAAavH,EAAKxU,KAAK+b,YAAcvH,EAClDiI,EAAc,GACpBA,EAAKja,KAAI3B,MAAT4b,EAAI/Z,EAAS1C,KAAKm4K,gBAAgB52D,KAClC9kG,EAAKja,KAAK++G,GACVvhH,KAAK8b,aAAapO,IAAG,CACjBC,GAAIuO,EACJO,KAAMA,EACNJ,SAAU7H,EACVtC,KAAMkK,GAAgBlC,KAEtB,WAECs/J,EAAWW,KACZX,EAAWW,GAAY,IAE3BX,EAAWW,GAAU33K,KAAKgS,GAE9BxU,KAAK4sJ,WAAWrqI,KAAK,CAAE/N,KAAIA,IAC3BxU,KAAKojB,eACLpjB,KAAKmnB,qBAEN,CACH,GAAInnB,KAAK+b,YAAc/b,KAAK43K,WAAY,KAC9B78J,EAAQvG,EAAKxU,KAAK43K,YACxB53K,KAAK0iB,eAAeC,kBAAkB,CAAC5H,MAAOA,IAElDjB,EAAA5Z,UAAMs3J,OAAM52J,KAAAZ,KAACwU,KAKdgkK,EAAAt4K,UAAA6mB,cAAP,SAAqB7K,GAIjBlc,KAAKyyK,SAAS1rJ,cAAc7K,IAKzBs8J,EAAAt4K,UAAAi4K,gBAAP,SAAuBj8J,GAInB,QAHMO,EAAc,GAChBwE,EAASjhB,KAAKkX,QAAQpJ,IAAIoO,GAEvB+E,EAAOvK,QACV+F,EAAKja,KAAKye,EAAOvK,OAAOqE,OACxBkG,EAASA,EAAOvK,OAGpB,OAAO+F,EAAK5H,WAMN2jK,EAAAt4K,UAAA0zJ,uBAAV,WACI,OAAQ5zJ,KAAK+2K,UAAa/2K,KAAK+2K,SAASp2K,OAASX,KAAKgwJ,2BAClD,EAAIhwJ,KAAKo6J,yBAMPoe,EAAAt4K,UAAAmjD,SAAV,SAAmBhiC,EAAmBO,GAAtC,IAEQX,EAFRrM,EAAA5U,KACQ0gK,GAAiB,EAGrB,GAAoB,iBAAhB,EAA0B,KACpBp/I,EAAUD,EACVtG,EAAQ/a,KAAKyyK,SAASlrJ,WAAWjG,GAIvC,GAHAL,EAASjhB,KAAKy4K,iBAAiB3qK,IAAIiN,GACnC/a,KAAKyyK,SAASiF,sBAAsBz2J,GAEhCjhB,KAAKmlB,OAAQ,KACP3D,EAAWxhB,KAAKo6K,0BAA0B9oK,QAAQgQ,GAClDnG,EAAOM,KAAKmC,MAAM4D,EAAWxhB,KAAKsnB,SAEpCtnB,KAAKmb,OAASA,IACdulJ,GAAiB,EACjB1gK,KAAKmb,KAAOA,IAKpBulJ,EACA1gK,KAAKk4H,wBAAwB35E,cAAc1Z,KAAK8G,EAAAA,SAAS5G,UAAU,WAC/DnwB,EAAK+rJ,gBAAgB/rJ,EAAKsjH,wBACN,iBAAhB,EAA2B72G,EAAMzM,EAAKgkH,SAAStnH,QAAQ2P,MAG/DjhB,KAAK2gK,gBAAgB3gK,KAAKk4H,wBACN,iBAAhB,EAA2B72G,EAAMrhB,KAAK44H,SAAStnH,QAAQ2P,IAG/DjhB,KAAK4gK,qBAAqBh/I,IAMvB42J,EAAAt4K,UAAAq3B,WAAP,SAAkBjW,EAAcE,GAC5B,MAAO,CACHo8B,UAAWt8B,EACX3N,MAAO6N,EACPqhJ,WAAY7iK,KAAKy6H,aAAan5G,GAAW,aAAe,YAOhEk3J,EAAAt4K,UAAAy+J,gBAAA,SAAgBZ,EAAoB7oH,QAApB,IAAA6oH,IAAAA,GAAA,QAAoB,IAAA7oH,IAAAA,GAAA,OAC1Bm/D,EAAS,GAWf,OADAr0G,KAAK44H,SAASnmH,QARE,SAACwO,GACTA,EAAOmoC,UACPirD,EAAO7xG,KAAK,MAGhB6xG,EAAO7xG,KAAKye,EAAOzM,QAIhBxU,KAAK89J,yBAAyBzpD,EAAQ0pD,EAAY7oH,IAM7D11C,OAAAgC,eAAWg3K,EAAAt4K,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKqgB,cAA6C,IAA7BrgB,KAAKqgB,aAAa1f,OAChCX,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK4zK,2BAG9D5zK,KAAK6pI,WAAe7pI,KAAKwU,MAA4B,IAApBxU,KAAK24J,WAIlB,IAApB34J,KAAK24J,WACE34J,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK6zK,8BADlE,EAHW7zK,KAAK8zK,oBAAsB9zK,KAAK8zK,oBAAsB9zK,KAAK+zK,4DAQhEyE,EAAAt4K,UAAA+hK,YAAV,SAAsBzgJ,EAAkBrf,GACpCsN,GAAazP,KAAK+2K,SAASv1J,GAAWrf,IAMjCq2K,EAAAt4K,UAAAk0J,YAAV,SAAsBx3I,EAA2C4+D,GAC5D,QAD4D,IAAAA,IAAAA,EAAA,MACxDx7E,KAAK+yG,iBAAkB,KAGjBsnE,EAAyBr6K,KAAKigB,WAAWjG,OAAO,SAACkG,GAAQ,OAACA,EAAI2lG,eAAiB3lG,EAAIs7F,oBACzFx7G,KAAKigB,WAAWylB,MAAM20I,GAE1BvgK,EAAA5Z,UAAMk0J,YAAWxzJ,KAAAZ,KAAC4c,EAAY4+D,wBAzrBrC1pC,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,gBACVqjC,SAAA,6iXACA5iC,UAAW,CACPyiG,GACAf,GACA8lC,GACA,CAAExqF,QAAS+sE,GAA0BxuC,SAAU4tF,IAC/C,CAAEnsH,QAASxsC,GAAoB+qE,SAAUosF,IACzC,CAAE3qH,QAASm/F,GAAsBl/F,YAAaG,EAAAA,WAAW,WAAM,OAAAisH,KAC/D35C,GACAliF,GACAW,GACAujE,oCAgBH1xE,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAeAA,EAAAA,4BAyGAA,EAAAA,0BAWAA,EAAAA,8BAcAA,EAAAA,+BAYAA,EAAAA,8BAaAA,EAAAA,+BAmBAA,EAAAA,qCA+BAgd,EAAAA,mCAMA0gC,EAAAA,aAAYr+C,KAAA,CAACuqK,GAAyC,CAAE7hI,KAAM6hI,GAAyC5hI,UAAQ,yCAiB/GhoC,EAAAA,oCAuBAA,EAAAA,2BAsBAgd,EAAAA,sCAkBA8qB,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,OAyWrE6hI,EA3rBA,CAkB0CltB,mBClE1C,SAAAgvB,mDA2GA,OArG6CtiK,EAAAA,EAAAA,GAsBzCxY,OAAAgC,eACW84K,EAAAp6K,UAAA,UAAO,KADlB,WAEI,OAAOF,KAAKu6K,cAGhB,SAAmBp4K,GACXnC,KAAKu6K,WAAap4K,IAClBnC,KAAKu6K,SAAWp4K,EAChBnC,KAAKshB,QAAUthB,KAAKu6K,SAAS/lK,uCAYrChV,OAAAgC,eACI84K,EAAAp6K,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKu6K,SAAShjK,cAWzB,SAAapV,GACRnC,KAAY,QAA2Bi9G,6BAA6Bj9G,KAAKu6K,SAAUp4K,oCAYxF3C,OAAAgC,eAAI84K,EAAAp6K,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK2T,MAAQ3T,KAAK2W,KAAKwE,KAAOnb,KAAK2W,KAAK2Q,yCAMnD9nB,OAAAgC,eAAW84K,EAAAp6K,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK2W,KAAK4gK,qBACbv3K,KAAK2W,KAAK4R,gBAAgB2oB,IAAIlxC,KAAK+a,OAC/B/a,KAAKk9G,QAAQvqG,UAAY3S,KAAKk9G,QAAQvqG,SAAShS,QAC/CX,KAAK2W,KAAK6gK,gBACNx3K,KAAKshB,QAAQthB,KAAK2W,KAAK6gK,gBAE/Bx3K,KAAKk9G,QAAQvqG,UAAY3S,KAAKk9G,QAAQvqG,SAAShS,wCAM7C25K,EAAAp6K,UAAA4+G,eAAV,WAGI,OAFgBhlG,EAAA5Z,UAAM4+G,eAAcl+G,KAAAZ,MAEnB,KADKA,KAAKk9G,QAAQliG,oBAAsB,yBAA2B,KAOjFs/J,EAAAp6K,UAAA0yC,UAAP,WACI5yC,KAAK6pI,YAAY7pI,KAAK2W,KAAK4gK,sBAAuBv3K,KAAK2W,KAAKmiK,YAAY5nI,IAAIlxC,KAAK+a,OACjFjB,EAAA5Z,UAAM0yC,UAAShyC,KAAAZ,2BAzGtB8xC,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/vG,SAAU,oBACVqjC,SAAA,0xNACA5iC,UAAW,CAAC,CAAEg9C,QAASuyD,GAAiBtyD,YAAaG,EAAAA,WAAW,WAAM,OAAA+tH,yCAarE18F,EAAAA,aAAY5vE,KAAA,CAAC,6BAWbW,EAAAA,wBAoBAwgC,EAAAA,YAAWnhC,KAAA,CAAC,yBA2DjBssK,GArG6C57D,ICC7C87D,GAAA,WAOI,SAAAA,EAAYzyJ,GACR/nB,KAAK+nB,QAAO,EAoGpB,OAjGWyyJ,EAAAt6K,UAAAsE,UAAP,SAAiBoY,EAAmBb,EAAoB67J,EAAoBp7J,EACxE7O,EAAYwa,OACNxR,EAAO3W,KAAK+nB,QAAQpR,KACtB8jK,EAAyC,GACvCC,EAAqB,IAAIpqK,IACzBymK,EAAkB,GAYxB,OAVIh7J,GAAc67J,EACd6C,EAAsBz6K,KAAK26K,oBAAoBhtK,EAAIiP,EAAYb,EAAY67J,EAAY8C,EAAoB3D,GACpGv6J,IACPi+J,EAAsBz6K,KAAK46K,qBAAqBjtK,EAAIiP,EAAYb,EAAYS,EAAcxI,UACtF+iK,EAAU,EAAG2D,IAGrB/jK,EAAKogK,SAAWA,EAChBpgK,EAAKO,QAAUwjK,EACf/jK,EAAK2U,YAAcmvJ,EACZA,GAGHD,EAAAt6K,UAAA26K,SAAR,SAAiB9+J,EAAiBuF,GAC9B,OAAOvF,EAAauF,EAAQvF,GAAcuF,GAGtCk5J,EAAAt6K,UAAAy6K,oBAAR,SAA4BhtK,EAAYiP,EAAmBb,EAAoB67J,EAC3Et7J,EAAgCy6J,GADpC,IAAAniK,EAAA5U,KAGUwQ,EAA4B,GAC5BsqK,EAA0C,GA8BhD,OA7BAl+J,EAAWnK,QAAQ,SAAA4O,OACTJ,EAA0B,CAC5BlG,MAAOnG,EAAKimK,SAAS9+J,EAAYsF,GACjC7M,KAAM6M,EACN1O,SAAU,IAER+D,EAAS4F,EAAIxO,IAAIuT,EAAIu2J,IACvBlhK,GACAuK,EAAOvK,OAASA,EAChBA,EAAO/D,SAASnQ,KAAKye,IAErB65J,EAAqBt4K,KAAKye,GAG9B3E,EAAIoM,IAAIrH,EAAItF,GAAakF,KAG7B65J,EAAqBroK,QAAQ,SAAAwO,OACnBvK,EAAS4F,EAAIxO,IAAImT,EAAOzM,KAAKojK,IAC/BlhK,GACAuK,EAAOvK,OAASA,EAChBA,EAAO/D,SAASnQ,KAAKye,IAErBzQ,EAAOhO,KAAKye,KAIpBjhB,KAAK+6K,qBAAqBptK,EAAI6C,EAAQ,EAAGumK,GAElCvmK,GAGHgqK,EAAAt6K,UAAA66K,qBAAR,SAA6BptK,EAAYiP,EAA+Bo+J,EAA0BjE,GAC9F,IAAK,IAAIv2K,EAAI,EAAGA,EAAIoc,EAAWjc,OAAQH,IAAK,KAClCygB,EAASrE,EAAWpc,GAC1BygB,EAAOvN,MAAQsnK,EACf/5J,EAAO1J,SAAWvX,KAAK+nB,QAAQuvJ,wBAAwBr2J,GACvD81J,EAASv0K,KAAKye,EAAOzM,MAEjByM,EAAOtO,UAAYsO,EAAOtO,SAAShS,OAAS,GAC5CX,KAAK+6K,qBAAqBptK,EAAIsT,EAAOtO,SAAUqoK,EAAmB,EAAGjE,KAKzEyD,EAAAt6K,UAAA06K,qBAAR,SAA6BjtK,EAAYiP,EAAmBb,EAAoBS,EAC5E9F,EAAyBqgK,EAAiBiE,EAA0B1+J,GAGpE,QAFM9L,EAA4B,GAEzBhQ,EAAI,EAAGA,EAAIoc,EAAWjc,OAAQH,IAAK,KAClCyb,EAAOW,EAAWpc,GAClBygB,EAA0B,CAC5BlG,MAAO/a,KAAK66K,SAAS9+J,EAAYE,GACjCzH,KAAMyH,EACNvF,OAAQA,EACRhD,MAAOsnK,GAEX/5J,EAAO1J,SAAWvX,KAAK+nB,QAAQuvJ,wBAAwBr2J,GACvD81J,EAASv0K,KAAKyZ,GACdK,EAAIoM,IAAIzH,EAAOlG,MAAOkG,GACtBA,EAAOtO,SAAWsJ,EAAKO,GACnBxc,KAAK46K,qBAAqBjtK,EAAIsO,EAAKO,GAAeT,EAAYS,EAAcyE,EAAQ81J,EAAUiE,EAAmB,EAAG1+J,GACpHtI,UACJxD,EAAOhO,KAAKye,GAGhB,OAAOzQ,uBA1GdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,wBACN4I,MAAM,+CAXDjJ,MAqHT66J,EA5GA,GAiHAS,GAAA,WAOI,SAAAA,EAAYlzJ,GACR/nB,KAAK+nB,QAAO,EAiDpB,OA9CWkzJ,EAAA/6K,UAAAsE,UAAP,SAAiBoY,EAA+BjP,EAC5CutK,EAAwB1yJ,EAAmCL,OAErDxR,EAA6B3W,KAAK+nB,QAAQpR,KAC1CnC,EAA0B,GAShC,OAPAmC,EAAKqgK,qBAAuBp6J,EAC5BjG,EAAK8hK,iBAAmB,IAAInoK,IAE5BtQ,KAAKm7K,qBAAqBv+J,EAAYpI,EAAM0mK,EAAgB1yJ,EAAgB7a,GAAI,GAEhFgJ,EAAKyjK,0BAA4B5lK,EAAK8H,IAAI,SAAAlb,GAAK,OAAAA,EAAEoT,OAE1CA,GAGHymK,EAAA/6K,UAAAi7K,qBAAR,SAA6Bv+J,EAA+BpI,EACxD0mK,EAAwB1yJ,EAAmC+yF,EAC3D6/D,GACA,GAAKx+J,GAAeA,EAAWjc,OAK/B,QAFMgW,EAA6B3W,KAAK+nB,QAAQpR,KAEvCnW,EAAI,EAAGA,EAAIoc,EAAWjc,OAAQH,IAAK,KAClCsa,EAAqB8B,EAAWpc,GAElC46K,GACA5mK,EAAKhS,KAAKsY,GAGdA,EAAmBvD,SAAWvX,KAAK+nB,QAAQuvJ,wBAAwBx8J,GAEnE9a,KAAKq7K,kCAAkC1kK,EAAMmE,GAE7CnE,EAAK8hK,iBAAiB/vJ,IAAI5N,EAAmBC,MAAOD,GAEpD9a,KAAKm7K,qBAAqBrgK,EAAmBnI,SAAU6B,EAAM0mK,EACzD1yJ,EAAgB+yF,EAAQ6/D,GAAkBtgK,EAAmBvD,YAIjE0jK,EAAA/6K,UAAAm7K,kCAAR,SAA0C1kK,EAA4BsK,GACtDtK,EAAKO,QAAQpJ,IAAImT,EAAOlG,OAChCxD,SAAW0J,EAAO1J,8BAvD7BoR,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,qBACN4I,MAAM,+CA5HDjJ,MAmLTs7J,EAzDA,GA4DAK,GAAA,WAOI,SAAAA,EAAYvzJ,GACR/nB,KAAK+nB,QAAO,EA+BpB,OA5BWuzJ,EAAAp7K,UAAAsE,UAAP,SACImW,EACAnF,EACA7H,EACAwa,OAGI3X,EAFEmG,EAAO3W,KAAK+nB,QAAQpR,KAMtBnG,EAHCgF,EAAY7U,OAGJ6Z,GAASE,aAAaC,EAAkBnF,GAFxCmF,MAIP08F,EAAqB,GAI3B,OAHAr3G,KAAKu7K,uBAAuB/qK,EAAQ6mG,GACpC1gG,EAAK0gG,mBAAqBA,EAEnB7mG,GAGH8qK,EAAAp7K,UAAAq7K,uBAAR,SAA+BrkK,EAA4B6/J,WACvD,GAAI7/J,GAAWA,EAAQvW,WACnB,IAAqB,IAAA66K,EAAAzrK,EAAAmH,GAAOukK,EAAAD,EAAAt5K,QAAAu5K,EAAAr5K,KAAAq5K,EAAAD,EAAAt5K,OAAE,CAAzB,IAAM+e,EAAMw6J,EAAAt5K,MACb40K,EAASv0K,KAAKye,EAAOzM,MACrBxU,KAAKu7K,uBAAuBt6J,EAAOtO,SAAUokK,8HAnC5DpuJ,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBACN4I,MAAM,+CAxLDjJ,MA6NT27J,EAvCA,GA0CAI,GAAA,WAOI,SAAAA,EAAY3zJ,GACR/nB,KAAK+nB,QAAO,EAuBpB,OApBW2zJ,EAAAx7K,UAAAsE,UAAP,SAAiBoY,EAA+BzB,EAAUmM,EAAc3Z,EAAYwa,QAApC,IAAAhN,IAAAA,EAAA,QAAU,IAAAmM,IAAAA,EAAA,QAChD3Q,EAAO3W,KAAK+nB,QAAQpR,KAC1B,IAAKA,EAAKwO,OACN,OAAOvI,MAGL/G,EAAM+G,EAAWjc,OACjB+mB,EAAajM,KAAKC,KAAK7F,EAAMyR,GAE7B/Y,EAAQ,CACVoF,MAAQ+T,EAAa,GAAKvM,GAAQuM,EAAcA,EAAa,EAAIvM,EACjEC,eAAgBkM,GAGd9W,EAA4BgK,GAASW,KAAK/L,GAAWwN,GAAarO,GAIxE,OAHAoI,EAAKy/I,YAAc7nJ,EACnB,EAAc8/I,MAAQ9/I,EAAMoF,MAErBnD,uBA7BdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,iBACN4I,MAAM,+CAlODjJ,MA+PT+7J,EA/BA,GAiCAC,GAAA,WAQI,SAAAA,EAAY5zJ,GACR/nB,KAAK+nB,QAAO,EAmCpB,OAhCI4zJ,EAAAz7K,UAAAsE,UAAA,SAAUoY,EAAmBjP,EAAYwa,OAC/BxR,EAA6B3W,KAAK+nB,QAAQpR,KAEhD,GAAIA,EAAKmF,aAAawE,QAAS,KACrBs7J,EAAoBjlK,EAAKmF,aAAayE,sBAAqB,GACjE,GAAIq7J,EAAkBj7K,OAAS,EAAG,CAE9B,IADmBgW,EAAKoF,WAEpB,OAAOa,MAGLg7J,EAAajhK,EAAKihK,WAClBp7J,EAAe7F,EAAK6F,aAE1B,GAAIo7J,EAAY,KACNiE,EAAgBzsK,GAAWwN,GACjC,OAAOpC,GAASqB,kBACZggK,EACAD,EACAjlK,EAAKoF,YACN,GAAIS,EAAc,KACfs/J,E7NhR1B,SAAgBC,EAAuB1sK,EAAcmN,WAC3ChM,EAAgB,GACtB,IAAKnB,EACD,OAAOmB,MAGX,IAAmB,IAAAwrK,EAAAjsK,EAAAV,GAAK4sK,EAAAD,EAAA95K,QAAA+5K,EAAA75K,KAAA65K,EAAAD,EAAA95K,OAAE,CAArB,IAAM+Z,EAAIggK,EAAA95K,MACL+5K,EAAa1sK,GAAWyM,GAC1Btc,MAAM0Q,QAAQ4L,EAAKO,MACnB0/J,EAAW1/J,GAAgBu/J,EAAuBG,EAAW1/J,GAAeA,IAEhFhM,EAAOhO,KAAK05K,wGAEhB,OAAO1rK,E6NmQuCurK,CAAuBn/J,EAAYJ,GACjE,OAAOhC,GAAS+B,8BACZu/J,EACAF,EACAp/J,EACA7F,EAAKoF,cAIrB,OAAOa,uBA1Cd+L,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,sBACN4I,MAAM,+CAnQDjJ,MA6STg8J,EA5CA,kBCjPI,SAAAQ,EACYt5J,EACAhC,EACAkH,EACA6lB,EACA9J,EACUuxB,EACV2kD,EACyB37F,EACf40E,GATtB,IAAAr+E,EAUIkF,EAAAlZ,KAAAZ,KAAM6iB,EAAkBhC,EAAakH,EAAS6lB,EAAK9J,EAASuxB,EAAM2kD,EAAc/mB,IAAajzF,YAJ3E4U,EAAAygD,KAAAA,EAEezgD,EAAAyJ,SAAAA,EACfzJ,EAAAq+E,aAAAA,EAStBr+E,EAAA2C,UAAW,EAMX3C,EAAAlB,MAAQ,EAMRkB,EAAAwnK,eAAgB,EAnBZxnK,EAAKynK,YAAW,IAyGxB,OAvH8CrkK,EAAAA,EAAAA,GAiE1CmkK,EAAAj8K,UAAA2uC,SAAA,WACI/0B,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,OAMXm8K,EAAAj8K,UAAA6N,OAAP,SAAcuE,GACVA,EAAMmyB,kBACNzkC,KAAKq8K,YAAYp/D,6BAA6Bj9G,KAAKqhB,IAAI67F,SAAUl9G,KAAKqhB,IAAI9J,SAAUjF,EAAOtS,KAAKgiB,qBAM7Fm6J,EAAAj8K,UAAAo8K,iBAAP,WACIt8K,KAAK+nB,QAAQ9F,eACbjiB,KAAKsgC,cAAciT,SAMhB4oI,EAAAj8K,UAAAq8K,kBAAP,SAAyBjqK,GACrBA,EAAMmyB,mBAMH03I,EAAAj8K,UAAAo+G,mBAAP,SAA0B1tG,OAChB4rK,EAAiBx8K,KAAKy8K,UAAUn8I,cAAcpvB,wBAAwBD,MACtEyrK,EAAiB18K,KAAKqe,SAASkoB,YAAY8xB,iBAAiBr4D,KAAKy8K,UAAUn8I,eAC3Eq8I,EAAkBt/J,WAAWq/J,EAAeE,aAC9CC,EAAc,EAClB,GAAI78K,KAAK88K,eAAgB,KACfC,EAAmB/8K,KAAKqe,SAASkoB,YAAY8xB,iBAAiBr4D,KAAK88K,eAAex8I,eACxFu8I,EAAcx/J,WAAW0/J,EAAiB7zD,aAI9C,OAFqBztG,KAAK4O,IAAGxpB,MAAR4a,KAAI/Y,EAAQ/C,MAAMuT,KAAKlT,KAAKsgC,cAAc3tB,UAC1D2J,IAAI,SAAC0mB,GAAU,OAAAryB,GAAoBC,EAAOoyB,OACzBw5I,EAAiBG,EAAkBE,GAM7Dr9K,OAAAgC,eAAW26K,EAAAj8K,UAAA,eAAY,KAAvB,WACI,OAAIF,KAAKuX,SACEvX,KAAK2W,KAAK0hH,8BAAgCr4H,KAAK80K,wBAE/C90K,KAAK2W,KAAK4hH,+BAAiCv4H,KAAK+0K,8EA1HlEjjI,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/vG,SAAU,qBACVqjC,SAAA,qkGACA5iC,UAAW,CAACqoG,iDAPP5F,UAAyBf,UAJzBlxF,UAJWsvB,EAAAA,yBAAmB3L,EAAAA,kBACTyD,EAAAA,cAQrBywE,sCAmBQrlG,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBAvBMp1B,wCAgCzB/C,EAAAA,qBAMAA,EAAAA,6BAMAA,EAAAA,yBAGA8nC,EAAAA,UAASzoC,KAAA,CAAC,YAAa,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,4BAGnDF,EAAAA,UAASzoC,KAAA,CAAC,iBAAkB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,mCAGxDF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,qCAMhEF,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,sCAMlEF,EAAAA,UAASzoC,KAAA,CAAC,2BAA4B,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,uBAMlEhoC,EAAAA,SA4DLwtK,GAvH8CpiE,ICP9CijE,GAAA,WAOI,SAAAA,EAAYj1J,GACR/nB,KAAK+nB,QAAO,EA0FpB,OAvFWi1J,EAAA98K,UAAAsE,UAAP,SAAiBuyK,EACbn/B,EACA6gB,EACAod,EACAloK,EAAYwa,EAAqB2tJ,OAC3Bn/J,EAA6B3W,KAAK+nB,QAAQpR,KAEhD,OAAKogK,GAAan/B,GAAc6gB,IAA2BrI,GAA2B92C,cAI/Et5G,KAAK+1K,eAAep/J,EAAMogK,EAAUlB,GAHhCkB,GAMPiG,EAAA98K,UAAA61K,eAAR,SAAuBp/J,EAA4BiG,EAA+Bi5J,GAI9E,QAHMI,EAAqB,GACrBE,EAAmBx/J,EAAK+L,eAAeg1H,uBAEpCl3I,EAAI,EAAGA,EAAIoc,EAAWjc,OAAQH,IAAK,KAClCygB,EAASrE,EAAWpc,GAC1By1K,EAAmBzzK,KAAKye,OAElBo2J,EAAap2J,EAAOtO,UAAYsO,EAAOtO,SAAShS,OAAS,GAAKsgB,EAAO1J,SAE3E,GAAIs+J,IAAoB3lB,GAAoB11H,QAAW68I,GAwBhD,GAAIxB,IAAoB3lB,GAAoBv1H,KAAO08I,EAAY,CAC9DQ,EAAY52J,EAAOtO,SAASqH,OAAO,SAAA5Y,GAAK,OAACA,EAAE4Z,sBAAqBsB,IAAI,SAAAlb,GAAK,OAAAA,EAAEoT,OAC/EqjK,EAAY73K,KAAKy2K,oBAAoB9/J,EAAMsK,EAAOlG,MAAO88J,GAEnDnB,EAAgC,CAClCttH,UAFczyC,EAAK+L,eAAeq1H,mBAAmB92H,EAAOlG,MAAO88J,GAGnExtJ,IAAK8rJ,EACL8G,gBAAiBh8J,EAAOvN,MAAQ,GAEpCuiK,EAAmBzzK,KAAKk0K,SA7BxB,QAHIwG,EAAcj8J,EACdvE,EAASuE,EAAOvK,OAEbgG,GAAQ,KACL/J,EAAW+J,EAAO/J,SAExB,GAAIA,EAASA,EAAShS,OAAS,KAAOu8K,EAclC,UAbIrF,EAAYllK,EAASqH,OAAO,SAAA5Y,GAAK,OAACA,EAAE4Z,sBAAqBsB,IAAI,SAAAlb,GAAK,OAAAA,EAAEoT,OACxEqjK,EAAY73K,KAAKy2K,oBAAoB9/J,EAAM+F,EAAO3B,MAAO88J,OAEnDnB,EAAgC,CAClCttH,UAFczyC,EAAK+L,eAAeq1H,mBAAmBr7H,EAAO3B,MAAO88J,GAGnExtJ,IAAK8rJ,EACL8G,gBAAiBvgK,EAAOhJ,MAAQ,GAEpCuiK,EAAmBzzK,KAAKk0K,GAGxBh6J,GADAwgK,EAAcxgK,GACOhG,QAiBrC,OAAOu/J,GAGH+G,EAAA98K,UAAAu2K,oBAAR,SAA4B9/J,EAAMuF,EAAO1H,GACrC,IAAKmC,EAAKmF,aAAawE,UAAY3J,EAAKqhK,gBACpC,OAAOxjK,MAEL2oK,EAAcxmK,EAAKmF,aAAa0E,oBAAoBxG,OAAO,SAAA1Z,GAAK,MAAW,WAAXA,EAAE4R,OAAmBoK,IAAI,SAAAhc,GAAK,OAAAA,EAAEqN,KAClG0T,EAAM1K,EAAKO,QAAQpJ,IAAIoO,GAC3B,IAAKmF,GAA8B,IAAvB87J,EAAYC,OAAgB,MAAO,GAE/C,IADA/7J,EAAMA,EAAI1O,SAAW0O,EAAMA,EAAI3K,OACxB2K,GAAK,CAER,GADAnF,EAAQmF,EAAItG,OACwB,IAAhCoiK,EAAY7rK,QAAQ4K,GACpB,MAAO,GAEXmF,EAAMA,EAAI3K,OASd,OAPAymK,EAAY1qK,QAAQ,SAAAsI,OAEVpH,GADWgD,EAAKoF,WAAavH,EAAK8H,IAAI,SAAAnD,GAAO,OAAAA,EAAIxC,EAAKoF,cAAevH,GACpDlD,QAAQyJ,IAChB,IAAXpH,GACAa,EAAK0G,OAAOvH,EAAO,KAGpBa,uBAhGdmU,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,kBACN4I,MAAM,+CAVDjJ,MA0GTq9J,EAlGA,GCQAK,GAAA,WAAA,SAAAA,KA8BA,2BA9BCruK,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZupK,GACA8B,GACA6B,GACA3B,GACAS,GACAK,GACAxzJ,GACA4zJ,GACAC,GACAqB,GACAzE,IAEFrpK,QAAS,CACPspK,GACA8B,GACA6B,GACA5D,GACA/L,IAEF/vH,QAAS,CACPC,EAAAA,aACAo1C,EAAAA,YACAkI,GACAwyE,GACAtF,QAIJmW,EA9BA,kBCVA,SAAAC,mDA8yBA,OA9yB0DtlK,EAAAA,EAAAA,GAG5CslK,EAAAp9K,UAAAq6H,gBAAV,SAA0BvwG,EAAuBqwG,GAC7C,YAD6C,IAAAA,IAAAA,GAAA,GACtCA,EAAY,wBAA0B,8BAGvCijD,EAAAp9K,UAAA67H,eAAV,WACI,MAAO,6BAGDuhD,EAAAp9K,UAAA87H,cAAV,SAAwBroH,GAAxB,IAIQ0N,EAJRzM,EAAA5U,KACU0O,EAAW1O,KAAK+7H,iBAUtB,OATap8H,MAAMuT,KAAKlT,KAAK2W,KAAK2pB,cAAckuC,iBACzC9/D,EAAQ,mBAAmBiF,EAAK,OAElClB,QAAQ,SAACrR,OACJm8K,EAAa3oK,EAAK4oK,oBAAoBp8K,EAAG,yBAC3Cm8K,GAAcA,EAAWxgH,aAAa,QAAUnoD,EAAK+B,KAAKhJ,KAC1D0T,EAAMjgB,KAGPigB,GAGHi8J,EAAAp9K,UAAAu9K,kBAAR,SAA0B9mK,GAEtB,OADiBA,GAAQ3W,KAAK2W,MACd2pB,cAAc2C,WAAWA,WAAWA,YAGhDq6I,EAAAp9K,UAAAw9K,yBAAR,SAAiC/mK,GAE7B,OADiBA,GAAQ3W,KAAK2W,MACd2pB,cAAc2C,WAAWA,YAGrCq6I,EAAAp9K,UAAAy9K,aAAR,SAAqBC,EAAajnK,GAE9B,OADcA,EAAKknK,SAASr8D,eAAc,GAAMxnG,OAAO,SAACo8J,GAAM,OAAAA,EAAEzoK,KAAOiwK,IAAa,IAIhFN,EAAAp9K,UAAAylD,oBAAR,SAA4BhvC,OAClB8kB,EAAY9kB,EAAKuhH,wBAAwBh9F,eACzCyP,EAAeh0B,EAAKuhH,wBAAwB54E,YAAY3U,aAC9D,OAAwB,IAAjBA,GAAsBlvB,KAAK4rB,MAAM5L,EAAY9kB,EAAKuhH,wBAAwB34E,uBAAyB5U,GAEtG2yI,EAAAp9K,UAAA49K,kBAAR,SAA0BnqK,GACtB,OAAO3T,KAAK2W,KAAKonK,kBAAkB/9K,KAAK2W,KAAKiiH,SAASjlH,KAGnD2pK,EAAAp9K,UAAAq3H,6BAAP,SAAoC/1G,EAAUQ,EAAoBq4G,QAAA,IAAAA,IAAAA,GAAA,OACxDC,EAAet6H,KAAKu6H,gBAAgBv4G,EAAoBq4G,GAC9D,OAAIA,EACmBr6H,KAAK2W,KAAK4iH,iBAAiB3mH,UAAU,GAAG0tB,cACzCqqC,cACX2vD,EAAY,uBAAuBt4G,EAAkB,MAEpDhiB,KAAKg8H,cAAcx6G,GACpBmpD,cACJ2vD,EAAY,mBAAmB94G,EAAQ,yBAAyBQ,EAAkB,OAGtFs7J,EAAAp9K,UAAA49G,WAAP,SAAkBod,EAAYV,GAA9B,IAAA5lH,EAAA5U,KACI,IAAIw6H,EAAaC,aAAjB,KACMujD,EAAW9iD,EAAWP,uBACtB34G,EAAqBw4G,EAAa54G,OAClC85G,EAAkBlB,EAAan5G,IACrC,GAAI28J,EAEmD,uBADlCA,EAASrrK,SAAS,GAAG40C,SAASlyC,cACdA,cAE7BrV,KAAKi+K,eAAeD,EAAUh8J,EAAoBhiB,KAAK2W,MAE9B,OAArB3W,KAAK2W,KAAKD,OAEV1W,KAAKk+K,mBAAmBhjD,EAAYQ,EAAiB15G,GAErDlI,EAAA5Z,UAAM49G,WAAUl9G,KAAAZ,KAACk7H,EAAYV,QAGlC,GAAwB,IAApBkB,EAAuB,CAEN17H,KAAK89K,kBAAkBpiD,EAAkB,GAI7D17H,KAAKm+K,WAAWn+K,KAAK2W,MAAOukH,EAAWphF,aACnC,WACIohF,EAAatmH,EAAKonH,cAAcN,GAChC9mH,EAAKkpG,WAAWod,EAAYV,KALpC1gH,EAAA5Z,UAAM49G,WAAUl9G,KAAAZ,KAACk7H,EAAYV,QAQL,OAArBx6H,KAAK2W,KAAKD,QACG,IAApBglH,GAEA17H,KAAKo+K,UAAUp8J,KAGhBs7J,EAAAp9K,UAAA89G,aAAP,SAAoBkd,EAAYV,GAC5B,IAAIA,EAAaC,aAAjB,KACM4jD,EAAWnjD,EAAWl2E,mBACtBhjC,EAAqBw4G,EAAa54G,OAClC85G,EAAkBlB,EAAan5G,IACrC,GAAIg9J,EAGuD,uBADtCA,EAAS1rK,SAAS,GAAG40C,SAASlyC,cACVA,cAEjCrV,KAAKs+K,eAAeD,EAAUr8J,EAAoBhiB,KAAK2W,MAE9B,OAArB3W,KAAK2W,KAAKD,OAEV1W,KAAKu+K,qBAAqBrjD,EAAYQ,EAAiB15G,GAEvDlI,EAAA5Z,UAAM89G,aAAYp9G,KAAAZ,KAACk7H,EAAYV,QAGhCkB,IAAoB17H,KAAK2W,KAAKiiH,SAASj4H,OAAS,EAEvDmZ,EAAA5Z,UAAM89G,aAAYp9G,KAAAZ,KAACk7H,EAAYV,GACH,OAArBx6H,KAAK2W,KAAKD,QACjBglH,IAAoB17H,KAAK2W,KAAKiiH,SAASj4H,OAAS,GAEhDX,KAAKw+K,UAAUx8J,KAIhBs7J,EAAAp9K,UAAA29G,YAAP,SAAmB77F,GAAnB,IAAApN,EAAA5U,KACI,GAAyB,OAArBA,KAAK2W,KAAKD,OAAiB,KAGrB8rC,EADiBxiD,KAAK2W,KAAK2pB,cAAc2C,WAAWA,WAE3C/xB,wBAAwBypB,IAAM36B,KAAK2W,KAAK8uH,SAAS9G,MAAMr+F,cAAcpvB,wBAAwBypB,IACtG8jJ,EAAej8H,GAAQ,EACvB6F,EAAaroD,KAAK0+K,kBAAkB1+K,KAAK2W,MAC1C8nK,EAID3kK,EAAA5Z,UAAM29G,YAAWj9G,KAAAZ,KAACgiB,GAHlBhiB,KAAKm+K,WAAW91H,EAAW1xC,KAAM6rC,EAC7B,WAAM,OAAA1oC,EAAA5Z,UAAM29G,YAAWj9G,KAAAgU,EAACoN,UAKhClI,EAAA5Z,UAAM29G,YAAWj9G,KAAAZ,KAACgiB,IAInBs7J,EAAAp9K,UAAA69G,eAAP,SAAsB/7F,GAAtB,IAAApN,EAAA5U,KAGUg8F,EAAYh8F,KAAK2W,KAAKiiH,SAASj4H,OAAS,EAC9C,GAAIX,KAAK89K,kBAAkB9hF,GAAY,KAC7B2iF,EAAc3iF,EAAY,EAC1B4iF,EAAiB5+K,KAAK2W,KAAKuhH,wBAAwB9zE,kBAAkBu6H,GAAa,GAClFE,EAAoB7+K,KAAK2W,KAAKuhH,wBAAwBh9F,eACtD4jJ,EAAe9+K,KAAKu6H,gBAAgBv4G,GAC1C,GAAI68J,IAAsBD,EAAgB,KAChCj9J,EAAQ3hB,KAAKg8H,cAAc2iD,GAAanwG,iBACvCswG,EAAY,uBAAuB98J,EAAkB,MAC5DL,EAAMA,EAAMhhB,OAAS,GAAG4yC,aAExBvzC,KAAKm+K,WAAWn+K,KAAK2W,KAAMioK,EAAiBC,EACxC,eACUl9J,EAAQ/M,EAAKonH,cAAc2iD,GAAanwG,iBACvCswG,EAAY,uBAAuB98J,EAAkB,MACxDL,EAAMhhB,OAAS,GAAKghB,EAAMA,EAAMhhB,OAAS,GAAG4yC,eAGxD,GAAyB,OAArBvzC,KAAK2W,KAAKD,OAAiB,KAE7B8rC,EADiBxiD,KAAK2W,KAAK2pB,cAAc2C,WAAWA,WAE3C/xB,wBAAwBspB,OAASx6B,KAAK2W,KAAK8uH,SAAS9G,MAAMr+F,cAAcpvB,wBAAwBspB,OACzGukJ,EAAev8H,EAAO,EACtB6F,EAAaroD,KAAKg/K,sBAAsBh/K,KAAK2W,MAC9CooK,EAIDjlK,EAAA5Z,UAAM69G,eAAcn9G,KAAAZ,KAACgiB,GAHrBhiB,KAAKm+K,WAAW91H,EAAW1xC,KAAM6rC,EAC7B,WAAM,OAAA1oC,EAAA5Z,UAAM69G,eAAcn9G,KAAAgU,EAACoN,UAKnClI,EAAA5Z,UAAM69G,eAAcn9G,KAAAZ,KAACgiB,IAGtBs7J,EAAAp9K,UAAAq9G,aAAP,WAAA,IAAA3oG,EAAA5U,KAGUg8F,EAAYh8F,KAAK2W,KAAKiiH,SAASj4H,OAAS,EAC9C,GAAIX,KAAK89K,kBAAkB9hF,GAAY,KAC7BijF,EAAcjjF,EAAY,EAC1B4iF,EAAiB5+K,KAAK2W,KAAKuhH,wBAAwB9zE,kBAAkB66H,GAAa,GAClFJ,EAAoB7+K,KAAK2W,KAAKuhH,wBAAwBh9F,eACxD2jJ,IAAsBD,EACtB5+K,KAAKspF,aAAa21F,GAElBj/K,KAAKm+K,WAAWn+K,KAAK2W,KAAMioK,EAAiBC,EACxC,WACIjqK,EAAK00E,aAAa21F,UAI9BnlK,EAAA5Z,UAAMq9G,aAAY38G,KAAAZ,OAInBs9K,EAAAp9K,UAAAopF,aAAP,SAAoB9nE,EAAU64G,GAA9B,IAAAzlH,EAAA5U,KACI,QAD0B,IAAAq6H,IAAAA,GAAA,GACtBr6H,KAAK2W,KAAKD,SAAW2jH,EAAW,KAI1B03C,EADiB/xK,KAAK2W,KAAK2pB,cAAc2C,WAAWA,WAEvC/xB,wBAAwBspB,OAASx6B,KAAK2W,KAAK8uH,SAASnlG,cAAcpvB,wBAAwBspB,OACvGnZ,EAAMrhB,KAAK2W,KAAKqlH,cAAcx6G,GAAUsiB,QAAQxD,cAEhD4+I,EADY79J,EAAInQ,wBAAwBspB,QACZx6B,KAAK2W,KAAK8uH,SAAS9G,MAAMr+F,cAAcpvB,wBAAwBspB,OAC3F2kJ,EAAUn/K,KAAKo/K,WAAWp/K,KAAK2W,MAC/Bm7J,EAAUzwJ,EAAInQ,wBAAwBspB,OACxCnZ,EAAIy4B,aAAeqlI,EAGvB,GAFqBpN,GAAc,GAEbmN,EAEf,GAHYpN,GAAW,EAU1Bh4J,EAAA5Z,UAAMopF,aAAY1oF,KAAAZ,KAACwhB,EAAU64G,OAPT,KACdglD,EAA+D,IAArDr/K,KAAK2W,KAAKuhH,wBAAwBh9F,eAAuBl7B,KAAK2W,KAC1E3W,KAAK0+K,kBAAkB1+K,KAAK2W,MAAMA,KAChC2oK,EAAUD,EAAQ1gD,MAAMr+F,cAAcpvB,wBAAwBypB,IAChE36B,KAAK2W,KAAK8uH,SAAS9G,MAAMr+F,cAAcpvB,wBAAwBypB,IAAM0kJ,EAAUr/K,KAAK2W,KAAK8uH,SAC7FzlI,KAAKm+K,WAAWmB,EAASxN,EAAS,WAAM,OAAAh4J,EAAA5Z,UAAMopF,aAAY1oF,KAAAgU,EAAC4M,UAN3DxhB,KAAKm+K,WAAWn+K,KAAK2W,KAAKD,OAAQq7J,EAAY,WAAM,OAAAj4J,EAAA5Z,UAAMopF,aAAY1oF,KAAAgU,EAAC4M,UAW3E1H,EAAA5Z,UAAMopF,aAAY1oF,KAAAZ,KAACwhB,EAAU64G,IAK9BijD,EAAAp9K,UAAAu9G,cAAP,WAAA,IAAA7oG,EAAA5U,KACUs7H,EAAiBt7H,KAAK2W,KAAKuhH,wBAAwB54E,YACnD+wE,EAAmBrwH,KAAK2W,KAAKyK,YAAYuqB,MAAM6tF,WAAWl6E,YAC/B,IAA7Bg8E,EAAe7/F,WAAmBz7B,KAAK2W,KAAKD,QAEvC25G,EAAiBr1F,aAAeye,SAAS42E,EAAiB/0F,WAAY,KAAO,GAAKt7B,KAAK2W,KAAKsoG,cAAct+G,OAC3GX,KAAK69G,YAAY,IAEjB79G,KAAKqwH,iBAAiBrwH,KAAK2W,KAAKyK,YAAYuqB,MAAMh4B,OAAO0vC,SAAS,GAClErjD,KAAK2W,KAAKwiH,cAAc/6E,YACnBvZ,KAAK8G,EAAAA,SACL5G,UAAU,WACPnwB,EAAKipG,YAAY,MAI7B/jG,EAAA5Z,UAAMu9G,cAAa78G,KAAAZ,OAIpBs9K,EAAAp9K,UAAAm9G,WAAP,SAAkB6e,EAAc1B,GAAhC,IAAA5lH,EAAA5U,KACI,GAAIA,KAAK2W,KAAK8M,cACV3J,EAAA5Z,UAAMm9G,WAAUz8G,KAAAZ,KAACk8H,EAAc1B,OADnC,KAIMh5G,EAAWg5G,EAAan5G,IACxBW,EAAqBw4G,EAAa54G,OAClC64G,EAAeD,EAAaC,aAC5B8kD,EAAcv/K,KAAK2W,KAAK4iH,iBAAiB3mH,UACzC4sK,EAAeD,EAAY5+K,OAAS,EACpC8+K,EAAgBj+J,IAAaxhB,KAAK2W,KAAKiiH,SAASj4H,OAAS,EACzD++K,EAAgB1/K,KAAK2W,KAAKyK,YAAY9J,KAAK,SAAA+J,GAAO,OAAAA,EAAI1N,QAAU6N,EAAW,IAC3Em+J,EAAe3/K,KAAK2W,KAAKuoG,gBAAgBl/G,KAAK2W,KAAKuoG,gBAAgBv+G,OAAS,GAAGqpB,eAAiBhI,EAChG49J,EAAmBJ,GAAgB/kD,EACnCiE,EAAYl9G,EAAW,EACvBq+J,EAAO7/K,KAAK2W,KAAKuhH,wBACjB4nD,EAAcphD,GAAamhD,EAAKrgI,SAAS7+C,OAAS,GACpDX,KAAK2W,KAAKonK,kBAAkB8B,EAAKrgI,SAASk/E,IAC9C,GAAKghD,GAAmBD,GAAiBD,IAAiBG,GAAiBllD,EAoBhEmlD,GAAoBD,GAAgB3/K,KAAK2W,KAAKD,OACrD1W,KAAK+/K,yBAAyB7jD,GACtBujD,GAAiBD,GAAgBG,GAAgB3/K,KAAK2W,KAAKD,OAEpE1W,KAAKggL,aAAaT,EAAY,GAAGj/I,cAAe,EAAGtgC,KAAK2W,KAAKD,QAAQ,GAEpEoD,EAAA5Z,UAAMm9G,WAAUz8G,KAAAZ,KAACk8H,EAAc1B,OA1BsD,KAE/EylD,EAAiBjgL,KAAK09K,2BAE5B,KAD2B19K,KAAK2W,KAAKD,UAAWupK,EAAej7H,mBAE3DhlD,KAAKkgL,sBAAsBD,EAAgBjgL,KAAK2W,KAAKD,aAClD,GAAIopK,EAAa,CACHD,EAAKtxK,MAAMonC,WAAakqI,EAAKtxK,MAAM8uC,UAAYqhF,EAM5D1+H,KAAKkgL,sBAAsBhkD,EAAcl8H,KAAK2W,MAJ9C3W,KAAKm+K,WAAWn+K,KAAK2W,KAAM,OAAQ,WAC/B/B,EAAKsrK,sBAAsBhkD,EAActnH,EAAK+B,aAK/C3W,KAAK2W,KAAKD,QAAU1W,KAAK2W,KAAKD,OAAO6iH,iBAAiB54H,OAAS,EACvEX,KAAK+/K,yBAAyB7jD,GAE7Bl8H,KAAKg+G,aAAake,EAAc,CAAE76G,IAAKG,EAAUI,OAAQ,OAY7D07J,EAAAp9K,UAAA6/K,yBAAR,SAAiC7jD,OAEtBxlH,EAAS1W,KAAK2W,KAAKD,OACnBypK,EAAmBzpK,EAAO6iH,iBAAiB54H,OAAS,EACpDy/K,EAAiB3mI,SACpBz5C,KAAKw9K,oBAAoBthD,EAAc,sBAAsBj5F,WAAW85B,aAAa,iBAAkB,IACpGsjH,EAAoB3pK,EAAOkiH,SAASj4H,OAAS,IAAMy/K,EAGnDE,IADoBtgL,KAAK09K,yBAAyB19K,KAAK2W,MACdquC,mBAC/C,GAAIq7H,GAAqBF,IAAqBG,EAAoB,KAExDC,EAAgB7pK,EAAO6iH,iBAAiB5tF,MAAMrL,cACpD5pB,EAAO08E,WAAW4sF,aAAaO,EAAe,EAAG7pK,GAAQ,QAGzD1W,KAAKw+K,UAAU,IAIhBlB,EAAAp9K,UAAAggL,sBAAR,SAA8BhkD,EAAcvlH,OAElCinK,EADW1hD,EAAal3E,mBAAmB2lB,cAAc,yBAClC5N,aAAa,MACpCyjH,EAAYxgL,KAAK29K,aAAaC,EAAajnK,GAC7C6pK,EAAUxiD,gBAAkBwiD,EAAUviD,aAAeC,GAAW9kB,YAChEonE,EAAUptF,WAAWwpC,uBAAsB,GAG/C58H,KAAKs+K,eAAepiD,EAAal3E,mBAAoB,EAAGruC,IAGrD2mK,EAAAp9K,UAAAi9H,uBAAP,SAA8Bv7G,EAA4BggB,GACtD,GAA4B,IAAxBhgB,EAAOoI,cAAsBhqB,KAAK2W,KAAKD,OAAQ,CAC/CkrB,EAAUqI,qBACNw2I,EAAazgL,KAAK2W,KAAKD,OACrBgqK,EAAmB1gL,KAAK09K,2BAA2B/iD,uBACzD,GAAI+lD,EAAkB,KACZC,EAAWD,EAAiBlyG,iBAAiB,yBAAyB,GAC5EiyG,EAAazgL,KAAK29K,aAAagD,EAAS5jH,aAAa,MAAO/8D,KAAK2W,KAAKD,QAE1E1W,KAAKo+K,UAAUqC,EAAWvhE,gBAAgBuhE,EAAWvhE,gBAAgBv+G,OAAS,GAAGqpB,mBAEjFlQ,EAAA5Z,UAAMi9H,uBAAsBv8H,KAAAZ,KAAC4hB,EAAQggB,IAItC07I,EAAAp9K,UAAAw9H,uBAAP,SAA8B97G,EAA4BggB,GAGtD,GAFa5hC,KAAK2W,KAAKytG,iBAAiB4Y,0BACP1rH,QAAQsQ,GAAU,GACxB5hB,KAAK2W,KAAKytG,iBAAiB4Y,0BAA0Br8H,OAAQ,KAE9EigL,EAAW5gL,KAAK2W,KAAK8K,QAAQ7O,UAC7BiuK,EAA8B,IAApBD,EAASjgL,OACnB4+K,EAAcv/K,KAAK2W,KAAK4iH,iBAAiB3mH,UACzC4sK,EAAeD,EAAY5+K,OAAS,GAAK4+K,EAAY,GAAGvf,aAAar/J,OAAS,EAChFkgL,EACA7gL,KAAKggL,aAAaY,EAAS,GAAGtgJ,cAAe,EAAGtgC,KAAK2W,MAAM,GACpD6oK,EACPx/K,KAAKggL,aAAaT,EAAY,GAAGj/I,cAAe,EAAGtgC,KAAK2W,MAAM,GAE9D3W,KAAKw+K,UAAU,GAEnB58I,EAAUqI,sBAEVnwB,EAAA5Z,UAAMw9H,uBAAsB98H,KAAAZ,KAAC4hB,EAAQggB,IAItC07I,EAAAp9K,UAAAk9G,mBAAP,SAA0B8e,EAAc1B,GAAxC,IAAA5lH,EAAA5U,KACI,GAAIA,KAAK2W,KAAK8M,cACV3J,EAAA5Z,UAAMk9G,mBAAkBx8G,KAAAZ,KAACk8H,EAAc1B,OAD3C,KAIMh5G,EAAWg5G,EAAan5G,IACxBW,EAAqBw4G,EAAa54G,OAClCy4G,EAAYG,EAAaC,aAC/B,GAA2B,IAAvBz4G,GAAyC,IAAbR,GAAkBxhB,KAAK2W,KAAKD,SAAW2jH,EACnE,GAAIr6H,KAAK2W,KAAKqnH,gBAAkBh+H,KAAK2W,KAAKsnH,aAAeC,GAAW9kB,YAChEp5G,KAAK48H,4BACF,KACG8jD,EAAmB1gL,KAAK09K,2BAA2B/iD,uBACzD,GAAI+lD,EAAkB,KACZC,EAAWD,EAAiBlyG,iBAAiB,yBAAyB,GAC5ExuE,KAAK8gL,yBAAyBH,EAAUzkD,EAAc16G,OACnD,KACGu/J,EAAU,CACZ1/J,IAAKG,EACLI,OAAQ5hB,KAAK2W,KAAKD,OAAOwoG,gBAAgBl/G,KAAK2W,KAAKD,OAAOwoG,gBAAgBv+G,OAAS,GAAGqpB,cAE1FhqB,KAAK89G,WAAWoe,EAAc6kD,SAGnC,GAA2B,IAAvB/+J,GAA4Bk6G,EAAavB,wBAC0B,uBAA1EuB,EAAavB,uBAAuBhoH,SAAS,GAAG48C,QAAQl6C,cAAwC,CAC1FsrK,EAAW3gL,KAAKghL,gBAAgB9kD,EAAavB,wBACnD36H,KAAK8gL,yBAAyBH,EAAUzkD,EAAc16G,QACnD,GAA2B,IAAvBQ,GAA4Bq4G,EAAW,KACxC4mD,EAAejhL,KAAK2W,KAAKiiH,SAASj4H,OAAS,EACjD,IAAsB,IAAlBsgL,EAEA,GAAIjhL,KAAK2W,KAAKqnH,gBAAkBh+H,KAAK2W,KAAKsnH,aAAeC,GAAW9kB,YAChEp5G,KAAK48H,4BACF,CACGmkD,EAAU,CACZ1/J,IAAKG,EACLI,OAAQ5hB,KAAK2W,KAAKD,OAAOwoG,gBAAgBl/G,KAAK2W,KAAKD,OAAOwoG,gBAAgBv+G,OAAS,GAAGqpB,cAE1FhqB,KAAK89G,WAAWoe,EAAc6kD,QAE/B,GAAK/gL,KAAK89K,kBAAkBmD,GAE5B,KACGrC,EAAiB5+K,KAAK2W,KAAKuhH,wBAAwB9zE,kBAAkB68H,GAAc,GACnFpC,EAAoB7+K,KAAK2W,KAAKuhH,wBAAwBh9F,eAC5D,GAAI2jJ,IAAsBD,GAAkBpjK,MAAMojK,GAAiB,KACzDsC,EAAelhL,KAAKghL,gBAAgBhhL,KAAK2W,KAAKqlH,cAAcilD,GAAc3gJ,cAAcvD,eAC9F/8B,KAAK8gL,yBAAyBI,EAAchlD,EAAc16G,QAE1DxhB,KAAKm+K,WAAWn+K,KAAK2W,KAAMioK,EAAiBC,EACxC,eACUqC,EAAetsK,EAAKosK,gBAAgBpsK,EAAK+B,KAAKqlH,cAAcilD,GAAc3gJ,cAAcvD,eAC9FnoB,EAAKksK,yBAAyBI,EAAchlD,EAAc16G,UAXtE1H,EAAA5Z,UAAMq9G,aAAY38G,KAAAZ,WAgBtB8Z,EAAA5Z,UAAMk9G,mBAAkBx8G,KAAAZ,KAACk8H,EAAc1B,KAIxC8iD,EAAAp9K,UAAAw6H,iBAAP,WACI,OAAQvpH,MAAUnR,KAAK2W,KAAK8uH,SAAYzlI,KAAK2W,KAAK8uH,SAAWzlI,KAAK2W,MAG9D2mK,EAAAp9K,UAAA8gL,gBAAR,SAAwBG,OACdxuK,EAAWwuK,EAAYxuK,SAE7B,OADqBA,EAASA,EAAShS,OAAS,GAAGgS,SAAS,GAAGA,SAAS,IAIpE2qK,EAAAp9K,UAAA4gL,yBAAR,SAAiCH,EAAUzkD,EAAc16G,OAC/Co8J,EAAc+C,EAAS5jH,aAAa,MAChCyjH,EAAYxgL,KAAK29K,aAAaC,EAAa59K,KAAK2W,OAAS3W,KAAK29K,aAAaC,EAAa59K,KAAK2W,KAAKD,QAClGslF,EAAYwkF,EAAUthE,gBAAgBshE,EAAUthE,gBAAgBv+G,OAAS,GAAGqpB,aAC5Eu1J,EAAciB,EAAUjnD,iBAAiB3mH,UAC/C,GAAI2sK,EAAY5+K,OAAS,GAAK4+K,EAAY,GAAGvf,aAAar/J,OAAS,EAAG,KAE5DoiK,EAAawc,EAAY,GAAGj/I,cAClCtgC,KAAKohL,aAAare,EAAY/mE,EAAWwkF,GAAW,GAAM,QACvD,GAAiC,IAA7BA,EAAU/+J,QAAQ9gB,QAC5B6/K,EAAUxiD,gBAAkBwiD,EAAUviD,aAAeC,GAAW9kB,YAE7DonE,EAAUptF,WAAWwpC,6BAClB,GAAiC,IAA7B4jD,EAAU/+J,QAAQ9gB,OAAc,KAEjC0gL,EAAYrhL,KAAKshL,WAAWd,GAClC,GAAIa,EACArhL,KAAK8gL,yBAAyBO,EAAWnlD,EAAc16G,OACpD,KACGu/J,EAAU,CACZ1/J,IAAMG,EACNI,OAAQ5hB,KAAK2W,KAAKuoG,gBAAgBl/G,KAAK2W,KAAKuoG,gBAAgBv+G,OAAS,GAAGqpB,cAE5EhqB,KAAK89G,WAAWoe,EAAc6kD,SAIlCP,EAAUptF,WAAWmqB,gBAIzB+/D,EAAAp9K,UAAAohL,WAAR,SAAmBd,OACTe,EAAef,EAAUgB,SAASlhJ,cAAcq6F,uBACtD,OAAI4mD,EACOA,EAAa5uK,SAAS,GAAGA,SAAS,GAEtC,MAGH2qK,EAAAp9K,UAAAo+K,eAAR,SAAuB92H,EAAMxlC,EAAoBrL,GAAjD,IAAA/B,EAAA5U,KAEU49K,EADWp2H,EAAKmjB,cAAc,yBACP5N,aAAa,MACpCyjH,EAAYxgL,KAAK29K,aAAaC,EAAajnK,GAEjD,GAAiC,IAA7B6pK,EAAU/+J,QAAQ9gB,OAAtB,KAMM8gL,EAAgBjB,EAAUthE,gBAAgBshE,EAAUthE,gBAAgBv+G,OAAS,GAAGqpB,aACtFhI,EAAqBvG,KAAKwtB,IAAIw4I,EAAez/J,GAEc,IAAvDw+J,EAAUtoD,wBAAwB3pH,MAAMonC,WAExC31C,KAAKm+K,WAAWqC,EAAW,MAAO,WAAM,OAAA5rK,EAAKorK,aAAax4H,EAAMxlC,EAAoBw+J,KAEpFxgL,KAAKggL,aAAax4H,EAAMxlC,EAAoBw+J,QAZ5CxgL,KAAKw+K,UAAUx8J,EAAoBw+J,IAenClD,EAAAp9K,UAAA+9K,eAAR,SAAuBz2H,EAAMxlC,EAAoBrL,GAAjD,IAAA/B,EAAA5U,KACU0hL,EAAQ,GACRC,EAAYhiL,MAAMuT,KAAKs0C,EAAKgnB,iBAAiB,0BAC7CozG,EAAajrK,EAAKkrK,gBAAgBl2I,MAAMj4B,MAC9CiuK,EAAUlvK,QAAQ,SAACqvK,OACTC,EAAYntK,EAAK4oK,oBAAoBsE,EAAI,sBAC3CC,GAAatoI,SAASsoI,EAAUhlH,aAAa,cAAe,MAAQ6kH,GACpEF,EAAMl/K,KAAKs/K,SAIblE,EADW8D,EAAMA,EAAM/gL,OAAS,GACTo8D,aAAa,MACpCyjH,EAAYxgL,KAAK29K,aAAaC,EAAajnK,GAEjD,GAAiC,IAA7B6pK,EAAU/+J,QAAQ9gB,OAAtB,KAMM8gL,EAAgBjB,EAAUthE,gBAAgBshE,EAAUthE,gBAAgBv+G,OAAS,GAAGqpB,aACtFhI,EAAqBvG,KAAKwtB,IAAIw4I,EAAez/J,OAEvCggK,EAAqBhiL,KAAK2lD,oBAAoB66H,GAC9CxkF,EAAYwkF,EAAU5nD,SAASj4H,OAAS,EAC9C,GAAKqhL,EAGE,KACGC,EAAiBzB,EAAUxkD,cAAchgC,GAC6B,uBAAxDimF,EAAe3hJ,cAAcinB,SAASlyC,cAEtDrV,KAAKi+K,eAAegE,EAAe3hJ,cAAc2C,WAAYjhB,EAAoBw+J,GAEjFxgL,KAAKohL,aAAaa,EAAe3hJ,cAAete,EAAoBw+J,GAAW,QAPnFxgL,KAAKm+K,WAAWqC,EAAW,SAAU,WAAM,OAAA5rK,EAAKqpK,eAAez2H,EAAMxlC,EAAoBrL,UAZzF3W,KAAKo+K,UAAUp8J,EAAoBw+J,IAuBnClD,EAAAp9K,UAAAk+K,UAAR,SAAkBp8J,EAAoBrL,GAAtC,IAAA/B,EAAA5U,KACUkiL,EAAWvrK,GAAQ3W,KAAK2W,KAC1BwrK,EAAkBniL,KAAKy9K,kBAAkByE,GACzCE,EAAoBpiL,KAAK09K,yBAAyBwE,GAChDG,IAAuBD,EAAkBznD,uBAC3ClmC,EAAO2tF,EAAkBznD,wBAA0BwnD,EAAgBxnD,uBACnElmC,EACI4tF,EACAriL,KAAKi+K,eAAexpF,EAAMzyE,EAAoBkgK,EAASxrK,QAEvD1W,KAAKohL,aAAa3sF,EAAMzyE,EAAoBkgK,EAASxrK,QAGzD1W,KAAKm+K,WAAW+D,EAASxrK,OAAQ,OAC7B,WACIyrK,EAAkBvtK,EAAK6oK,kBAAkB9mK,GACzCyrK,EAAoBxtK,EAAK8oK,yBAAyB/mK,GAClD89E,EAAO2tF,EAAkBznD,wBAA0BwnD,EAAgBxnD,uBAC/D0nD,EACAztK,EAAKqpK,eAAexpF,EAAMzyE,EAAoBkgK,EAASxrK,QAEvD9B,EAAKwsK,aAAa3sF,EAAMzyE,EAAoBkgK,EAASxrK,WAMjE4mK,EAAAp9K,UAAAoiL,kBAAR,SAA0B3rK,GAItB,QAFIurK,EAAWvrK,EAAKD,OAChB2nK,EAAWr+K,KAAKy9K,kBAAkB9mK,GAAMquC,oBACpCq5H,GAAgC,OAApB6D,EAASxrK,QACzB2nK,EAAWr+K,KAAKy9K,kBAAkByE,GAAUl9H,mBAC5Ck9H,EAAWA,EAASxrK,OAGxB,MAAO,CAAEC,KAAMurK,EAAU7R,YAAagO,IAElCf,EAAAp9K,UAAAw+K,kBAAR,SAA0B/nK,OAClBurK,EAAWvrK,EAAKD,OACpB,IAAKwrK,EACD,MAAO,CAAEvrK,KAAMA,EAAM89E,KAAM,MAI/B,QAFI8tF,EAAoE,IAApDL,EAAShqD,wBAAwBh9F,eACjDu5D,EAAO99E,EACJ4rK,GAAqC,OAApBL,EAASxrK,QAC7B+9E,EAAOytF,EAEPK,EAAoE,KADpEL,EAAWA,EAASxrK,QACKwhH,wBAAwBh9F,eAErD,MAAO,CAAEvkB,KAAMurK,EAAUztF,KAAMA,IAG3B6oF,EAAAp9K,UAAAs+K,UAAR,SAAkBx8J,EAAoBrL,GAAtC,IAAA/B,EAAA5U,KACUkiL,EAAWvrK,GAAQ3W,KAAK2W,KACxB6rK,EAAaxiL,KAAKsiL,kBAAkBJ,GACpCO,EAAiBD,EAAW7rK,KAC9B+rK,EAAiBF,EAAWnS,YAC5B+R,EAAoBpiL,KAAK09K,yBAAyBwE,GAChD5B,IAAuB8B,EAAkBp9H,mBAC3C9iD,EAAOkgL,EAAkBp9H,oBAAsB09H,EAC7CpnD,EAAiBmnD,EAAevqD,wBAAwB54E,YACxDqjI,EAAcF,EAAevqD,wBAAwB3pH,MACrDq0K,EAAcD,EAAYhtI,WAAagtI,EAAYtlI,YACxDolI,EAAe7pD,SAASj4H,OACrBuB,EACIo+K,EACAtgL,KAAKs+K,eAAep8K,EAAM8f,EAAoBygK,GAE9CziL,KAAKggL,aAAa99K,EAAM8f,EAAoBrL,GAAQ8rK,GAEjDnnD,EAAe7/F,YACtB6/F,EAAe3wF,aAAe83I,EAAevqD,wBAAwB34E,qBAAwBqjI,GAC7F5iL,KAAKm+K,WAAWsE,EAAgB,OAC5B,WACIC,EAAiBF,EAAWnS,YAC5B+R,EAAoBxtK,EAAK8oK,4BACzBx7K,EAAOkgL,EAAkBp9H,oBAAsB09H,IACnCpC,EACR1rK,EAAK0pK,eAAep8K,EAAM8f,EAAoBygK,GACvCvgL,GACP0S,EAAKorK,aAAa99K,EAAM8f,EAAoBrL,GAAQ8rK,MAKhEnF,EAAAp9K,UAAA8+K,sBAAR,SAA8BroK,OACtBurK,EAAWvrK,EAAKD,OACpB,IAAKwrK,EACD,MAAO,CAAEvrK,KAAMA,EAAM89E,KAAM,MAO/B,QALIh5D,EAAYymJ,EAAShqD,wBAAwBh9F,eAC7CyP,EAAeu3I,EAAShqD,wBAAwB54E,YAAY3U,aAC5D43I,EAAiC,IAAjB53I,GAChBlvB,KAAK4rB,MAAM5L,EAAYymJ,EAAShqD,wBAAwB34E,uBAAyB5U,EACjF8pD,EAAO99E,EACJ4rK,GAAqC,OAApBL,EAASxrK,QAC7B+9E,EAAOytF,EAEPzmJ,GADAymJ,EAAWA,EAASxrK,QACCwhH,wBAAwBh9F,eAE7CqnJ,EAAiC,KADjC53I,EAAeu3I,EAAShqD,wBAAwB54E,YAAY3U,eAExDlvB,KAAK4rB,MAAM5L,EAAYymJ,EAAShqD,wBAAwB34E,uBAAyB5U,EAEzF,MAAO,CAAEh0B,KAAMurK,EAAUztF,KAAMA,IAG3B6oF,EAAAp9K,UAAA2iL,cAAR,SAAsBlsK,GAGlB,QAFIurK,EAAWvrK,EACX6jB,EAAS0nJ,EAASvjD,MAAMr+F,cAAcpvB,wBAAwBspB,OAC3D0nJ,EAASxrK,QACZwrK,EAAWA,EAASxrK,OACpB8jB,EAAS/e,KAAKwtB,IAAIzO,EAAQ0nJ,EAASvjD,MAAMr+F,cAAcpvB,wBAAwBspB,QAEnF,OAAOA,GAGH8iJ,EAAAp9K,UAAAk/K,WAAR,SAAmBzoK,GAGf,QAFIurK,EAAWvrK,EACXgkB,EAAMunJ,EAASvjD,MAAMr+F,cAAcpvB,wBAAwBypB,IACxDunJ,EAASxrK,QACZwrK,EAAWA,EAASxrK,OACpBikB,EAAMlf,KAAK4O,IAAIsQ,EAAKunJ,EAASvjD,MAAMr+F,cAAcpvB,wBAAwBypB,KAE7E,OAAOA,GAGH2iJ,EAAAp9K,UAAA8/K,aAAR,SAAqBx4H,EAAMxlC,EAAoBrL,EAAM0jH,GAArD,IAAAzlH,EAAA5U,KACUyhL,EAAgB9qK,EAAKuoG,gBAAgBvoG,EAAKuoG,gBAAgBv+G,OAAS,GAAGqpB,aAC5EhI,EAAqBvG,KAAKwtB,IAAIw4I,EAAez/J,OACvCs4G,EAAet6H,KAAKu6H,gBAAgBv4G,EAAoBq4G,GAC9D,GAAI1jH,EAAKy8E,WAAWskC,qBAAqB11G,IAA+C,IAAxBrL,EAAK8K,QAAQ9gB,OAAc,KACjFmiL,EACFt7H,EAAKmjB,cAAiB2vD,EAAY,uBAAuBt4G,EAAkB,MACzE+gK,EAAwB/iL,KAAKg/K,sBAAsBroK,GAAMA,KAEzDqsK,EAAahjL,KAAK6iL,cAAclsK,GAChC6rC,EAAOsgI,EAAK5xK,wBAAwBspB,OAASwoJ,EAC7CC,EAASzgI,GAAQ,EACjB/mB,EAAYsnJ,EAAsB7qD,wBAAwBh9F,eAC1DyP,EAAeo4I,EAAsB7qD,wBAAwB54E,YAAY3U,aACzEu4I,IAA+B,IAAjBv4I,GAChBlvB,KAAK4rB,MAAM5L,EAAYsnJ,EAAsB7qD,wBAAwB34E,uBAAyB5U,IAC7Fs4I,GAAUC,EACXljL,KAAKm+K,WAAW4E,EAAuBvgI,EAAM,WAAM,OAAAsgI,EAAKvvI,MAAM,CAAEC,eAAe,MAE/EsvI,EAAKvvI,MAAM,CAAEC,eAAe,SAGhCxzC,KAAKmjL,4BAA4BxsK,EAAMqL,EAAoB,WACvDpN,EAAKorK,aAAax4H,EAAMxlC,EAAoBrL,EAAM0jH,MAIvDijD,EAAAp9K,UAAAu5H,uBAAP,SAA8Bz3G,EAA4BrL,OAChDurK,EAAWvrK,GAAQ3W,KAAK2W,KACxBiL,EAASsgK,EAAShjE,gBAAgB5nG,KAAK,SAAC4I,GAAQ,OAACA,EAAIulG,aAAevlG,EAAI8J,eAAiBhI,IAC/F,OAAOkgK,EAASjjE,cAAct+G,OAASuhL,EAAShjE,gBAAgBllG,OAAO,SAAC7Y,GAAM,OAACA,EAAEskH,cAAan0G,QAAQsQ,GAClGI,GAGAs7J,EAAAp9K,UAAAkhL,aAAR,SAAqB55H,EAAMxlC,EAAoBrL,EAAMysK,EAAU/oD,GAA/D,IAAAzlH,EAAA5U,KACUyhL,EAAgB9qK,EAAKuoG,gBAAgBvoG,EAAKuoG,gBAAgBv+G,OAAS,GAAGqpB,aAE5E,GADAhI,EAAqBvG,KAAKwtB,IAAIw4I,EAAez/J,GACzCrL,EAAKy8E,WAAWskC,qBAAqB11G,GAAqB,KACpDqhK,EAAerjL,KAAKu6H,gBAAgBv4G,EAAoBq4G,GACxD14G,EAAQ6lC,EAAKgnB,iBAAoB60G,EAAY,uBAAuBrhK,EAAkB,MACxFshK,EAAO3hK,EAAMA,EAAMhhB,OAAS,GAC1B4iL,EAAS9pI,SAAS+N,EAAKuV,aAAa,iBAAkB,IACtDsiH,EAA0D,IAAhD1oK,EAAKuhH,wBAAwBh9F,eAAuBvkB,EAChE3W,KAAK0+K,kBAAkB/nK,GAAMA,KAC3B2oK,EAAUD,EAAQ1gD,MAAMr+F,cAAcpvB,wBAAwBypB,IAChEhkB,EAAK8uH,SAAS9G,MAAMr+F,cAAcpvB,wBAAwBypB,IAAM0kJ,EAAU1oK,EAAK8uH,SAC7E05C,EAAUn/K,KAAKo/K,WAAWzoK,GAC1B6sK,EAASnE,EAAQnnD,wBAAwBh9F,eACzCsnB,EAAO8gI,EAAKpyK,wBAAwBspB,OACtC8oJ,EAAKxpI,aAAeqlI,EACT,IAAXqE,GAAgBhhI,EAAO,IAAM4gI,EAC7BpjL,KAAKm+K,WAAWkB,EAAS78H,EAAM,eACrB9vC,EAAM2nH,EAAoD7yE,EAAxC7wC,EAAKy8E,WAAW4oC,cAAcunD,IACtDD,EAAO5wK,EAAG87D,iBAAoB60G,EAAY,uBAAuBrhK,EAAkB,MAAM,IACpFuxB,MAAM,CAAEC,eAAe,MAEzBgP,EAAO,GAAK4gI,EACnBpjL,KAAKm+K,WAAWmB,EAAS98H,EAAM,WAC3B8gI,EAAK/vI,MAAM,CAAEC,eAAe,MAGhC8vI,EAAK/vI,MAAM,CAAEC,eAAe,SAGhCxzC,KAAKmjL,4BAA4BxsK,EAAMqL,EAAoB,WACvDpN,EAAKwsK,aAAa55H,EAAMxlC,EAAoBrL,EAAMysK,EAAS/oD,MAK/DijD,EAAAp9K,UAAAijL,4BAAR,SAAoCxsK,EAAMqL,EAAoByhK,OACpDjlD,EAAgBx+H,KAAKy5H,uBAAuBz3G,EAAoBrL,GACtEA,EAAKwiH,cAAc/6E,YACdvZ,KAAK8G,EAAAA,SACL5G,UAAU0+I,GACX9sK,EAAKyK,YAAYzgB,OAAS,EAC1BgW,EAAKyK,YAAYuqB,MAAM6tF,WAAWn2E,SAASm7E,GAE3C7nH,EAAK0iH,gBAAgBh2E,SAASm7E,IAI9B8+C,EAAAp9K,UAAAi+K,WAAR,SAAmBxnK,EAAM3V,EAAQyiL,GAC7BzjL,KAAK06H,mBAAmBp6F,cAAciT,MAAM,CAACC,eAAe,IAC5D+I,sBAAsB,WAClB,GAAsB,iBAAXv7C,EACP2V,EAAKuhH,wBAAwBr1E,aAAa7hD,QAE1C,OAAQA,GACJ,IAAK,MAAO2V,EAAKuhH,wBAAwB70E,SAAS,GAAI,MACtD,IAAK,SAAU1sC,EAAKuhH,wBAAwB70E,SAAS1sC,EAAKiiH,SAASj4H,OAAS,GAAI,MAChF,IAAK,OAAQgW,EAAKuhH,wBAAwBx0E,aAAc,MACxD,IAAK,OAAQ/sC,EAAKuhH,wBAAwBr0E,aAGlDltC,EAAKuhH,wBAAwB95E,YACxBvZ,KAAK8G,EAAAA,SACL5G,UAAU0+I,MAIfnG,EAAAp9K,UAAAg+K,mBAAR,SAA2BhjD,EAAYQ,EAAiB15G,GAAxD,IAAApN,EAAA5U,KACUg+K,EAAW9iD,EAAWP,uBACtBtyE,EAAaroD,KAAK0+K,kBAAkB1+K,KAAK2W,MACzCA,EAAO0xC,EAAW1xC,KAClB6sK,EAAS7sK,EAAKuhH,wBAAwBh9F,eACtCwoJ,EAAer7H,EAAWosC,KAAKn0D,cAAc2C,WAAWA,WAAWA,WAAWA,WAC9EtI,EAAM8e,SAASiqI,EAAargL,MAAMs3B,IAAK,IAC9B,IAAX6oJ,GAAgB7oJ,EAAM,EACtB36B,KAAKm+K,WAAWxnK,GAAOqnK,EAASlkI,aAC5B,WAAM,OAAAhgC,EAAA5Z,UAAM49G,WAAUl9G,KAAAgU,EAACsmH,EAAY,CAAE75G,IAAKq6G,EAAiB95G,OAAQI,MAEvElI,EAAA5Z,UAAM49G,WAAUl9G,KAAAZ,KAACk7H,EAAY,CAAE75G,IAAKq6G,EAAiB95G,OAAQI,KAI7Ds7J,EAAAp9K,UAAAq+K,qBAAR,SAA6BrjD,EAAYQ,EAAiB15G,GAA1D,IAAApN,EAAA5U,KACUq+K,EAAWnjD,EAAWl2E,mBAItB+5H,EAHiB/+K,KAAK2W,KAAK2pB,cAAc2C,WAAWA,WAEvC/xB,wBAAwBspB,OAASx6B,KAAK2W,KAAK8uH,SAASnlG,cAAcpvB,wBAAwBspB,OACjF,EAEtB7jB,EADa3W,KAAKg/K,sBAAsBh/K,KAAK2W,MAC3BA,KACnBooK,EAIDjlK,EAAA5Z,UAAM89G,aAAYp9G,KAAAZ,KAACk7H,EAAY,CAAE75G,IAAKq6G,EAAiB95G,OAAQI,IAH/DhiB,KAAKm+K,WAAWxnK,EAAM0nK,EAASvkI,aAC3B,WAAM,OAAAhgC,EAAA5Z,UAAM89G,aAAYp9G,KAAAgU,EAACsmH,EAAY,CAAE75G,IAAKq6G,EAAiB95G,OAAQI,OAMzEs7J,EAAAp9K,UAAAs9K,oBAAR,SAA4BmG,EAAYC,GAEpC,QADIpzK,EAASmzK,EACK,OAAXnzK,GAAuC,IAApBA,EAAOq0C,UAAgB,CAC7C,GAAIr0C,EAAO++C,QAAQl6C,gBAAkBuuK,EAAUvuK,cAC3C,OAAO7E,EAEXA,EAASA,EAAOyyB,WAEpB,OAAO,MAGDq6I,EAAAp9K,UAAAq8H,kBAAV,SAA4BmC,GACxB,OAAO1+H,KAAK2W,KAAKyK,YAAY9J,KAAK,SAAAwsB,GAAW,OAAAA,EAAQnwB,QAAU+qH,IAAW56F,QAAQxD,eAE1Fg9I,GA9yB0DpkD,ICqB7C2qD,GAA2C,CACpD13H,QAASk/F,GACTy4B,WAAYC,IAGhB,SAAgBA,KACZ,OAAO,WAAM,OAAA,IAAIx2I,IAQrB,IAAAy2I,GAAA,SAAAlqK,GAqDI,SAAAkqK,EACWnhK,EACPhC,EACOqsG,EACPnlG,EACsCk8J,EACtC5jJ,EACAg1B,EACyBh3C,EACzBuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACqC7mF,EAC9B7a,EAC4CmyB,GAjBvD,IAAAjgC,EAkBIkF,EAAAlZ,KAAAZ,KACI6iB,EACAhC,EACAqsG,EACAnlG,EAC8B,mBAAvBk8J,EAAoCA,IAAuBA,EAClE5jJ,EACAg1B,EACAh3C,EACAuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACA7mF,EACA7a,EACAmyB,IAAuB70C,YAlCpB4U,EAAAiO,iBAAAA,EAEAjO,EAAAs4G,mBAAAA,EAE+Bt4G,EAAAqvK,mBAAAA,EAGbrvK,EAAAyJ,SAAAA,EAOYzJ,EAAA2oB,eAAAA,EAC9B3oB,EAAA8N,eAAAA,EAC4C9N,EAAAigC,uBAAAA,EA5DhDjgC,EAAAsvK,eAAgB,EAkCbtvK,EAAAuvK,iBAAkB,EA6CxBvvK,EAAKipK,SAAQ,IA6ErB,OAtK+D7lK,EAAAA,EAAAA,GAe3DxY,OAAAgC,eAAIwiL,EAAA9jL,UAAA,sBAAmB,KAAvB,WAII,OAHkC,OAA9BF,KAAK4uJ,uBACL5uJ,KAAK4uJ,qBAAuB5uJ,KAAKigB,WAAWkL,OAAO,SAACs6B,EAAKvlC,GAAQ,OAAAzE,KAAK4O,IAAIo7B,EAAKvlC,EAAIxM,QAAQ,IAExF1T,KAAK4uJ,sDAMhBpvJ,OAAAgC,eAAcwiL,EAAA9jL,UAAA,SAAM,KAApB,WACI,OAAOF,KAAKylI,SAAWzlI,KAAKylI,SAASlQ,gBAAkBv1H,KAAKu1H,iDAqEzDyuD,EAAA9jL,UAAAkkL,kBAAP,SAAyBvyJ,GAAzB,IAAAjd,EAAA5U,KACUulB,EAAU,GACKvlB,KAAK88J,aAAajrI,GAC1Bpf,QAAQ,SAACyN,OACZ+mG,EAAMryG,EAAKyvK,cAAcnkK,GAC/B+mG,EAAI3kF,kBAAkBC,gBACtBhd,EAAQ/iB,KAAKykH,EAAI5yG,gBAEf7D,EAiEd,SAASgC,EAAQjD,OACTiB,EAAS,GAEbjB,EAAIkD,QAAQ,SAAAC,GACRlC,EAAOhO,KAAKkQ,GACRA,EAAGC,WACHnC,EAASA,EAAO7N,OAAO6P,EAAQE,EAAGC,SAASC,eAGnD,OAAOpC,EA1EYgC,CAAQ+S,GACvBvlB,KAAKigB,WAAWylB,MAAMl1B,GACtBxQ,KAAKigB,WAAWwjI,kBAChBzjJ,KAAKm1J,eAGC6uB,EAAA9jL,UAAAmkL,cAAV,SAAwBnkK,GAOpB,OALIA,aAAegqG,GACTlqH,KAAKskL,yBAAyBpkK,GAE9BlgB,KAAKukL,oBAAoBrkK,IAK7B8jK,EAAA9jL,UAAAokL,yBAAV,SAAmCpkK,GAAnC,IAAAtL,EAAA5U,KACUwkL,EAAexkL,KAAKi+C,SAASva,wBAAwBwmF,IACrDjD,EAAMjnH,KAAKwrJ,QAAQtrG,gBAAgBskI,EAAc,KAAMxkL,KAAKwrJ,QAAQ7nH,UAM1E,GALAsjF,EAAI3kF,kBAAkBC,gBACtBiiJ,EAAaC,OAAOhyK,QAAQ,SAAC+tC,OACnB6wE,EAAW7wE,EAAM6wE,SACjBpK,EAAY,SAAEoK,GAAY,EAAWA,KAE3CnxG,EAAIvN,SAAShS,OAAS,EAAG,KACnB+jL,EAAc,GACpBxkK,EAAIvN,SAASF,QAAQ,SAAAuwB,OACX2hJ,EAAS/vK,EAAKyvK,cAAcrhJ,GAAO3uB,SACzCswK,EAAOjuK,OAASuwG,EAAI5yG,SACpBqwK,EAAYliL,KAAKmiL,KAEK19D,EAAY,SAAEt0G,SAAS+yB,MAAMg/I,GAC7Bz9D,EAAY,SAAEt0G,SAAS8wI,kBAGrD,OAAOx8B,GAGD+8D,EAAA9jL,UAAAqkL,oBAAV,SAA8BrkK,OACpB0kK,EAAgB5kL,KAAKi+C,SAASva,wBAAwB++E,IACtDwE,EAAMjnH,KAAKwrJ,QAAQtrG,gBAAgB0kI,EAAe,KAAM5kL,KAAKwrJ,QAAQ7nH,UAU3E,OATAihJ,EAAcH,OAAOhyK,QAAQ,SAAC+tC,OACpB6wE,EAAW7wE,EAAM6wE,SACjB,EAAWA,aAAqBzP,GAG5BqF,EAAY,SAAEoK,GAAYnxG,EAAImxG,GAAUpxH,YAFxCgnH,EAAY,SAAEoK,GAAY,EAAWA,KAM5CpK,GAGD+8D,EAAA9jL,UAAA2kL,kBAAV,SAA4BC,GACxB,OAAO9kL,KAAK69K,SAASkH,0BAA0BD,IAGzCd,EAAA9jL,UAAAy9K,aAAV,SAAuBlhK,GACnB,GAAKA,EAGL,OAAOzc,KAAK69K,SAASF,aAAalhK,6CAtLjCm1F,UAAyBf,UAEzB+Z,UAbAjrG,sCAuFAxN,EAAAA,OAAMnE,KAAA,CAACq9I,aApGZ/nH,EAAAA,kBACAyD,EAAAA,0CAsGK50B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBArGZmI,EAAAA,yBAIAvI,EAAAA,gCAHAqiB,EAAAA,uBACAvS,EAAAA,wBAkBK8mI,UANAz+C,UAImC9/F,GAAiBh+B,WAAA,CAAA,CAAAmR,KA0FpDC,EAAAA,OAAMnE,KAAA,CAAC+wB,aAvFP43G,sCAyFAznG,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,iDAnEvBllC,EAAAA,8BAGAA,EAAAA,6BAGAA,EAAAA,qCAyCA8nC,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,OAoHrEqtI,EAtKA,CAA+D14B,uBCtC/D,SAAA05B,IAAA,IAAApwK,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YACc4U,EAAAksG,gBAAsD,IAAIxwG,IAC1DsE,EAAAmsG,WACN,IAAIzwG,MAuFZ,OA1FmD0H,EAAAA,EAAAA,GAK/CgtK,EAAA9kL,UAAAghH,uBAAA,SAAuBT,GACnBzgH,KAAK8gH,gBAAgBp4F,IAAI+3F,EAAUx/G,IAAKw/G,GACxCzgH,KAAK8f,WAAW4I,IAAI+3F,EAAUx/G,IAAK,IAAIu+B,EAAAA,UAG3CwlJ,EAAA9kL,UAAAihH,oBAAA,SAAoBV,GAChBzgH,KAAK+gH,WAAWn0E,UAAO6zE,EAAUx/G,KACjCjB,KAAK8gH,gBAAgBl0E,UAAO6zE,EAAUx/G,KACtCjB,KAAK8f,WAAW8sB,UAAO6zE,EAAUx/G,MAGrC+jL,EAAA9kL,UAAAkhH,kBAAA,SAAkBngH,GACd,OAAOjB,KAAK8gH,gBAAgBhzG,IAAI7M,IAGpC+jL,EAAA9kL,UAAAy9K,aAAA,SAAalhK,OAEL9F,EADEsuK,EAAWxoK,EAEXyoK,EAAWD,EAAS3pI,QACpB6pI,EAAoBnlL,KAAK+gH,WAAWjzG,IAAIo3K,EAAS7jE,cACvD,GAAI8jE,EAAmB,KACb3E,EAAY2E,EAAkBr3K,IAAIo3K,EAASnqK,OAE7CpE,EADoB,IAApBsuK,EAAStkL,OACF6/K,EAEAA,EAAU3C,SAASF,aAAasH,GAG/C,OAAOtuK,GAGXquK,EAAA9kL,UAAAshH,cAAA,SAAcC,OACJC,EAAc,GAapB,OAZA1hH,KAAK+gH,WAAWtuG,QAAQ,SAAC2yK,GACrBA,EAAU3yK,QAAQ,SAACkE,IACf+qG,EAAYl/G,KAAKmU,GACb8qG,IACiB9qG,EAAKknK,SAASr8D,cAAcC,GACpChvG,QAAQ,SAACwJ,GACdylG,EAAYl/G,KAAKyZ,SAM1BylG,GAGXsjE,EAAA9kL,UAAAmlL,eAAA,SAAe7E,OACPzlK,EASJ,OARA/a,KAAK+gH,WAAWtuG,QAAQ,SAAC2yK,GACrBA,EAAU3yK,QAAQ,SAACkE,EAAM1V,GACjB0V,IAAS6pK,IACTzlK,EAAQ9Z,OAKb8Z,GAGXiqK,EAAA9kL,UAAAohH,kBAAA,SAAkBC,EAA4BF,EAAsB1qG,OAC5DwuK,EAAoBnlL,KAAK+gH,WAAWjzG,IAAIuzG,GACvC8jE,IACDnlL,KAAK+gH,WAAWr4F,IAAI24F,EAAc,IAAI/wG,KACtC60K,EAAoBnlL,KAAK+gH,WAAWjzG,IAAIuzG,IAE5C8jE,EAAkBz8J,IAAI64F,EAAa5qG,IAGvCquK,EAAA9kL,UAAA6kL,0BAAA,SAA0B1jE,OAChB8jE,EAAoBnlL,KAAK+gH,WAAWjzG,IAAIuzG,GACxC1uG,EAAW,GAMjB,OALIwyK,GACAA,EAAkB1yK,QAAQ,SAACuwB,GACvBrwB,EAASnQ,KAAKwgC,KAGfrwB,GAGXqyK,EAAA9kL,UAAAyhH,iBAAA,SAAiBN,EAActmG,GAE3B,OAD0B/a,KAAK+gH,WAAWjzG,IAAIuzG,GACrBvzG,IAAIiN,IAErCiqK,GA1FmDrlK,mBCyL/C,SAAA2lK,EACWziK,EACPhC,EACOqsG,EACPnlG,EACsCk8J,EACtC5jJ,EACAg1B,EACyBh3C,EACzBuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACqC7mF,EAC9B7a,EAC4CmyB,EAC5C2rE,GAlBX,IAAA5rG,EAmBIkF,EAAAlZ,KAAAZ,KACI6iB,EACAhC,EACAqsG,EACAnlG,EAC8B,mBAAvBk8J,EAAoCA,IAAuBA,EAClE5jJ,EACAg1B,EACAh3C,EACAuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACA7mF,EACA7a,EACAmyB,IACH70C,YApCM4U,EAAAiO,iBAAAA,EAEAjO,EAAAs4G,mBAAAA,EAE+Bt4G,EAAAqvK,mBAAAA,EAGbrvK,EAAAyJ,SAAAA,EAOYzJ,EAAA2oB,eAAAA,EAC9B3oB,EAAA8N,eAAAA,EAC4C9N,EAAAigC,uBAAAA,EAC5CjgC,EAAA4rG,aAAAA,EAjGJ5rG,EAAAjC,SAAW,IAAIw3G,EAAAA,UAMfv1G,EAAA2wK,aAAe,IAAIp7D,EAAAA,UAMnBv1G,EAAA4wK,eAAiB,IAAIr8J,EAAAA,aAcrBvU,EAAA6wK,cAAgB,IAAIt8J,EAAAA,aA0CpBvU,EAAA8wK,eAAiB,GAKjB9wK,EAAA6wH,SAAW,KAGV7wH,EAAA+wK,UAAY,kBACZ/wK,EAAAgxK,QAAS,EAwCbhxK,EAAKipK,SAAQ,IAwIrB,OAtT2C7lK,EAAAA,EAAAA,GA2BvCxY,OAAAgC,eACI8jL,EAAAplL,UAAA,iBAAc,KAqBlB,WACI,OAAOF,KAAKmkL,qBAvBhB,SACmBhiL,GACfnC,KAAKmkL,gBAAkBhiL,EACvBnC,KAAKwgH,aAAagB,gBAAgB/uG,QAAQ,SAACkE,GACnC0H,SAASQ,KAAK0hB,SAAS5pB,EAAK2pB,gBAE5B3pB,EAAKkvK,eAAiB1jL,EACtBwU,EAAKgsC,gBAGLhsC,EAAKmvK,gBAAiB,qCAmDlCtmL,OAAAgC,eAAI8jL,EAAAplL,UAAA,KAAE,KAAN,eACU6lL,EAAM/lL,KAAKgmL,SAAWhmL,KAAKgmL,SAASjgH,UAAU/lE,KAAKgmL,SAAS10K,QAAQtR,KAAK2lL,WAAa3lL,KAAK2lL,UAAUhlL,QAAU,IAAM,GAC3H,OAAOX,KAAK2lL,UAAYI,EAAO/lL,KAAKiB,qCAMxCzB,OAAAgC,eAAI8jL,EAAAplL,UAAA,WAAQ,KAAZ,WACG,OAAOF,KAAKimL,aAAejmL,KAAKimL,aAAat4K,GAAK,sCAMrDnO,OAAAgC,eAAI8jL,EAAAplL,UAAA,QAAK,KAAT,WAGI,QAFI4lH,EAAM9lH,KAAKimL,aACXlgE,EAAM,EACHD,GACHC,IACAD,EAAMA,EAAImgE,aAEd,OAAOlgE,EAAM,mCAOjBvmH,OAAAgC,eAAI8jL,EAAAplL,UAAA,eAAY,KAAhB,eACUwhL,EAAQ1hL,KAAKwgH,aAAagB,gBAChC,OAAOkgE,EAAM/gL,OAAS+gL,EAAM,GAAG5lK,aAAe9b,KAAK8rC,+CA6DvDw5I,EAAAplL,UAAA2uC,SAAA,WACI7uC,KAAKylI,SAAWzlI,KAAK69K,SAASlnK,KAC9B3W,KAAKwgH,aAAaC,UAAYzgH,MAMlCslL,EAAAplL,UAAA0yC,UAAA,aAMA0yI,EAAAplL,UAAAq4D,mBAAA,WAAA,IAAA3jD,EAAA5U,KACIA,KAAKkmL,iBACLlmL,KAAK2S,SAAS8wI,kBACdzjJ,KAAK2S,SAASsvC,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WACzCwF,UAAU,SAACwH,GACR33B,EAAKsxK,iBAELtxK,EAAKiwK,kBAAkBjwK,EAAK3T,KAAKwR,QAAQ,SAAAkE,GACrC,EAAcwvK,kBAAkBvxK,EAAKjC,kBAGvCyzK,EAAgBpmL,KAAK2S,SAAS2J,IAAI,SAACu2E,GAAW,OAAAA,EAAO5yE,WAAWrN,YAChEyzK,EAAY,GAAG1jL,OAAO9B,MAAM,GAAIulL,GAChCE,EAAUtmL,KAAKigB,WAAWjG,OAAO,SAACiC,GACpC,OAAoC,IAA7BoqK,EAAU/0K,QAAQ2K,KAE7Bjc,KAAKulL,aAAa7/I,MAAM4gJ,GACxBtmL,KAAKigB,WAAWgiC,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,WAAQnwB,EAAK8rG,sBAGxE4kE,EAAAplL,UAAAgmL,eAAV,WAAA,IAAAtxK,EAAA5U,KACIA,KAAK2S,SAAS+yB,MAAM1lC,KAAK2S,SAASC,UAAUiF,MAAM,IAClD7X,KAAK2S,SAASF,QAAQ,SAAAuwB,GAClBA,EAAMijJ,aAAerxK,KAO7B0wK,EAAAplL,UAAAyhD,gBAAA,WACI3hD,KAAKwgH,aAAa9lB,SAAS16F,MACvBA,KAAKimL,aACLjmL,KAAKimL,aAAazlE,aAAaU,uBAAuBlhH,MAEtDA,KAAKylI,SAASo4C,SAAS38D,uBAAuBlhH,MAElDA,KAAKqgH,OAAQ,GAMjBilE,EAAAplL,UAAA8hD,YAAA,SAAYC,GACRjiD,KAAKwlL,eAAejjK,KAAK0/B,GACpBjiD,KAAK4lL,QACN5lL,KAAK0lL,eAAeljL,KAAKy/C,IAOjCqjI,EAAAplL,UAAAsmC,YAAA,WAAA,IAAA5xB,EAAA5U,KAEIA,KAAKu/B,SAASr9B,MAAK,GACnBlC,KAAKu/B,SAASkH,WACdzmC,KAAK8zF,YAAa,EAClB9zF,KAAKwgH,aAAaQ,MAAMhhH,KAAK2N,IACzB3N,KAAKimL,cACLjmL,KAAK6kL,kBAAkB7kL,KAAKiB,KAAKwR,QAAQ,SAAAkE,GACrC/B,EAAK2xK,eAAe5vK,GACpBA,EAAKknK,SAAS18D,oBAAoBvsG,KAEtC5U,KAAKimL,aAAazlE,aAAaW,oBAAoBnhH,QAEnDA,KAAKylI,SAASo4C,SAAS18D,oBAAoBnhH,MAC3CA,KAAKumL,eAAevmL,KAAKylI,YAIzB6/C,EAAAplL,UAAAqmL,eAAR,SAAuB5vK,GACnBA,EAAK6vK,mBAAmB/zK,QAAQ,SAACg0K,GAC7BA,EAAKnrH,MAAMugF,UAAU4qC,EAAK9/H,QAAQk8G,cAEtClsJ,EAAK6vK,mBAAmBj7I,QACxB50B,EAAKwvK,qBAMTb,EAAAplL,UAAA2oH,OAAA,aAKAy8D,EAAAplL,UAAA2zJ,oBAAA,aAEUyxB,EAAAplL,UAAAwgH,iBAAV,WAAA,IAAA9rG,EAAA5U,KACUomL,EAAgBpmL,KAAK2S,SAAS2J,IAAI,SAACu2E,GAAW,OAAAA,EAAO5yE,WAAWrN,YAChEyzK,EAAY,GAAG1jL,OAAO9B,MAAM,GAAIulL,GAChCE,EAAUtmL,KAAKigB,WAAWjG,OAAO,SAACiC,GACpC,OAAiC,IAA7BoqK,EAAU/0K,QAAQ2K,KAGlBA,EAAKwoG,aAAezwG,WACb,KAIfhU,KAAKulL,aAAa7/I,MAAM4gJ,GAEpBtmL,KAAKimL,aACLjmL,KAAKimL,aAAahmK,WAAWwjI,kBAE7BzjJ,KAAKylI,SAASxlH,WAAWwjI,kBAG7BzjJ,KAAKwgH,aAAagB,gBAAgB/uG,QAAQ,SAACkE,GACvCA,EAAKytK,kBAAkBxvK,EAAK2wK,aAAa3yK,WACpCyL,SAASQ,KAAK0hB,SAAS5pB,EAAK2pB,iBAC7B3pB,EAAKmvK,gBAAiB,0BAxTrCh0I,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/vG,SAAU,iBACVqjC,SAAU,GACV5iC,UAAW,CAAC0xG,iDAlBPjP,UAAyBf,UAOzB+Z,UAhBAjrG,sCA0KAxN,EAAAA,OAAMnE,KAAA,CAACq9I,aA1LZ/nH,EAAAA,kBAKAyD,EAAAA,0CAwLK50B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBA5LZmI,EAAAA,yBACAvI,EAAAA,gCACAqiB,EAAAA,uBACAvS,EAAAA,wBAoBK8mI,UALAz+C,UAQA9/F,GAAiBh+B,WAAA,CAAA,CAAAmR,KAyKjBC,EAAAA,OAAMnE,KAAA,CAAC+wB,aA9KP43G,sCAgLAznG,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,aAxKnBgtE,mCA4BJlyG,EAAAA,8BAcAA,EAAAA,wBA6BA29C,EAAAA,gBAAet+C,KAAA,CAACs3K,EAAuB,CAAE5uI,KAAM4uI,EAAuB94H,aAAa,0BAMnFF,EAAAA,gBAAet+C,KAAA,CAACy0G,GAAoB,CAAE/rE,KAAM+rE,GAAoBj2D,aAAa,4BAM7E7gC,EAAAA,8BAcAA,EAAAA,UAoOL25J,GAtT2CtB,ICtD3C0C,GAAA,WAgII,SAAAA,EAAmB3+J,EACR+b,EACPma,EACOrQ,GAHQ5tC,KAAA+nB,QAAAA,EACR/nB,KAAA8jC,QAAAA,EAEA9jC,KAAA4tC,IAAAA,EAlGJ5tC,KAAAuX,UAAW,EA4BXvX,KAAAshB,QAAe,GAoBfthB,KAAA6oE,SAAW,EAMX7oE,KAAA0xC,KAAO,MA6CN1xC,KAAKi+C,SAAWA,EAyE5B,OApKIz+C,OAAAgC,eAAWklL,EAAAxmL,UAAA,kBAAe,KAA1B,WACI,OAAQF,KAAKu9K,WAAWrlD,wBAAwB94E,GAAG/qC,SAASkiC,4CAiEhE/2C,OAAAgC,eAAIklL,EAAAxmL,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK+nB,QAAQpR,sCAGxBnX,OAAAgC,eACIklL,EAAAxmL,UAAA,QAAK,KADT,WAEI,OAAOF,KAAK6yF,OAAOn/E,uCAWvBlU,OAAAgC,eAAIklL,EAAAxmL,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAK8jC,QAAQxD,+CAaxBomJ,EAAAxmL,UAAA2uC,SAAA,WAAA,IAAAj6B,EAAA5U,KACIA,KAAK6yF,OAAO2yF,eAAezgJ,UAAU,SAAC4hJ,GAClC/xK,EAAKgyK,qBAAqBD,KAEd3mL,KAAK6yF,OAAO6yF,eACpBjzK,QAAQ,SAAA85B,GACZ33B,EAAKgyK,qBAAqBr6I,KAE9BvsC,KAAK6mL,MAAMnwK,OAAS1W,KAAKu9K,WACzBv9K,KAAK6mL,MAAMZ,aAAejmL,KAAK6yF,OAC/B7yF,KAAK6mL,MAAMrF,SAAYxhL,KAEvBA,KAAK8mL,qBACL9mL,KAAK6yF,OAAO4yF,cAAcljK,KAAK,CAC3B+4C,MAAOt7D,KAAK6yF,OACZwmF,SAAUr5K,KAAKshB,QAAQvG,MACvBpE,KAAM3W,KAAK6mL,SAOnBH,EAAAxmL,UAAAyhD,gBAAA,WAAA,IAAA/sC,EAAA5U,KACIA,KAAK6mL,MAAMhF,gBAAkB7hL,KAAK6yF,OAAOlgF,SACrC3S,KAAK6yF,OAAO0yF,aAAa5kL,OAAS,IAAMX,KAAK6mL,MAAM56B,cACnDjsJ,KAAK6mL,MAAMzC,kBAAkBpkL,KAAK6yF,OAAO0yF,aAAa3yK,WAE1C5S,KAAK6mL,MAAMhF,gBAAgBjvK,UACnCH,QAAQ,SAACiyC,GAAM,OAAA9vC,EAAKiyK,MAAMhJ,SAAS38D,uBAAuBx8D,KAClE1kD,KAAKu9K,WAAWM,SAASv8D,kBAAkBthH,KAAKshB,QAAQvG,MAAO/a,KAAK6yF,OAAO5xF,IAAKjB,KAAK6mL,OACrF7mL,KAAK6yF,OAAO2tB,aAAac,kBAAkBthH,KAAKshB,QAAQvG,MAAO/a,KAAK6mL,OAEpE7mL,KAAK6mL,MAAMj5I,IAAIrL,iBAGXmkJ,EAAAxmL,UAAA4mL,mBAAR,WAAA,IAAAlyK,EAAA5U,KACUkhD,EAAapc,EAAAA,UAAU9kC,KAAK6mL,MAAMtnJ,UAElCshB,EAAU7gD,KAAKi+C,SAASva,wBAAwBsuI,IAEhD+U,EAAalmI,EAAQ4jI,OAAOnoK,IAAI,SAAAkkC,GAAS,OAAAA,EAAM6wE,WACrCxwE,EAAQmmI,QAAQhtK,OAAO,SAAAlY,OAC7BmlL,EAAwBnlL,EAAEuvH,SAASx5G,MAAM,EAAG/V,EAAEuvH,SAAS//G,QAAQ,WACrE,OAAsD,IAA/Cy1K,EAAWz1K,QAAQ21K,KAEtBx0K,QAAQ,SAAAy0K,GACRtyK,EAAKiyK,MAAMK,EAAO71D,WAClBz8G,EAAKiyK,MAAMK,EAAO71D,UAAUxsF,KAAKqc,GAAYnc,UAAU,SAAC/2B,GAC/CA,IACDA,EAAO,IAEXA,EAAKstD,MAAQ1mD,EAAKiyK,MAClBjyK,EAAKi+E,OAAOq0F,EAAO71D,UAAU9uG,KAAKvU,QAO1C04K,EAAAxmL,UAAA0mL,qBAAR,SAA6B3kI,GACzB,IAAK,IAAM1V,KAAU0V,EACbA,EAAQpiD,eAAe0sC,KACvBvsC,KAAK6mL,MAAMt6I,GAAU0V,EAAQ1V,GAAQ2V,mCAvLpDpQ,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,qBACVqjC,SAAA,wRATKpyB,UATL2jB,EAAAA,kBAOAoD,EAAAA,gCATAuI,EAAAA,qDAiCCtgC,EAAAA,4BAcAA,EAAAA,uBAWAA,EAAAA,qBAWAA,EAAAA,qBAGA8nC,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,sBAM7BxH,EAAAA,YAAWnhC,KAAA,CAAC,+BAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4BAyBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sBA8FjB04K,EA7MA,GC8CIl1I,GAAU,iBAyQV,SAAA21I,EACWtkK,EACPhC,EACOqsG,EACPnlG,EACsCk8J,EACtC5jJ,EACAg1B,EACyBh3C,EACzBuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACqC7mF,EAC9B7a,EAC4CmyB,GAjBvD,IAAAjgC,EAkBIkF,EAAAlZ,KAAAZ,KACI6iB,EACAhC,EACAqsG,EACAnlG,EAC8B,mBAAvBk8J,EAAoCA,IAAuBA,EAClE5jJ,EACAg1B,EACAh3C,EACAuvB,EACAqQ,EACAstG,EACAC,EACAp4D,EACAgxB,EACA7mF,EACA7a,EACAmyB,IAAuB70C,YAlCpB4U,EAAAiO,iBAAAA,EAEAjO,EAAAs4G,mBAAAA,EAE+Bt4G,EAAAqvK,mBAAAA,EAGbrvK,EAAAyJ,SAAAA,EAOYzJ,EAAA2oB,eAAAA,EAC9B3oB,EAAA8N,eAAAA,EAC4C9N,EAAAigC,uBAAAA,EAnKhDjgC,EAAAwyK,wBAA0B,IAAIj+J,EAAAA,aAuH9BvU,EAAAyyK,gBAAkB,GAKlBzyK,EAAA0yK,iBAAmB,KAKnB1yK,EAAAkxK,gBAAiB,EAKjBlxK,EAAA8B,OAAS,KAER9B,EAAA2yK,mBAAqB,GAErB3yK,EAAAwpF,cAAgB,KAChBxpF,EAAA4yK,KAAO,yBAAyBh2I,KAChC58B,EAAA4xK,mBAAoC,IAAIl2K,IACxCsE,EAAA6mB,UAAY,EACZ7mB,EAAA0mB,WAAa,EAwCjB1mB,EAAKipK,SAAQ,IAkerB,OAxvBkD7lK,EAAAA,EAAAA,GAU9CxY,OAAAgC,eAEW2lL,EAAAjnL,UAAA,KAAE,KAFb,WAGI,OAAOF,KAAKwnL,sCAUhBhoL,OAAAgC,eACW2lL,EAAAjnL,UAAA,OAAI,KAqBf,WACI,OAAOF,KAAK6rB,WAvBhB,SACgB1pB,GACZnC,KAAK6rB,MAAQ1pB,GAAS,GACtBnC,KAAK0iB,eAAeC,oBAChB3iB,KAAKg0J,iBACLh0J,KAAKk0J,eACLl0J,KAAK6oH,UAET7oH,KAAK4tC,IAAI+U,gBACL3iD,KAAK0W,QAA2B,OAAhB1W,KAAKmN,SAAiD,IAA9BnN,KAAKmN,OAAOmE,QAAQ,MAE5DtR,KAAKmnB,eAAc,oCAsC3B3nB,OAAAgC,eACW2lL,EAAAjnL,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAKunL,wBAEhB,SAA6BjuK,GAA7B,IAAA1E,EAAA5U,KACQA,KAAKunL,qBAAuBjuK,GAC5BtZ,KAAKonL,wBAAwB7kK,KAAKjJ,GAElCtZ,KAAKw3K,iBACLl+J,EAAMA,EAAIU,OAAO,SAAAiC,GAEb,OADYrH,EAAKmH,WAAanH,EAAKJ,KAAK8C,KAAK,SAAAwF,GAAK,OAAAA,EAAElI,EAAKmH,cAAgBE,EAAKlB,QAASkB,EAAKlB,OACjFnG,EAAK4iK,mBAGxBx3K,KAAKunL,mBAAqBjuK,EACtBtZ,KAAK0W,QACL1W,KAAKmnB,eAAc,oCAoB3B3nB,OAAAgC,eAAW2lL,EAAAjnL,UAAA,eAAY,KAavB,WACI,OAAOF,KAAKo+F,mBAdhB,SAAwBj8F,GACpBnC,KAAKo+F,cAAgBj8F,mCAwBzB3C,OAAAgC,eACI2lL,EAAAjnL,UAAA,iBAAc,KAmBlB,WACI,OAAOF,KAAKmkL,qBArBhB,SACmBhiL,GADnB,IAAAyS,EAAA5U,KAEIA,KAAKmkL,gBAAkBhiL,EACnBA,GAASnC,KAAKwU,KACdxU,KAAKynL,kBAAoBznL,KAAKwU,KAAK8H,IAAI,SAACnD,GACpC,MAAO,CAAE4B,MAAOnG,EAAKmH,WAAa5C,EAAIvE,EAAKmH,YAAc5C,KAEtDnZ,KAAKwU,OACZxU,KAAKynL,kBAAoB,qCAwBjCjoL,OAAAgC,eAAW2lL,EAAAjnL,UAAA,aAAU,KAArB,WACI,OAAKF,KAAK0W,OAGH1W,KAAK0W,OAAOmnK,SAASwH,eAAerlL,MAFhC,sCAyCfR,OAAAgC,eAAI2lL,EAAAjnL,UAAA,wBAAqB,KAAzB,WACI,QAASF,KAAKqnL,gBAAgB1mL,wCA4ElCwmL,EAAAjnL,UAAA2uC,SAAA,WACI7uC,KAAK8rC,cAAgB9rC,KAAKimL,aAAejmL,KAAKimL,aAAanqK,aAAe9b,KAAK8rC,cAC/EhyB,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,OAGXmnL,EAAAjnL,UAAA0yC,UAAP,WACQ5yC,KAAK0rJ,qBAAuB1rJ,KAAKqgH,OACjCrgH,KAAKuhD,cAETznC,EAAA5Z,UAAM0yC,UAAShyC,KAAAZ,OAMnBmnL,EAAAjnL,UAAAyhD,gBAAA,WAAA,IAAA/sC,EAAA5U,KACI8Z,EAAA5Z,UAAMyhD,gBAAe/gD,KAAAZ,MACrBA,KAAKk4H,wBAAwB54E,YAAY9a,iBAAiB,SAAUxkC,KAAK0nL,yBAAyBzmI,KAAKjhD,OACvGA,KAAKq5H,gBAAgB/5E,YAAY9a,iBAAiB,SAAUxkC,KAAK2nL,2BAA2B1mI,KAAKjhD,OAE7FA,KAAK6lL,gBAAkB7lL,KAAKwU,MAAQxU,KAAKynL,kBAAkB9mL,SAAWX,KAAKwU,KAAK7T,SAChFX,KAAKynL,kBAAoBznL,KAAKwU,KAAK8H,IAAI,SAACnD,GACpC,MAAO,CAAE4B,MAAOnG,EAAKmH,WAAa5C,EAAIvE,EAAKmH,YAAc5C,KAE7DnZ,KAAK4tC,IAAIrL,iBAGbviC,KAAKk4H,wBAAwB15E,sBAAsB3Z,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,SAAC1lB,OACnFiC,EAAUjC,EAAKsnC,QAAQ/I,UAC7B,GAAIhpC,EAAKmpK,kBAAkBz8J,GAAU,KAC3BsmK,EAAahzK,EAAK4xK,mBAAmB14K,IAAIwT,EAAQvG,OACvD,GAAI6sK,EACmBA,EAAWtsH,MACnBq/E,kBAAkBl9G,OAAO,MAK5Cz9B,KAAK0W,SACL1W,KAAKo0C,gBAAkBp0C,KAAKylI,SAASrxF,gBACrCp0C,KAAKylI,SAASxxF,iBAAiBpP,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAAWwF,UAAU,WACpEnwB,EAAKw/B,gBAAkBx/B,EAAK6wH,SAASrxF,gBACrCx/B,EAAKuS,eAAc,GACnBvS,EAAKg5B,IAAI+U,iBAEb3iD,KAAKqnL,gBAAkBrnL,KAAKimL,aAAatzK,SAAS2J,IAAI,SAACL,GAAS,OAAAA,EAAKhb,OAGzEjB,KAAKsyJ,8BAAgCtyJ,KAAKimL,aACtCjmL,KAAKimL,aAAa3zB,8BAClBtyJ,KAAKsyJ,8BAETtyJ,KAAKuyJ,uBAAyBvyJ,KAAKimL,aAC/BjmL,KAAKimL,aAAa1zB,uBAClBvyJ,KAAKuyJ,uBAETvyJ,KAAKwyJ,sBAAwBxyJ,KAAKimL,aAC9BjmL,KAAKimL,aAAazzB,sBAClBxyJ,KAAKwyJ,sBACTxyJ,KAAK6nL,0BAA4B7nL,KAAKimL,aAClCjmL,KAAKimL,aAAa4B,0BAClB7nL,KAAK6nL,0BACT7nL,KAAKq4H,6BAAgCr4H,KAAKylI,SAASpN,6BACnDr4H,KAAKu4H,8BAAkCv4H,KAAKylI,SAASlN,8BACrDv4H,KAAKgtJ,gCAAkChtJ,KAAKylI,SAASunB,gCACrDhtJ,KAAK+sJ,8BAAgC/sJ,KAAKylI,SAASsnB,8BACnD/sJ,KAAKw3K,eAAiBx3K,KAAKimL,cAC1BjmL,KAAKimL,aAAazO,gBAClBx3K,KAAKylI,SAAS+xC,eACdx3K,KAAKkkL,cAAgBlkL,KAAKimL,aAC1BjmL,KAAKimL,aAAa/B,cAAgBlkL,KAAKylI,SAASy+C,eAG7CiD,EAAAjnL,UAAAqhD,YAAR,WACQljC,SAASQ,KAAK0hB,SAASvgC,KAAKsgC,gBAAkBtgC,KAAKy7J,iBACnDz7J,KAAK6oH,SAEL7oH,KAAK69K,SAASr8D,eAAc,GAAO/uG,QAAQ,SAACkE,GACxCA,EAAK4qC,kBAKP4lI,EAAAjnL,UAAAg6J,gBAAV,SAA0BF,GACtB,SAAIh6J,KAAK2zJ,kBAAmB3zJ,KAAK0W,SAG1BoD,EAAA5Z,UAAMg6J,gBAAet5J,KAAAZ,KAACg6J,IAGjCx6J,OAAAgC,eAAW2lL,EAAAjnL,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAKylI,SAASktB,kDAMzBw0B,EAAAjnL,UAAAq4D,mBAAA,WAAA,IAAA3jD,EAAA5U,KACIA,KAAK0gH,kBAAiB,GACtB1gH,KAAKqnL,gBAAkBrnL,KAAK0W,OAC5B1W,KAAKimL,aAAatzK,SAAS2J,IAAI,SAACL,GAAS,OAAAA,EAAKhb,MAC9CjB,KAAKqnL,gBAAkBrnL,KAAK6hL,gBAAgBvlK,IAAI,SAACL,GAAS,OAAAA,EAAKhb,MAC/DjB,KAAK6hL,gBAAgBp+B,kBACrBzjJ,KAAK6hL,gBAAgB5/H,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKu/B,WAChDwF,UAAU,WAAM,OAAAnwB,EAAKuxK,sBACtBrsK,EAAA5Z,UAAMq4D,mBAAkB33D,KAAAZ,OAMrBmnL,EAAAjnL,UAAAimL,kBAAP,WACQnmL,KAAK0W,OACL1W,KAAKqnL,gBAAkBrnL,KAAKimL,aAAatzK,SAASqH,OAAO,SAAAiC,GAAQ,OAAC,EAAc63E,aAAYx3E,IAAI,SAACL,GAAS,OAAAA,EAAKhb,MAE/GjB,KAAKqnL,gBAAkBrnL,KAAK6hL,gBAAgB7nK,OAAO,SAAAiC,GAAQ,OAAC,EAAc63E,aAAYx3E,IAAI,SAACL,GAAS,OAAAA,EAAKhb,MAEvGjB,KAAQ,IAAS+2C,WACnB/2C,KAAK4tC,IAAIrL,iBAIP4kJ,EAAAjnL,UAAAm0J,iBAAV,SAA2B9nH,GAA3B,IAAA33B,EAAA5U,KACIA,KAAK0gH,uBACC7uF,EAAO0a,EAAOvyB,OAAO,SAAA7Y,GAAK,OAAAA,EAAE4mB,QAAQpR,OAAS/B,IAC/Cid,EAAKlxB,OAAS,IACdX,KAAKigB,WAAWylB,MAAM7T,GACtB/X,EAAA5Z,UAAMm0J,iBAAgBzzJ,KAAAZ,KAACA,KAAKigB,cAI5BknK,EAAAjnL,UAAAwgH,iBAAR,SAAyBonE,QAAA,IAAAA,IAAAA,GAAA,OAEf1B,GADepmL,KAAK0W,OAAS1W,KAAK6hL,gBAAkB7hL,KAAK+nL,eAC5BzrK,IAAI,SAACu2E,GACpC,OAAOA,EAAO5yE,WAAWrN,YAEvByzK,EAAY,GAAG1jL,OAAO9B,MAAM,GAAIulL,GAChC4B,EAAYhoL,KAAKigB,WAAWtf,OAClC,GAAI0lL,EAAU1lL,OAAS,EAAG,KAChB2lL,EAAUtmL,KAAKigB,WAAWjG,OAAO,SAACiC,GACpC,OAAoC,IAA7BoqK,EAAU/0K,QAAQ2K,KAE7Bjc,KAAKigB,WAAWylB,MAAM4gJ,GAClBwB,GAAkB9nL,KAAKigB,WAAWtf,SAAWqnL,GAC7ChoL,KAAK8zJ,uBAKjBqzB,EAAAjnL,UAAAsmC,YAAA,WACSxmC,KAAK0W,QACN1W,KAAK69K,SAASr8D,eAAc,GAAM/uG,QAAQ,SAACkE,GAClCA,EAAK6qK,SAAS5zI,IAAImJ,WACnBpgC,EAAK6qK,SAAS5zI,IAAI5L,YAI1BhiC,KAAK0W,QAAU1W,KAAK6iB,iBAAiB6tE,eAErC1wF,KAAKioL,2BAETnuK,EAAA5Z,UAAMsmC,YAAW5lC,KAAAZ,OAGbmnL,EAAAjnL,UAAA+nL,yBAAR,WACIjuD,EAAAA,CAACh6H,KAAKylI,UAAazlI,KAAKylI,SAASjkB,eAAc,IAAO/uG,QAAQ,SAAAkE,GAC1DA,EAAKkM,iBAAiB0oB,QACtB50B,EAAKkM,iBAAiB6tE,cAAgB,KACtC/5E,EAAK2pB,cAAcxD,UAAUjvB,OAAO,6BACpC8I,EAAK2wK,iBAAmB,KACxB3wK,EAAKi3B,IAAI+U,kBAOjBnjD,OAAAgC,eAAW2lL,EAAAjnL,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKqgB,cAA6C,IAA7BrgB,KAAKqgB,aAAa1f,OAChCX,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK4zK,2BAG9D5zK,KAAK6pI,WAAe7pI,KAAKwU,MAA4B,IAApBxU,KAAK24J,WAIlB,IAApB34J,KAAK24J,WACE34J,KAAK2zK,kBAAoB3zK,KAAK2zK,kBAAoB3zK,KAAK6zK,8BADlE,EAHW7zK,KAAK8zK,oBAAsB9zK,KAAK8zK,oBAAsB9zK,KAAK+zK,4DAanEoT,EAAAjnL,UAAA41J,uBAAP,eACQ7kJ,EAAQ6I,EAAA5Z,UAAM41J,uBAAsBl1J,KAAAZ,MAMxC,OAJIA,KAAKkoL,wBACLj3K,GAASjR,KAAKmoL,wBAAwB7nJ,cAAc84F,aAAep5H,KAAKooL,2BAGrEn3K,GAGFk2K,EAAAjnL,UAAAkoL,wBAAR,WACG,OAAQpoL,KAAKwyC,gBACT,KAAK2B,GAAeR,KAChB,OAAO,GACX,KAAKQ,GAAeP,QAChB,OAAO,GACX,QACI,OAAO,KAOZuzI,EAAAjnL,UAAAmoL,iBAAP,SAAwB/mK,GACpB,OAAOthB,KAAKsnL,mBAAqBhmK,EAAQvG,OAMtCosK,EAAAjnL,UAAAooL,qBAAP,SAA4BrnK,GACxB,OAAuC,IAAhCjhB,KAAK6hL,gBAAgBlhL,QAAgBsgB,EAAOjhB,KAAK6hL,gBAAgBl2I,MAAM1qC,MAM3EkmL,EAAAjnL,UAAA69K,kBAAP,SAAyB98J,GAErB,OAAOA,EAAO+9I,iBAAmBhrJ,WAM9BmzK,EAAAjnL,UAAAqoL,aAAP,SAAoB50K,EAAOwF,GACvB,OAAIA,EAAI6lJ,iBAAmBhrJ,UAEhBmF,EAAI4B,MAER5B,GAMJguK,EAAAjnL,UAAAq3B,WAAP,SAAkBjW,GACd,GAAIthB,KAAK+9K,kBAAkBz8J,GAAU,KAC3BsmK,EAAa5nL,KAAKwmL,mBAAmB14K,IAAIwT,EAAQvG,OACvD,OAAI6sK,EAGO,CACHhqI,UAAWt8B,EACXknK,SAJSZ,EAAWvoK,KAKpBi8C,MAJessH,EAAWtsH,MAK1B3nD,MAAO3T,KAAK44H,SAAStnH,QAAQgQ,IAK1B,CACHs8B,UAAWt8B,EACXuhJ,WAAY,aAJF7iK,KAAK+b,WAAauF,EAAQvG,MAAQ/a,KAAKwU,KAAKlD,QAAQgQ,EAAQvG,QAKtEpH,MAAO3T,KAAK44H,SAAStnH,QAAQgQ,IAIrC,MAAO,CACHs8B,UAAWt8B,EACXuhJ,WAAY,UACZlvJ,MAAO3T,KAAK44H,SAAStnH,QAAQgQ,KAQzC9hB,OAAAgC,eAAW2lL,EAAAjnL,UAAA,WAAQ,KAAnB,WAEI,QADIgiL,EAAQ,KACLA,EAASxrK,QACZwrK,EAAWA,EAASxrK,OAExB,OAAOwrK,mCAMX1iL,OAAAgC,eAAW2lL,EAAAjnL,UAAA,eAAY,KAAvB,WAEI,QADiBF,KAAKynL,kBAAkB9mL,OAAS,GAAKX,KAAKkoL,wBAC1CloL,KAAKkkL,cACXlkL,KAAKgtJ,iCAAmChtJ,KAAK+0K,yBAE7C/0K,KAAK+sJ,+BAAiC/sJ,KAAK80K,yDAQnDqS,EAAAjnL,UAAAs1J,2BAAP,WACI,OAAIx1J,KAAKimL,aACEjmL,KAAKimL,aAAazwB,6BAEtB17I,EAAA5Z,UAAMs1J,2BAA0B50J,KAAAZ,OAMjCmnL,EAAAjnL,UAAAk0J,YAAV,SAAsBx3I,EAA2C4+D,GAC7D,QAD6D,IAAAA,IAAAA,EAAA,MACzDx7E,KAAK+yG,iBAAkB,KAGjBsnE,EAAyBr6K,KAAKigB,WAAWjG,OAAO,SAACkG,GAAQ,OAACA,EAAI2lG,eAAiB3lG,EAAIs7F,oBACzFx7G,KAAKigB,WAAWylB,MAAM20I,GAE1BvgK,EAAA5Z,UAAMk0J,YAAWxzJ,KAAAZ,KAAC4c,EAAY4+D,IAQ3B2rG,EAAAjnL,UAAA6qH,wBAAP,eACQ59G,EAAS2M,EAAA5Z,UAAM6qH,wBAAuBnqH,KAAAZ,MAC1C,GAAIA,KAAK0W,OAAQ,KACP+xK,EAAazoL,KAAKylI,SAAS1a,0BAC3B29D,EAAU1oL,KAAKsgC,cAAcpvB,wBAAwBypB,IAAM36B,KAAKylI,SAASnlG,cAAcpvB,wBAAwBypB,IACrHxtB,EAASs7K,EAAaC,EAAUv7K,EAASA,EAASs7K,EAAaC,EAEnE,OAAOv7K,GAMZg6K,EAAAjnL,UAAAyoL,UAAA,aACkB3oL,KAAKynL,kBAAkB9mL,OAAS,GAAKX,KAAKkoL,wBAC1CloL,KAAKkkL,cAClBlkL,KAAKg6K,YAELh6K,KAAKi6K,eAWFkN,EAAAjnL,UAAA+5K,YAAP,WACIj6K,KAAKynL,kBAAoB,IAUtBN,EAAAjnL,UAAA85K,UAAP,WAAA,IAAAplK,EAAA5U,KACQA,KAAKwU,OACLxU,KAAKynL,kBAAoBznL,KAAKwU,KAAK8H,IAAI,SAACnD,GACpC,MAAO,CAAE4B,MAAOnG,EAAKmH,WAAa5C,EAAIvE,EAAKmH,YAAc5C,OAQ9DguK,EAAAjnL,UAAAm3K,WAAP,SAAkBp2J,GAAlB,IAAArM,EAAA5U,KASI,OAPIihB,EAAO+9I,iBAAmBhrJ,YACdhU,KAAKynL,kBAAkBnwK,KAAK,SAAAuV,GAAK,OAAAA,EAAE9R,QAAUkG,EAAOlG,UAEpD/a,KAAKynL,kBAAkBnwK,KAAK,SAAAuV,GACpC,OAAOjY,EAAKmH,WAAa8Q,EAAE9R,QAAUkG,EAAOrM,EAAKmH,YAAc8Q,EAAE9R,QAAUkG,MAGjC,IAAhCjhB,KAAK6hL,gBAAgBlhL,QAMpCwmL,EAAAjnL,UAAA0oL,mBAAP,SAA0B56K,GACtB,GAAIhO,KAAK+9K,kBAAkB/vK,EAAK24C,QAAQ/I,WAAY,KAC1C38C,EAAM+M,EAAK24C,QAAQ/I,UAAU7iC,MACnC/a,KAAKwmL,mBAAmB99J,IAAIznB,EAAK+M,KAOlCm5K,EAAAjnL,UAAA2oL,iBAAP,SAAwB76K,GAAxB,IAAA4G,EAAA5U,KACI,GAAIA,KAAK+9K,kBAAkB/vK,EAAK24C,QAAQ/I,WAAY,KAE1C38C,EAAM+M,EAAK24C,QAAQ/I,UAAU7iC,MAChB/a,KAAKwmL,mBAAmB14K,IAAI7M,GACpCq6D,MAAQttD,EAAKstD,MAExBt7D,KAAK6hL,gBAAgBpvK,QAAQ,SAACogF,OACpBi2F,EAAcl0K,EAAKipK,SAASl8D,iBAAiB9uB,EAAO5xF,IAAK+M,EAAK24C,QAAQ/I,UAAU7iC,OAClF+tK,GAAeA,EAAYhD,iBAE3BgD,EAAY3hK,eAAc,GAC1B2hK,EAAYhD,gBAAiB,KAIlB9lL,KAAKwhH,eAAc,GAC3B/uG,QAAQ,SAACkE,GACZA,EAAK8kJ,gBACL9kJ,EAAKwQ,eAAc,GAEvBxQ,EAAK+zC,2BAQVy8H,EAAAjnL,UAAAwqD,qBAAP,eACUq+H,EAAO/oL,KAAKk4H,wBAAwB54E,YACpC0pI,EAAOhpL,KAAKq5H,gBAAgB/5E,YAC9BypI,IACAA,EAAKttJ,UAAYz7B,KAAKy7B,WAEtButJ,IACAA,EAAK1tJ,WAAat7B,KAAKs7B,aAIrB6rJ,EAAAjnL,UAAAshH,cAAV,SAAwBynE,GACpB,OAAOjpL,KAAK69K,SAASr8D,cAAcynE,IAG7B9B,EAAAjnL,UAAA28J,mBAAV,SAA6BroJ,GAA7B,IAAAI,EAAA5U,KACI,OAAO8Z,EAAA5Z,UAAM28J,mBAAkBj8J,KAAAZ,KAACwU,GAAMwF,OAAO,SAACmG,GAG1C,OAAgC,KAFZvL,EAAKqxK,aAAerxK,EAAKqxK,aAAatzK,SAAWiC,EAAKitK,iBACjDvlK,IAAI,SAACL,GAAS,OAAAA,EAAKhb,MAChCqQ,QAAQ6O,MAKpBgnK,EAAAjnL,UAAAwnL,yBAAR,SAAiCp1K,GAC7BtS,KAAKy7B,UAAYnpB,EAAMtR,OAAOy6B,WAG3B0rJ,EAAAjnL,UAAAgpL,kBAAP,WACIlpL,KAAK2wJ,gBAGDw2B,EAAAjnL,UAAAynL,2BAAR,SAAmCr1K,GAC/BtS,KAAKs7B,WAAahpB,EAAMtR,OAAOs6B,gCAvwBtCwW,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,wBACVqjC,SAAA,yxbACA5iC,UAAW,CACPyiG,GACAf,GACA,CAAE1kD,QAASxsC,GAAoB+qE,SAAUs6F,IACzC,CAAE74H,QAASm/F,GAAsBl/F,YAAaG,EAAAA,WAAW,WAAM,OAAA46H,KAC/DxwC,GACA9X,GACAy+C,GACA3gI,GACAW,iDAzBCs0D,UAAyBf,UAEzB+Z,UAfAjrG,sCAgSAxN,EAAAA,OAAMnE,KAAA,CAACq9I,aAjTZ/nH,EAAAA,kBACAyD,EAAAA,0CAmTK50B,EAAAA,OAAMnE,KAAA,CAAC84B,EAAAA,mBAlTZmI,EAAAA,yBAIAvI,EAAAA,gCAHAqiB,EAAAA,uBACAvS,EAAAA,wBAqBK8mI,UAJAz+C,UAUA9/F,GAAiBh+B,WAAA,CAAA,CAAAmR,KA4RjBC,EAAAA,OAAMnE,KAAA,CAAC+wB,aAjSP43G,sCAmSAznG,EAAAA,UAAQ,CAAAh9B,KAAIC,EAAAA,OAAMnE,KAAA,CAAC6lC,qCAzPvB1E,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAYAA,EAAAA,iCAiDAA,EAAAA,uCAuBAgd,EAAAA,+BAsCAhd,EAAAA,+BA0CA29C,EAAAA,gBAAet+C,KAAA,CAACs3K,GAAuB,CAAE5uI,KAAM4uI,GAAuB94H,aAAa,2BAMnFF,EAAAA,gBAAet+C,KAAA,CAACs3K,GAAuB,CAAE5uI,KAAM4uI,GAAuB94H,aAAa,wCAGnF/V,EAAAA,UAASzoC,KAAA,CAAC,+BAAgC,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,2BAGvEF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,qCAGhEF,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,6BAMjEinC,EAAAA,aAAY5vE,KAAA,CAAC0sI,GAA4B,CAAEhkG,KAAMgkG,+BAMjD98D,EAAAA,aAAY5vE,KAAA,CAAC04K,GAA0B,CAAEhwI,KAAMgwI,QA8iBpDS,GAxvBkDnD,mBC/C9C,SAAAmF,EACctmK,EACAhC,EACHkH,EAEA6lB,EACCw7I,EACE/zH,EACV2kD,EACU/mB,GATd,IAAAr+E,EAWQkF,EAAAlZ,KAAAZ,KAAM6iB,EAAkBhC,EAAakH,EAAS6lB,EAAKw7I,EAAU/zH,EAAM2kD,EAAc/mB,IAAajzF,YAVxF4U,EAAAiO,iBAAAA,EACAjO,EAAAiM,YAAAA,EACHjM,EAAAmT,QAAAA,EAEAnT,EAAAg5B,IAAAA,EACCh5B,EAAAw0K,SAAAA,EACEx0K,EAAAygD,KAAAA,EAEAzgD,EAAAq+E,aAAAA,IAgGlB,OA9GsDj7E,EAAAA,EAAAA,GAoBlDmxK,EAAAjpL,UAAA2uC,SAAA,WACI/0B,EAAA5Z,UAAM2uC,SAAQjuC,KAAAZ,MACdA,KAAKqpL,UAAYrpL,KAAKspL,gBAGlBH,EAAAjpL,UAAAopL,aAAR,WAEI,QADIpH,EAAWliL,KAAK2W,KACburK,EAASxrK,QACZwrK,EAAWA,EAASxrK,OAExB,OAAOwrK,GAIXiH,EAAAjpL,UAAAqpL,oBAAA,WACIvvD,EAAAA,CAACh6H,KAAKqpL,WAAcrpL,KAAKqpL,UAAU7nE,eAAc,IAAO/uG,QAAQ,SAAAkE,GAC5DA,EAAKkM,iBAAiB0oB,QACtB50B,EAAKkM,iBAAiB6tE,cAAgB,KACtC/5E,EAAK2pB,cAAcxD,UAAUjvB,OAAO,6BACpC8I,EAAK2wK,iBAAmB,KACxB3wK,EAAKi3B,IAAI+U,kBASjBwmI,EAAAjpL,UAAA0uD,QADA,SACQt8C,GACJtS,KAAKupL,0BAGD/I,EAFEgJ,EAAiBxpL,KAAK2W,KAAK2pB,cAC7Bi9I,EAAav9K,KAAK2W,KAQtB,IALI3W,KAAKqpL,UAAU17K,KAAO67K,EAAe77K,IACrC67K,EAAe1sJ,UAAUpvB,IAAI,6BAI1B1N,KAAKqpL,UAAU17K,KAAO4vK,EAAW5vK,IAAI,CACxC6yK,EAAYjD,MAGNh8D,GAFNg8D,EAAaA,EAAW7mK,QAEOmnK,SAASwH,eAAe7E,GACvDjD,EAAW+J,iBAAmB/lE,EAElCznG,EAAA5Z,UAAM0uD,QAAOhuD,KAAAZ,KAACsS,IASlB62K,EAAAjpL,UAAA88D,cADA,SACc1qD,GADd,IAAAsC,EAAA5U,KAEUiB,EAAMqR,EAAMrR,IAAIoU,cACtB,IAAI/C,EAAMooE,QAAW16E,KAAKqhB,IAAIqhF,MAoB9B5oF,EAAA5Z,UAAM88D,cAAap8D,KAAAZ,KAACsS,OApBpB,KACUqE,EAAO3W,KAAK+nB,QAAQpR,KACpBpI,EAAQvO,KAAK+nB,QAAQpR,KAAK8wK,kBAC1B5sG,EAAW76E,KAAKqhB,IAAI9J,WAAqB,SAARtW,GAA0B,cAARA,GAA+B,OAARA,GAAwB,YAARA,GAC1F05E,GAAU36E,KAAKqhB,IAAI9J,WAAqB,UAARtW,GAA2B,eAARA,GAAgC,SAARA,GAA0B,cAARA,GASnG,GARI45E,EACAlkE,EAAK8wK,kBAAoBl5K,EAAMyL,OAAO,SAAA6S,GAClC,OAAOA,EAAE9R,QAAUnG,EAAKyM,IAAItG,QAEzB4/D,IACPpsE,EAAM/L,KAAK,CAAEuY,MAAO/a,KAAKqhB,IAAItG,QAC7BpE,EAAK8wK,kBAAiB/kL,EAAO6L,IAE7BosE,GAAUE,EAAU,KACd9/D,EAAQ/a,KAAK4wG,OAAO71F,MAC1BpE,EAAKi3B,IAAIrL,gBACTviC,KAAKypL,mBAAmB1uK,MAO1BouK,EAAAjpL,UAAAupL,mBAAV,SAA6B1uK,GAA7B,IAAAnG,EAAA5U,KACIu8C,sBAAsB,eAEZv7B,EAAOpM,EAAKmT,QAAQrG,gBAAgB3G,EAAOnG,EAAKgN,OAAOzB,OACzDa,GACAA,EAAKsf,cAAciT,+BAjHlCzB,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,6BACVqjC,SAAA,k7DACA5iC,UAAW,CAACqoG,iDATP5F,UAAyBf,UALzBlxF,UACAsvB,EAAAA,yBAAmB3L,EAAAA,kBACDyD,EAAAA,cAIlBywE,UACA9lG,uCAyDJ9C,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,kCA2BvBY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAmC9Bm7K,GA9GsDpvE,mBCFtD,SAAA2vE,IAAA,IAAA90K,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAgDW4U,EAAAi0D,SAAW,EA6DXj0D,EAAAu9C,OAAS,WACZv9C,EAAK+B,KAAKwmJ,WAAW,CAACvoJ,EAAKmG,SAOxBnG,EAAA+0K,SAAW,WACd/0K,EAAK+B,KAAKymJ,aAAa,CAACxoJ,EAAKmG,WA8BrC,OA7IiD/C,EAAAA,EAAAA,GAe7CxY,OAAAgC,eAAIkoL,EAAAxpL,UAAA,YAAS,KAAb,WACI,OAAOF,KAAK2T,MAAQ3T,KAAK2W,KAAKwE,KAAOnb,KAAK2W,KAAK2Q,yCAiCnD9nB,OAAAgC,eACWkoL,EAAAxpL,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK2W,KAAK0gK,WAAWr3K,KAAKshB,0CAGrC9hB,OAAAgC,eAAWkoL,EAAAxpL,UAAA,cAAW,KAAtB,WACI,QAAUF,KAAK2W,KAAK0wK,gBAAgB1mL,wCAMxCnB,OAAAgC,eACWkoL,EAAAxpL,UAAA,cAAW,KADtB,WAEI,OAAOF,KAAK2W,MAAQ3W,KAAK2W,KAAK2wK,mBAAqBtnL,KAAK+a,uCAMtD2uK,EAAAxpL,UAAA0pL,cAAP,SAAqBt3K,GAChBA,EAAMmyB,kBACNzkC,KAAK+N,UASF27K,EAAAxpL,UAAA6N,OAAP,WAAA,IAAA6G,EAAA5U,KACI,IAAIA,KAAK0iG,MAAT,KAGM/rF,EAAO3W,KAAK+nB,QAAQpR,KAC1B3W,KAAKklB,QAAQvO,EAAK8uH,cACZl3H,EAAQvO,KAAK+nB,QAAQpR,KAAK8wK,kBAC3BznL,KAAKuX,SAINZ,EAAK8wK,kBAAoBl5K,EAAMyL,OAAO,SAAA6S,GAClC,OAAOA,EAAE9R,QAAUnG,EAAKmG,SAJ5BxM,EAAM/L,KAAK,CAAEuY,MAAO/a,KAAK+a,QACzBpE,EAAK8wK,kBAAiB/kL,EAAO6L,IAMjCoI,EAAKi3B,IAAIrL,kBAsBb/iC,OAAAgC,eAAWkoL,EAAAxpL,UAAA,eAAY,KAAvB,eACQ2pL,GAAa,EAIjB,OAHI7pL,KAAK2W,KAAK6gK,iBACVqS,EAAa7pL,KAAKshB,QAAQthB,KAAK2W,KAAK6gK,iBAEnCqS,EAGD7pL,KAAKuX,SACEvX,KAAK2W,KAAK0hH,8BAAgCr4H,KAAK80K,wBAE/C90K,KAAK2W,KAAK4hH,+BAAiCv4H,KAAK+0K,yBALhD/0K,KAAK8pL,sDASZJ,EAAAxpL,UAAAglB,QAAR,SAAgBvO,GACRA,EAAKkK,YAAYo7F,YACjBtlG,EAAKuO,UAETvO,EAAKknK,SAASr8D,eAAc,GAAM/uG,QAAQ,SAAA2jK,GAClCA,EAAEv1J,YAAYo7F,YAClBm6D,EAAElxJ,iCAjJb4sB,EAAAA,UAAS9jC,KAAA,CAAC,CACPuwG,gBAAiBC,EAAAA,wBAAwBC,OACzC/oB,qBAAqB,EACrBhnF,SAAU,4BACVqjC,SAAA,g2IACA5iC,UAAW,CAAC,CAAEg9C,QAASuyD,GAAiBtyD,YAAaG,EAAAA,WAAW,WAAM,OAAAm9H,yCAWrE9rG,EAAAA,aAAY5vE,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAA48H,KAAmC,CAAEzyI,KAAMyyI,uBAGzE1yI,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE0oC,KAAMpT,EAAAA,WAAYqT,UAAQ,qCAUnDF,EAAAA,UAASzoC,KAAA,CAAC,0BAA2B,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,kCAMlEF,EAAAA,UAASzoC,KAAA,CAAC,uBAAwB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,sCAM/DF,EAAAA,UAASzoC,KAAA,CAAC,2BAA4B,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,sBAMlExH,EAAAA,YAAWnhC,KAAA,CAAC,mCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,qDAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sCAgFjB07K,GA7IiDhrE,ICbjDqrE,GAAA,WAMI,SAAAA,EAAoBhiK,GAAA/nB,KAAA+nB,QAAAA,EAmCxB,OAjCWgiK,EAAA7pL,UAAAsE,UAAP,SACIoY,EACArO,EACAZ,EACAoO,EACAiuK,EACA7hK,GAEA,QANA,IAAA5Z,IAAAA,EAAA,IAMyB,IAArBy7K,EAAUrpL,OACV,OAAOic,MAELjG,EAAqC3W,KAAK+nB,QAAQpR,KAGxD,OAFe3W,KAAKiqL,aAAatzK,EAAMvH,GAAWwN,GAAarO,EAAOwN,EAAYiuK,IAK/ED,EAAA7pL,UAAA+pL,aAAP,SAAuBtzK,EAAMnC,EAAWjG,EAAOwN,EAAYiuK,OACjDx5K,EAAS,GAaf,OAXAgE,EAAK/B,QAAQ,SAACoa,GACVrc,EAAOhO,KAAKqqB,OACNmyI,EAAiB,GACvBgrB,EAAUv3K,QAAQ,SAAC0nK,OACTtC,EAAYhrJ,EAAEstJ,GAAYttJ,EAAEstJ,GAAY,KAC9Cnb,EAAemb,GAAYtC,IAE3BlhK,EAAK0gK,WAAWxqJ,IAChBrc,EAAOhO,KAAK,CAAEuY,MAAOgB,EAAa8Q,EAAE9Q,GAAc8Q,EAAGmyI,eAAgBA,MAGtExuJ,uBAvCdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,mBACN4I,MAAM,+CATDjJ,MAgDToqK,EAzCA,GA8CAG,GAAA,WAMI,SAAAA,EAAoBniK,GAAA/nB,KAAA+nB,QAAAA,EAiBxB,OAfWmiK,EAAAhqL,UAAAsE,UAAP,SAAiBoY,EAAmBzB,EAAUmM,EAAc3Z,EAAYwa,GAEpE,QAFgC,IAAAhN,IAAAA,EAAA,QAAU,IAAAmM,IAAAA,EAAA,KAErCtnB,KAAK+nB,QAAQpR,KAAKwO,OACnB,OAAOvI,MAGLrO,EAAQ,CACVoF,MAAOwH,EACPC,eAAgBkM,GAGd9W,EAAgBgK,GAASW,KAAK/L,GAAWwN,GAAarO,GAE5D,OADAvO,KAAK+nB,QAAQpR,KAAKy/I,YAAc7nJ,EACzBiC,uBArBdmY,EAAAA,KAAI3a,KAAA,CAAC,CACFgS,KAAM,yBACN4I,MAAM,+CAvDDjJ,MA4ETuqK,EAvBA,GCrCAC,GAAA,WAAA,SAAAA,KAiCA,2BAjCCn7K,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CACZk4K,GACAuC,GACApE,GACAoB,GACAyC,GACAY,GACAG,IAEFh7K,QAAS,CACP2nK,GACAsQ,GACAuC,GACAP,GACA7D,GACAoB,IAEFjqI,QAAS,CACPC,EAAAA,aACAo1C,EAAAA,YACAkI,GACA68E,GACA3P,IAEF/3J,UAAW,CACT0xG,IAEFv2D,gBAAiB,CACf0nH,QAIJmY,EAjCA,GCDAC,GAAA,WAAA,SAAAA,KAIsC,2BAJrC37K,EAAAA,UAAST,KAAA,CAAC,CAEPU,SAAU,sBAEwB07K,EAJtC,GAMI54I,GAAU,EAkBd64I,GAAA,WAAA,SAAAA,IAaYrqL,KAAAu7F,WAAY,EAUbv7F,KAAA2N,GAAK,cAAc6jC,KAyDTxxC,KAAAw6E,SAAW,IAAIrxD,EAAAA,aASzBnpB,KAAAsqL,QAAU,cAAcD,EAAmB74I,UActD,OArEIhyC,OAAAgC,eACW6oL,EAAAnqL,UAAA,wBAAqB,KADhC,WAEI,QAAIF,KAAKuqL,qBAAuBvqL,KAAKwqL,mBAG9BxqL,KAAKu7F,eAShB,SAAiCp5F,GAC7BnC,KAAKu7F,UAAYp5F,mCAmDdkoL,EAAAnqL,UAAAuqL,eAAP,WACIzqL,KAAKw6E,SAASj4D,KAAKviB,OAzFRqqL,EAAA74I,QAAU,sBAZ5BM,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,aACVqjC,SAAA,2eACS,mGAkBR5C,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,qCAYAA,EAAAA,gCAuBAA,EAAAA,qBAQAA,EAAAA,wBAeAgd,EAAAA,wBAQAhd,EAAAA,kCAMA09C,EAAAA,aAAYr+C,KAAA,CAACo8K,GAAwB,CAAE1zI,KAAM0zI,GAAwBzzI,UAAQ,OASlF0zI,EAvGA,GA4GAK,GAAA,WAAA,SAAAA,KAMA,2BANC17K,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACo7K,GAAoBD,IACnCl7K,QAAS,CAACm7K,GAAoBD,IAC9B3tI,QAAS,CAAC+W,GAAiBokB,GAAel7B,EAAAA,kBAG9CguI,EANA,GCrJAC,GAAA,WAEA,SAAAA,IAS4B3qL,KAAAq3E,QAAS,EAKPr3E,KAAA82B,UAAW,EAKrB92B,KAAA4qL,YAAc,+BAyBlC,OApBIprL,OAAAgC,eACImpL,EAAAzqL,UAAA,aAAU,KADd,WAEI,OAAQF,KAAKq3E,SAAWr3E,KAAK82B,0CAMjCt3B,OAAAgC,eACImpL,EAAAzqL,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKq3E,SAAWr3E,KAAK82B,0CAMhCt3B,OAAAgC,eACImpL,EAAAzqL,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK82B,8DA1CnBroB,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,kBACVsgC,SAAU,oDAOTrgC,EAAAA,MAAKX,KAAA,CAAC,4BAKNW,EAAAA,MAAKX,KAAA,CAAC,gCAUNmhC,EAAAA,YAAWnhC,KAAA,CAAC,kDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAIjB28K,EA9CA,iBAqDI,SAAAE,EAAmB94I,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2DAjD0Bo6C,EAAAA,eAuDxC+hI,mBAOI,SAAAC,EAAmB/4I,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,+DA1D0Bo6C,EAAAA,eAgExCgiI,KCvCIt5I,GAAU,EAqBdu5I,GAAA,WAqXI,SAAAA,EACgC1qJ,EACR2qJ,EAEV11H,EACF21H,EACAh4F,GANZ,IAAAr+E,EAAA5U,KACgCA,KAAAqgC,WAAAA,EACRrgC,KAAAgrL,OAAAA,EAEVhrL,KAAAs1D,SAAAA,EACFt1D,KAAAirL,cAAAA,EACAjrL,KAAAizF,aAAAA,EAzWJjzF,KAAAkrL,SAAU,EAIXlrL,KAAAi1C,UAAW,EAgBFj1C,KAAA2N,GAAK,kBAAkB6jC,KAevBxxC,KAAA08B,SAAW,OAgBX18B,KAAAmrL,gBAAiB,EAiChBnrL,KAAAorL,aAAe,IAAIjiK,EAAAA,aAgBpBnpB,KAAA+kH,KAAM,EAgBN/kH,KAAAqrL,aAAe,KAwBfrrL,KAAAiR,MAAQ,QAeRjR,KAAAsrL,UAAY,OASXtrL,KAAAurL,UAAY,IAAIpiK,EAAAA,cAAsB,GAQtCnpB,KAAAuhG,QAAU,IAAIp4E,EAAAA,aAQdnpB,KAAAwrL,OAAS,IAAIriK,EAAAA,aAQbnpB,KAAAyrL,QAAU,IAAItiK,EAAAA,aAQdnpB,KAAA+uC,OAAS,IAAI5lB,EAAAA,aA8DtBnpB,KAAA0rL,mBAAoB,EACpB1rL,KAAA2rL,YAAyE,CAAE16K,MAAO,KAAMq6K,UAAW,KAAMM,YAAa,MAEtH5rL,KAAAqoK,IAAmC,CACvCwjB,OAAQ,wBACRC,KAAM,8BACN1gF,QAAS,0BACT2gF,WAAY,+BA6BR/rL,KAAAgsL,UAAW,EAaXhsL,KAAAisL,aAAe,GAmTfjsL,KAAAksL,kBAAoB,SAACn0I,OAIrB6zI,EAHJ,GAAKh3K,EAAKq+E,aAAarhF,WAInBgD,EAAKy2K,aAAc,CAEnB,GADAO,EAAch3K,EAAKu3K,iBACfp0I,GAAOnjC,EAAK+2K,YAAYC,cAAgBA,EACxC,OAEJh3K,EAAK+2K,YAAYC,YAAcA,GAC1Bh3K,EAAKmwG,KAAO6mE,GAAeh3K,EAAKy2K,cACjCz2K,EAAKmwG,KAAM,EACXnwG,EAAK22K,UAAUhpK,MAAK,IACb3N,EAAKmwG,KAAO6mE,EAAch3K,EAAKy2K,eACtCz2K,EAAKmwG,KAAM,EACXnwG,EAAK22K,UAAUhpK,MAAK,MAKxBviB,KAAAosL,MAAQ,SAACr0I,OAOTkB,EACAozI,EANCz3K,EAAKu2K,gBAAsC,UAApBpzI,EAAI4D,cAOV,UAAlB/mC,EAAK8nB,UAELuc,GAAUlB,EAAIkB,OACdozI,EAAgBz3K,EAAKu3K,kBAAoBp0I,EAAIu0I,OAAOxvK,EAAIi7B,EAAIw0I,YAE5DtzI,EAASlB,EAAIkB,OACbozI,EAAgBt0I,EAAIu0I,OAAOxvK,EAAIi7B,EAAIw0I,WAGlC33K,EAAKm7F,QAAU92D,EAAS,GAExBA,EAAS,GAAKozI,EAAgBz3K,EAAK43K,cACpC53K,EAAK7G,WAIL/N,KAAAysL,SAAW,SAAC10I,GAChB,GAAKnjC,EAAKu2K,iBAAkBv2K,EAAKmwG,KAA2B,UAApBhtE,EAAI4D,YAA5C,KAGM0wI,EAAkC,UAAlBz3K,EAAK8nB,SAAuB9nB,EAAKu3K,kBAAoBp0I,EAAIu0I,OAAOxvK,EAAIi7B,EAAIw0I,UACxFx0I,EAAIu0I,OAAOxvK,EAAIi7B,EAAIw0I,UAGrB33K,EAAKm7F,QAAWs8E,EAAgBz3K,EAAK43K,eACrC53K,EAAKo3K,UAAW,EAChBp3K,EAAK83K,eAAiB93K,EAAK+3K,kBAAkB/3K,EAAKm7F,QAClDn7F,EAAKg4K,UAAYh4K,EAAK+3K,iBAAiB/3K,EAAKm7F,QAE5Cn7F,EAAK0gD,SAASu3H,gBAAgBj4K,EAAKw2F,QAAS,WAAW,GACvDx2F,EAAK0gD,SAASu3H,gBAAgBj4K,EAAKi3K,OAAQ,WAAW,MAItD7rL,KAAA0pF,IAAM,SAAC3xC,GAIX,GAAKnjC,EAAKo3K,SAAV,KAMIc,EACAC,EACAC,EALEtyJ,EAAmC,UAAlB9lB,EAAK8nB,SAEtBuc,EAASve,GAASqd,EAAIkB,OAASlB,EAAIkB,OAOzC,GAFA6zI,EAAel4K,EAAK83K,eAAiBzzI,EAEjCrkC,EAAKm7F,QAAU92D,EAAS,EAAG,CAE3B,GAAI6zI,GAAgBl4K,EAAKg4K,UACrB,OAGAh4K,EAAKq4K,iBACLD,GAAWF,EAAel4K,EAAKg4K,YAAch4K,EAAK83K,eAAiB93K,EAAKg4K,WACxEG,EAAOD,IAEPE,EAAUF,EAAel4K,EAAK83K,eAC9BK,EAAOh1I,EAAIkB,QAEfrkC,EAAKs4K,SAASH,EAAMC,EAAQG,YAAY,SAErC,IAAKv4K,EAAKm7F,QAAU92D,EAAS,EAAG,CAEnC,GAAI6zI,GAAgBl4K,EAAKg4K,UACrB,OAGAh4K,EAAKq4K,iBACLD,GAAWF,EAAel4K,EAAK83K,iBAAmB93K,EAAKg4K,UAAYh4K,EAAK83K,gBACxEK,EAAOD,IAEPE,EAAUF,EAAel4K,EAAKg4K,UAC9BG,GAAQn4K,EAAKg4K,UAAYE,IAAiBpyJ,EAAQ,GAAK,IAE3D9lB,EAAKs4K,SAASH,EAAMC,EAAQG,YAAY,OAIxCntL,KAAAsqK,OAAS,SAACvyH,GACd,GAAInjC,EAAKo3K,SAAU,KACT/yI,EAA2B,UAAlBrkC,EAAK8nB,UAAwBqb,EAAIkB,OAASlB,EAAIkB,OACvD6zI,EAAuBl4K,EAAK83K,eAAiBzzI,EACnDrkC,EAAKw4K,WAGDx4K,EAAKm7F,QAAU+8E,GAAgBl4K,EAAK83K,eAAiB,EACrD93K,EAAKxG,SACGwG,EAAKm7F,QAAU+8E,GAAgBl4K,EAAKg4K,UAAY,GACxDh4K,EAAKzG,OAETyG,EAAK83K,eAAiB,OAiCtB1sL,KAAAqtL,kBAAoB,SAACt1I,GACzBnjC,EAAKyrB,WAAWC,cAAc+F,oBAAoB,gBAAiBzxB,EAAKy4K,mBAAmB,GAC3Fz4K,EAAK42K,OAAOjpK,QAGRviB,KAAAstL,kBAAoB,SAACv1I,GACzBnjC,EAAKyrB,WAAWC,cAAc+F,oBAAoB,gBAAiBzxB,EAAK04K,mBAAmB,GAC3F14K,EAAKm6B,OAAOxsB,QAEpB,OApsBI/iB,OAAAgC,eACWupL,EAAA7qL,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKkrL,aAEhB,SAAkB/oL,GACdnC,KAAKkrL,QAAU/oL,EACfnC,KAAKorL,aAAa7oK,KAAKviB,KAAKkrL,0CA6ChC1rL,OAAAgC,eAAIupL,EAAA7qL,UAAA,UAAO,KAAX,WACI,OAAOF,KAAKqgC,WAAWC,+CA6E3B9gC,OAAAgC,eAAIupL,EAAA7qL,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKutL,eAAiBvtL,KAAK+vG,OACpB/vG,KAAKutL,aAAax7I,SAClB/xC,KAAKwtL,gBACLxtL,KAAKwtL,gBAAgBz7I,cADzB,mCASXvyC,OAAAgC,eAAWupL,EAAA7qL,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKytL,mBAMhB,SACwB5gK,GACf7sB,KAAK+vG,QACN/vG,KAAK0tL,eAAe7gK,EAAI7sB,KAAKsrL,UAAY,IAE7CtrL,KAAKytL,cAAgB5gK,mCAYzBrtB,OAAAgC,eACIupL,EAAA7qL,UAAA,YAAS,KADb,WAEI,OAAKF,KAAK+kH,IAGN/kH,KAAK+vG,OACE/vG,KAAKiR,MAEZjR,KAAKutL,cAAgBvtL,KAAKsrL,UACnBtrL,KAAKsrL,UAGT,MATI,uCAaf9rL,OAAAgC,eACIupL,EAAA7qL,UAAA,gBAAa,KADjB,WAEI,OAAOF,KAAK+kH,KAAyB,UAAlB/kH,KAAK08B,SAAuB,IAAM,qCAoBzDl9B,OAAAgC,eAAIupL,EAAA7qL,UAAA,SAAM,KAAV,WACI,OAAOF,KAAK2tL,QAAQrtJ,+CAMxB9gC,OAAAgC,eAAIupL,EAAA7qL,UAAA,UAAO,KAAX,WACI,OAAOF,KAAK4tL,SAASttJ,+CAMzB9gC,OAAAgC,eAAIupL,EAAA7qL,UAAA,aAAU,KAAd,WACI,OAAOF,KAAK6tL,YAAYvtJ,+CAa5B9gC,OAAAgC,eAAWupL,EAAA7qL,UAAA,kBAAe,KAA1B,WACI,OAAOF,KAAK+kH,OAAS/kH,KAAKutL,8CAU9B/tL,OAAAgC,eAAWupL,EAAA7qL,UAAA,cAAW,KAAtB,WACI,OAAOF,KAAKisL,8CAUhBzsL,OAAAgC,eAAWupL,EAAA7qL,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK2sL,kBAAiB,oCASjCntL,OAAAgC,eAAWupL,EAAA7qL,UAAA,oBAAiB,KAA5B,WACI,OAAOF,KAAK2sL,kBAAiB,oCAMjCntL,OAAAgC,eAAWupL,EAAA7qL,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKirL,+CAQhBzrL,OAAAgC,eAAWupL,EAAA7qL,UAAA,QAAK,KAAhB,WACI,OAAOF,KAAKgrL,wCAeTD,EAAA7qL,UAAA2uC,SAAP,WAEQ7uC,KAAKgrL,QACLhrL,KAAKgrL,OAAOt9K,IAAI1N,KAAK2N,GAAI3N,MAEzBA,KAAK+vG,QACL/vG,KAAK0tL,eAAe1tL,KAAKiR,QAO1B85K,EAAA7qL,UAAAq4D,mBAAP,WAEIv4D,KAAK8tL,iBACL9tL,KAAKksL,oBAELlsL,KAAK+tL,gBASFhD,EAAA7qL,UAAAsmC,YAAP,WACIxmC,KAAKirL,cAAcjpJ,UACfhiC,KAAKgrL,QACLhrL,KAAKgrL,OAAOn9K,OAAO7N,KAAK2N,IAExB3N,KAAKguL,iBACLhuL,KAAKguL,gBAAgB9/I,eAOtB68I,EAAA7qL,UAAA8hD,YAAP,SAAmBC,GAEXA,EAAQkpI,gBAAkBlpI,EAAQkpI,eAAejpI,eAAiBluC,YAClEhU,KAAKmrL,kBAAoBnrL,KAAKmrL,gBAAqD,SAAnCnrL,KAAKmrL,eAAe16K,YACpEzQ,KAAK+tL,gBAEL9rI,EAAQ8iE,KAAO9iE,EAAQ8iE,IAAI7iE,eAAiBluC,YAC5ChU,KAAK+kH,OAAS/kH,KAAK+kH,KAA+B,SAAxB/kH,KAAK+kH,IAAIt0G,YAC/BzQ,KAAK+kH,KACL/kH,KAAKirL,cAAcjpJ,UACnBhiC,KAAK0rL,mBAAoB,GAEzB1rL,KAAK+tL,gBAIT9rI,EAAQopI,cACJrrL,KAAKqrL,eACLrrL,KAAK+tL,eACL/tL,KAAKksL,qBAITjqI,EAAQhxC,OAASjR,KAAK+vG,QACtB/vG,KAAK0tL,eAAezrI,EAAQhxC,MAAMixC,cAGlCD,EAAQqpI,YACHtrL,KAAK+vG,QACN/vG,KAAK0tL,eAAezrI,EAAQqpI,UAAUppI,cAE1CliD,KAAK8tL,mBAWN/C,EAAA7qL,UAAA6N,OAAP,WACQ/N,KAAK+vG,OACL/vG,KAAKoO,QAELpO,KAAKmO,QAWN48K,EAAA7qL,UAAAiO,KAAP,WACQnO,KAAKgsL,UACLhsL,KAAKotL,WAELptL,KAAK+vG,SAGT/vG,KAAKuhG,QAAQh/E,OACbviB,KAAK+vG,QAAS,EASd/vG,KAAKqgC,WAAWC,cAAckE,iBAAiB,gBAAiBxkC,KAAKqtL,mBAAmB,GACxFrtL,KAAK0tL,eAAe1tL,KAAKiR,SAUtB85K,EAAA7qL,UAAAkO,MAAP,WACQpO,KAAKgsL,UACLhsL,KAAKotL,WAEJptL,KAAK+vG,SAGV/vG,KAAKyrL,QAAQlpK,OAEbviB,KAAK+vG,QAAS,EACd/vG,KAAK0tL,eAAe1tL,KAAKutL,aAAevtL,KAAKsrL,UAAY,IACzDtrL,KAAKqgC,WAAWC,cAAckE,iBAAiB,gBAAiBxkC,KAAKstL,mBAAmB,KAMlFvC,EAAA7qL,UAAA+tL,gBAAV,SAA0B9rL,GACtBnC,KAAKisL,aAAe9pL,GASd4oL,EAAA7qL,UAAAysL,iBAAV,SAA2Bb,GACvB,OAAIA,EACK9rL,KAAKutL,aAGNvtL,KAAKsrL,UACEjuK,WAAWrd,KAAKsrL,YAKY,OAA/BtrL,KAAK2rL,YAAYL,YAEjBtrL,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIwjB,QAAQ,GAChE7rL,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIyjB,MAAM,GAC9D9rL,KAAK2rL,YAAYL,UAAYtrL,KAAK+rL,WAAW3yD,YAC7Cp5H,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIwjB,QAAQ,GAChE7rL,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIyjB,MAAM,IAE3D9rL,KAAK2rL,YAAYL,WAhBjB,EAmBPtrL,KAAKiR,MACEoM,WAAWrd,KAAKiR,QAEQ,OAA3BjR,KAAK2rL,YAAY16K,QAEjBjR,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIwjB,QAAQ,GAChE7rL,KAAK2rL,YAAY16K,MAAQjR,KAAK+rL,WAAW3yD,YACzCp5H,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK+rL,WAAY/rL,KAAKqoK,IAAIwjB,QAAQ,IAE7D7rL,KAAK2rL,YAAY16K,QAK5B85K,EAAA7qL,UAAAisL,eAAR,WACI,OAAQp6K,OAAOm8K,WAAa,EAAKn8K,OAAOm8K,WAAaC,OAAOl9K,OAMxD85K,EAAA7qL,UAAAwtL,eAAR,SAAuBz8K,GAAvB,IAAA2D,EAAA5U,KACQA,KAAKizF,aAAarhF,UAClB2qC,sBAAsB,WACd3nC,EAAKi3K,QACLj3K,EAAK0gD,SAAS84H,gBAAgBx5K,EAAKi3K,OAAQ,QAAS56K,KAI5DjR,KAAKs1D,SAAS84H,gBAAgBpuL,KAAK6rL,OAAQ,QAAS56K,IAOpD85K,EAAA7qL,UAAAmuL,eAAR,WACI,OAAOruL,KAAK6rL,OAAOzyD,aAGf2xD,EAAA7qL,UAAA6tL,aAAR,WAAA,IAAAn5K,EAAA5U,MAEQA,KAAKmrL,gBAAmBnrL,KAAK+kH,KAAQ/kH,KAAK0rL,oBAK1C1rL,KAAKirL,cAAcnyE,uBAAuB,WAAY,QAAS94G,KAAKosL,OACpEpsL,KAAK0rL,mBAAoB,EAIzB1rL,KAAKirL,cAAcnyE,uBAAuB,WAAY,WAAY94G,KAAKysL,UACvEzsL,KAAKirL,cAAcnyE,uBAAuB,WAAY,UAAW94G,KAAK0pF,KACtE1pF,KAAKirL,cAAcnyE,uBAAuB,WAAY,SAAU94G,KAAKsqK,UAEpEtqK,KAAKguL,iBAAmBhuL,KAAKizF,aAAarhF,YAC3C5R,KAAKguL,gBAAkBppJ,EAAAA,UAAU7yB,OAAQ,UAAU8yB,KAAKw+C,EAAAA,SAAS,WAAM,OAAA1qB,EAAAA,SAAS,QAC3E5zB,UAAU,SAAC5iC,GACRyS,EAAKs3K,kBAAkB/pL,OAK/B4oL,EAAA7qL,UAAA4tL,eAAR,eACQhoF,EAEA9lG,KAAKutL,eACLznF,EAAWrqF,KAAK4O,IAAIrqB,KAAKisL,aAA4C,IAA9BjsL,KAAK2sL,kBAAiB,IAC7D3sL,KAAKiuL,gBAAgBnoF,KAoIrBilF,EAAA7qL,UAAAktL,SAAR,WACIptL,KAAKgsL,UAAW,EAEhBhsL,KAAKs1D,SAASu3H,gBAAgB7sL,KAAKorG,QAAS,WAAW,GACvDprG,KAAKs1D,SAASu3H,gBAAgB7sL,KAAK6rL,OAAQ,WAAW,GACtD7rL,KAAKktL,SAAS,EAAG,KAQbnC,EAAA7qL,UAAAgtL,SAAR,SAAiBpwK,EAAWxZ,GAA5B,IAAAsR,EAAA5U,KAEI+R,OAAOwqC,sBAAsB,WACzB,GAAI3nC,EAAKq4K,gBACLr4K,EAAK0gD,SAAS84H,gBAAgBx5K,EAAKi3K,OAAQ,QAAS/uK,EAAIrB,KAAKutB,IAAIlsB,GAAK,KAAO,QAC1E,KACGtY,EAAYsY,EAAI,eAAiBA,EAAI,UAAY,GACvDlI,EAAK0gD,SAAS84H,gBAAgBx5K,EAAKi3K,OAAQ,YAAarnL,GACxDoQ,EAAK0gD,SAAS84H,gBAAgBx5K,EAAKi3K,OAAQ,oBAAqBrnL,GAEhElB,IAAY0Q,WACZY,EAAK0gD,SAAS84H,gBAAgBx5K,EAAKw2F,QAAS,UAAW9nG,0BAhxBtEwuC,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAACqoG,IACZ9oG,SAAU,iBACVqjC,SAAA,omCACS,2IA9CTzO,EAAAA,WAAUviC,WAAA,CAAA,CAAAmR,KAgaLC,EAAAA,OAAMnE,KAAA,CAACs1B,EAAAA,qBAhZP91B,GAAoBzM,WAAA,CAAA,CAAAmR,KAiZpBg9B,EAAAA,kBAvZLo/I,EAAAA,gBAOK92E,UAEA9lG,wCA4CJy9B,EAAAA,YAAWnhC,KAAA,CAAC,oCAgBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,wBAeAA,EAAAA,8BAgBAA,EAAAA,sBAqBAA,EAAAA,4BAYAgd,EAAAA,oBAgBAhd,EAAAA,4BAgBAA,EAAAA,qBAwBAA,EAAAA,yBAeAA,EAAAA,yBASAgd,EAAAA,wBAQAA,EAAAA,uBAQAA,EAAAA,wBAQAA,EAAAA,uBAQAA,EAAAA,6BAwBA0gC,EAAAA,aAAYr+C,KAAA,CAAC88K,GAAmC,CAAEp0I,KAAMo0I,GAAmCn0I,UAAQ,6BAWnG0V,EAAAA,aAAYr+C,KAAA,CAAC68K,GAA+B,CAAEn0I,KAAMm0I,GAA+Bl0I,UAAQ,uBAM3FxH,EAAAA,YAAWnhC,KAAA,CAAC,0CAgBZmhC,EAAAA,YAAWnhC,KAAA,CAAC,gCAeZyoC,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,sBAC7BF,EAAAA,UAASzoC,KAAA,CAAC,UAAW,CAAE2oC,UAAQ,yBAC/BF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,OA8flCo0I,EA9xBA,GClCAwD,GAAA,WAAA,SAAAA,KAewC,2BAfvCv/K,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACV87K,GACAJ,GACAG,GACAD,IAEJ37K,QAAS,CACL67K,GACAJ,GACAG,GACAD,IAEJpuI,QAAS,CAACC,EAAAA,kBAE0B6xI,EAfxC,GCEAC,GAAA,WAAA,SAAAA,KAG4C,2BAH3C//K,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2BAE8B8/K,EAH5C,GAgBAC,GAAA,WAAA,SAAAA,KAG0C,2BAHzChgL,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yBAE4B+/K,EAH1C,OASIC,OAAA,EAIA9qG,MAAA,uDAIA+qG,KAAA,EACAC,GAAA,qCC7BJ,IAAAC,GAAA,WAgGI,SAAAA,EAAoBC,GAAA9uL,KAAA8uL,YAAAA,EA1FZ9uL,KAAA+uL,WAAY,EACZ/uL,KAAAgvL,YAAa,EACbhvL,KAAA2pG,UAAY,IAAInqE,EAAAA,QAQjBx/B,KAAA8yG,UAAW,EAiCX9yG,KAAAivL,mBAAqB,IAAI9lK,EAAAA,aAGzBnpB,KAAAkvL,SAAW,IAAI/lK,EAAAA,aAGfnpB,KAAAmvL,cAAgB,IAAIhmK,EAAAA,aAGpBnpB,KAAA6oE,SAAW,EAGX7oE,KAAA28E,OAAS,EA+IpB,OAlMIn9E,OAAAgC,eAAYqtL,EAAA3uL,UAAA,iBAAc,KAA1B,eACUkvL,EAAkBpvL,KAAKsgC,cAAcpvB,wBACrCm+K,GAAeD,EAAgB10J,MAAQ00J,EAAgB30J,MAAQ,EACrE,OAAO20J,EAAgB30J,KAAO40J,mCAkDlC7vL,OAAAgC,eACWqtL,EAAA3uL,UAAA,iBAAc,KADzB,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaX,sCAGtCnvL,OAAAgC,eACWqtL,EAAA3uL,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaV,oCAGtCpvL,OAAAgC,eACWqtL,EAAA3uL,UAAA,uBAAoB,KAD/B,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaX,MAAQ3uL,KAAK+uL,2CAGnDvvL,OAAAgC,eACWqtL,EAAA3uL,UAAA,qBAAkB,KAD7B,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaV,IAAM5uL,KAAK+uL,2CAGjDvvL,OAAAgC,eACWqtL,EAAA3uL,UAAA,oBAAiB,KAD5B,WAEI,OAAOF,KAAK8yG,UAAY9yG,KAAKgvL,4CAGjCxvL,OAAAgC,eAAWqtL,EAAA3uL,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8uL,YAAYxuJ,+CAG5B9gC,OAAAgC,eAAWqtL,EAAA3uL,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK2pG,2CAQTklF,EAAA3uL,UAAA2uC,SAAP,WAAA,IAAAj6B,EAAA5U,KACIA,KAAKuvL,MACA1qJ,KAAKC,EAAAA,UAAU9kC,KAAK2pG,YACpB5kE,UAAU,SAAAyqJ,GACP,OAAA56K,EAAK66K,iBAAiBD,MAO3BX,EAAA3uL,UAAAsmC,YAAP,WACIxmC,KAAK2pG,UAAUznG,MAAK,GACpBlC,KAAK2pG,UAAUljE,YAIZooJ,EAAA3uL,UAAAwvL,cADP,WAEI1vL,KAAKmvL,cAAc5sK,MAAK,IAIrBssK,EAAA3uL,UAAAyvL,eADP,WAEI3vL,KAAKmvL,cAAc5sK,MAAK,IAIrBssK,EAAA3uL,UAAAw2F,UADP,SACiBpkF,GACb,IAAItS,KAAK4xC,SAAT,KAIIwuH,EAAY,EAChB,GAAI9tJ,EAAMrR,IAAI6sB,SAAS,QACnBsyI,GAA0B,EAAdpgK,KAAKu+E,SACd,CAAA,IAAIjsE,EAAMrR,IAAI6sB,SAAS,SAG1B,OAFAsyI,EAAYpgK,KAAKu+E,KAKrBv+E,KAAKkvL,SAAS3sK,OACdviB,KAAKivL,mBAAmB1sK,KAAK69I,KAI1ByuB,EAAA3uL,UAAA4uD,OADP,WAEI9uD,KAAK8yG,UAAW,EAChB9yG,KAAK28E,OAAS,GAIXkyG,EAAA3uL,UAAA0vL,gBADP,WAEI5vL,KAAK8yG,UAAW,EAChB9yG,KAAK28E,OAAS,GAMXkyG,EAAA3uL,UAAA2vL,oBAAP,WACI7vL,KAAK8vL,uBAAsB,IAMxBjB,EAAA3uL,UAAA6vL,oBAAP,WACI/vL,KAAK8vL,uBAAsB,IAGvBjB,EAAA3uL,UAAAuvL,iBAAR,SAAyBD,OACfnkJ,EAAcrrC,KAAKgwL,qBAAqBR,GAC1CxvL,KAAK8yG,UAA4B,IAAhBznE,GACjBrrC,KAAKivL,mBAAmB1sK,KAAK8oB,IAI7BwjJ,EAAA3uL,UAAA8vL,qBAAR,SAA6BR,OACnBS,EAAST,EAASxvL,KAAKkwL,eACvBC,EAAqBnwL,KAAKowL,aAAe,EAK/C,OADuB30K,KAAKutB,IAAIinJ,GACXE,EACV,EAGJnwL,KAAKqwL,cAAcJ,EAAQjwL,KAAKowL,eAGnCvB,EAAA3uL,UAAAmwL,cAAR,SAAsBJ,EAAQK,GAC1B,OAAO70K,KAAK4rB,MAAM4oJ,EAASK,GAAYtwL,KAAKu+E,MAGxCswG,EAAA3uL,UAAA4vL,sBAAR,SAA8BpzH,GAC1B18D,KAAKgvL,WAAatyH,EAEb18D,KAAKuwL,aACNvwL,KAAK+uL,UAAYryH,wBAzM5B5qB,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,YACVqjC,SAAA,yEAjBAzO,EAAAA,6CAiCC30B,EAAAA,0BAGAA,EAAAA,4CAGAA,EAAAA,wBAGAA,EAAAA,qBAGAA,EAAAA,4BAGAA,EAAAA,oBAGAA,EAAAA,2BAGAA,EAAAA,uBAGAA,EAAAA,oBAGAA,EAAAA,kCAGAgd,EAAAA,yBAGAA,EAAAA,8BAGAA,EAAAA,yBAGAwjB,EAAAA,YAAWnhC,KAAA,CAAC,iCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,iEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2DAkCZY,EAAAA,aAAYZ,KAAA,CAAC,wCAKbY,EAAAA,aAAYZ,KAAA,CAAC,mCAKbY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,2BAmBzBY,EAAAA,aAAYZ,KAAA,CAAC,iCAMbY,EAAAA,aAAYZ,KAAA,CAAC,YAoDlB6gL,EA5MA,GCnBA2B,GAAA,WA6CI,SAAAA,EAAoB1B,GAAA9uL,KAAA8uL,YAAAA,EAiBxB,OArCItvL,OAAAgC,eACWgvL,EAAAtwL,UAAA,iBAAc,KADzB,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaX,sCAGtCnvL,OAAAgC,eACWgvL,EAAAtwL,UAAA,eAAY,KADvB,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaV,oCAGtCpvL,OAAAgC,eACWgvL,EAAAtwL,UAAA,uBAAoB,KAD/B,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaX,MAAQ3uL,KAAKq3E,wCAGnD73E,OAAAgC,eACWgvL,EAAAtwL,UAAA,qBAAkB,KAD7B,WAEI,OAAOF,KAAKkS,OAASo9K,GAAaV,IAAM5uL,KAAKq3E,wCAKjD73E,OAAAgC,eAAWgvL,EAAAtwL,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAK8uL,YAAYxuJ,+CAG5B9gC,OAAAgC,eAAWgvL,EAAAtwL,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAK+0F,aAGhB,SAAkBz7E,GACVtZ,KAAKuwL,aAITvwL,KAAK+0F,QAAUz7E,wDAzDtBw4B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,kBACVqjC,SAAA,uRAL2DzO,EAAAA,6CAU1D30B,EAAAA,2BAGAA,EAAAA,uBAGAA,EAAAA,oBAGAA,EAAAA,0BAGAA,EAAAA,8BAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAsBjBwiL,EA9DA,GC8BMrqH,GAAO,aAGT30B,GAAU,EAiBdi/I,GAAA,WAklBI,SAAAA,EAAoBn7H,EAA6B4hB,EAAyBsF,GAAtDx8E,KAAAs1D,SAAAA,EAA6Bt1D,KAAAk3E,IAAAA,EAAyBl3E,KAAAw8E,KAAAA,EApkBlEx8E,KAAA0wL,MAAQ,EACR1wL,KAAA2wL,MAAQ,EAGR3wL,KAAA4wL,cAAe,EACf5wL,KAAA6wL,UAAY,EACZ7wL,KAAA8wL,UAAY,IAKZ9wL,KAAA+wL,aAAc,EACd/wL,KAAAqyC,WAAY,EACZryC,KAAAqlK,MAAQ,EAERrlK,KAAAgxL,QAAU,IAAIrxL,MACdK,KAAAkxD,MAAQ+/H,GAAWvC,OAEnB1uL,KAAAkxL,YAAc,IAAI1xJ,EAAAA,QAClBx/B,KAAAmxL,sBAAwB,IAAI3xJ,EAAAA,QAI5Bx/B,KAAAwmE,kBAAsCL,GACtCnmE,KAAAumE,mBAAiCJ,GAkBjCnmE,KAAAoxL,OAA6C,IAAIjnE,EAAAA,UAMjDnqH,KAAAqxL,UAA+C,IAAIlnE,EAAAA,UAqBpDnqH,KAAAowL,aAAepwL,KAAKqlK,MAKpBrlK,KAAAuvL,MAAyB,IAAI/vJ,EAAAA,QAkB7Bx/B,KAAA0xC,KAAO,SA8BP1xC,KAAAsxL,YAAa,EAmBbtxL,KAAA2N,GAAK,cAAc6jC,KAgDnBxxC,KAAAuxL,6BAA+B,IAoY/BvxL,KAAAqmE,cAAgB,IAAIl9C,EAAAA,aAimB/B,OAhnCI3pB,OAAAgC,eAAYivL,EAAAvwL,UAAA,YAAS,KAArB,WACI,OAAOF,KAAKoxL,OAAO95K,KAAK,SAAAk6K,GAAS,OAAAA,EAAMt/K,OAASo9K,GAAaX,wCAGjEnvL,OAAAgC,eAAYivL,EAAAvwL,UAAA,UAAO,KAAnB,WACI,OAAOF,KAAKoxL,OAAO95K,KAAK,SAAAk6K,GAAS,OAAAA,EAAMt/K,OAASo9K,GAAaV,sCAGjEpvL,OAAAgC,eAAYivL,EAAAvwL,UAAA,YAAS,KAArB,WACI,OAAOF,KAAKqxL,UAAU/5K,KAAK,SAAA+hE,GAAS,OAAAA,EAAMnnE,OAASo9K,GAAaX,wCAGpEnvL,OAAAgC,eAAYivL,EAAAvwL,UAAA,UAAO,KAAnB,WACI,OAAOF,KAAKqxL,UAAU/5K,KAAK,SAAA+hE,GAAS,OAAAA,EAAMnnE,OAASo9K,GAAaV,sCAkCpEpvL,OAAAgC,eACWivL,EAAAvwL,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK+lG,0CAMhBvmG,OAAAgC,eACWivL,EAAAvwL,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK8lG,0CAMhBtmG,OAAAgC,eACWivL,EAAAvwL,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAK4xC,0CAYhBpyC,OAAAgC,eACWivL,EAAAvwL,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAK4xC,0CAuBhBpyC,OAAAgC,eACWivL,EAAAvwL,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKkxD,WAYhB,SAAgBh/C,GACZlS,KAAKkxD,MAAQh/C,EAETA,IAAS++K,GAAWvC,SACpB1uL,KAAKyxL,WAAa,GAGlBzxL,KAAK0xL,mBAAqB1xL,KAAK2xL,WAAa3xL,KAAK8lG,WACjD9lG,KAAK2xL,WAAa3xL,KAAK4xL,OAAOjxL,OAAS,GAGvCX,KAAK4wL,cACL5wL,KAAK6xL,+CAoBbryL,OAAAgC,eACWivL,EAAAvwL,UAAA,SAAM,KADjB,WAEI,OAAOF,KAAKgxL,aAGhB,SAAkBY,GACd5xL,KAAKgxL,QAAUY,EAEf5xL,KAAK2wL,MAAQ,EAET3wL,KAAK4wL,eACL5wL,KAAKowL,aAAepwL,KAAK8xL,wBACzB9xL,KAAK+xL,gCACL/xL,KAAKgyL,gBAAgBJ,qCAc7BpyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,UAAO,KAAlB,WACI,MAAO,CACH09C,UAAW59C,KAAKmC,MAChByvL,OAAQ5xL,KAAK4xL,yCAWrBpyL,OAAAgC,eACWivL,EAAAvwL,UAAA,OAAI,KAoBf,WACI,OAAOF,KAAK0xL,kBAAoB,EAAI1xL,KAAKqlK,WAtB7C,SACgB9mF,GACZv+E,KAAKqlK,MAAQ9mF,EAETv+E,KAAK4wL,eACL5wL,KAAKowL,aAAepwL,KAAK8xL,wBACzB9xL,KAAKiyL,gBAAgBjyL,KAAKmC,OAC1BnC,KAAKgyL,gBAAgBhyL,KAAK4xL,0CA4BlCpyL,OAAAgC,eACWivL,EAAAvwL,UAAA,WAAQ,KADnB,WAEI,OAAOF,KAAKqyC,eAShB,SAAoB6/I,GAChBlyL,KAAKqyC,UAAY6/I,EAEblyL,KAAK4wL,cACL5wL,KAAKmyL,0BAA0BD,oCAcvC1yL,OAAAgC,eACWivL,EAAAvwL,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK+wL,iBAWhB,SAAsBR,GAClBvwL,KAAK+wL,YAAcR,EACnBvwL,KAAKgyL,gBAAgB,uCAezBxyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,eAAY,KAAvB,WACI,OAAOF,KAAKuwL,gBAOhB,SAAwBA,GACpBvwL,KAAKuwL,WAAaA,mCAatB/wL,OAAAgC,eAAWivL,EAAAvwL,UAAA,WAAQ,KAAnB,WACI,OAAOF,KAAK0xL,kBACR1xL,KAAK4xL,OAAOjxL,OAAS,EACrBX,KAAK8wL,eAUb,SACoB3uL,GACZA,GAASnC,KAAK6wL,UACd7wL,KAAK8wL,UAAY9wL,KAAK6wL,UAAY,EAElC7wL,KAAK8wL,UAAY3uL,EAGjBA,EAAQnC,KAAKoyL,aACbpyL,KAAKqyL,mCACLryL,KAAKsyL,WAAanwL,GAItBnC,KAAK2wL,MAAQ,EAEb3wL,KAAKowL,aAAepwL,KAAK8xL,wBACzB9xL,KAAK+xL,gCACL/xL,KAAKgyL,gBAAgB,uCAazBxyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAK0xL,kBACE,EAGJ1xL,KAAK6wL,eAUhB,SACoB1uL,GACZA,GAASnC,KAAK8lG,SACd9lG,KAAK6wL,UAAY7wL,KAAK8lG,SAAW,EAEjC9lG,KAAK6wL,UAAY1uL,EAGjBA,EAAQnC,KAAKsyL,aACbtyL,KAAKuyL,mCACLvyL,KAAKoyL,WAAajwL,GAItBnC,KAAK0wL,MAAQ,EAEb1wL,KAAKowL,aAAepwL,KAAK8xL,wBACzB9xL,KAAK+xL,gCACL/xL,KAAKgyL,gBAAgB,uCAazBxyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAKoa,OAAOkB,MAAMxb,KAAKwyL,cAAgBxyL,KAAKwyL,cAAgBx+K,UAIrDhU,KAAK+lG,SAHD/lG,KAAKslK,aAAatlK,KAAKwyL,YAAaxyL,KAAK+lG,SAAU/lG,KAAK8lG,eAavE,SACsB3jG,GACdA,GAASnC,KAAKsyL,YAAetyL,KAAK0xL,mBAAqBvvL,EAAQ,IAInEnC,KAAKwyL,YAAcxyL,KAAKslK,aAAanjK,EAAOnC,KAAK+lG,SAAU/lG,KAAK8lG,UAGhE9lG,KAAK0wL,MAAQ1wL,KAAKyyL,gBAAgBzyL,KAAKwyL,cAAgB,EACvDxyL,KAAK+xL,kEAaTvyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAKoa,OAAOkB,MAAMxb,KAAK0yL,cAAgB1yL,KAAK0yL,cAAgB1+K,UAIrDhU,KAAK8lG,SAHD9lG,KAAKslK,aAAatlK,KAAK0yL,YAAa1yL,KAAK+lG,SAAU/lG,KAAK8lG,eAavE,SACsB3jG,GACdA,GAASnC,KAAKoyL,YAAepyL,KAAK0xL,mBAAqBvvL,EAAQnC,KAAK4xL,OAAOjxL,OAAS,IAIxFX,KAAK0yL,YAAc1yL,KAAKslK,aAAanjK,EAAOnC,KAAK+lG,SAAU/lG,KAAK8lG,UAEhE9lG,KAAK2wL,MAAQ3wL,KAAKyyL,gBAAgBzyL,KAAK0yL,cAAgB,EACvD1yL,KAAK+xL,kEAcTvyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,QAAK,KAAhB,WACI,OAAIF,KAAK2yL,QACE,CACHC,MAAO5yL,KAAKslK,aAAatlK,KAAKyxL,WAAYzxL,KAAKoyL,WAAYpyL,KAAKsyL,YAChEO,MAAO7yL,KAAKslK,aAAatlK,KAAK2xL,WAAY3xL,KAAKoyL,WAAYpyL,KAAKsyL,aAG7DtyL,KAAKslK,aAAatlK,KAAK2xL,WAAY3xL,KAAKoyL,WAAYpyL,KAAKsyL,iBAoBxE,SACiBnwL,GACRnC,KAAK2yL,SAGNxwL,EAAQnC,KAAK8yL,qBAAoB,GACjC9yL,KAAK2xL,WAAa,EAA6BkB,MAC/C7yL,KAAKyxL,WAAa,EAA6BmB,OAJ/C5yL,KAAK2xL,WAAU,EAOnB3xL,KAAKwmE,kBAAkBxmE,KAAKmC,OAExBnC,KAAK4wL,cACL5wL,KAAK+xL,iEAyBNtB,EAAAvwL,UAAAk4C,cADP,SACqBs7G,IACjB1zJ,KAAK+yL,iBAAiBr/B,GAEjB1zJ,KAAKgzL,QAAQlgF,UAAY9yG,KAAKizL,YAAcj/K,cAI7BhU,KAAKgzL,QAAQlgF,SAAW9yG,KAAKgzL,QAAUhzL,KAAKizL,WACpD3yJ,cAAcy6B,kBAAkB24F,EAAO73G,WACnD77C,KAAKkzL,uBAELx/B,EAAOzpH,mBAQJwmJ,EAAAvwL,UAAAm4C,YADP,SACmBq7G,IACV1zJ,KAAKgzL,QAAQlgF,UAAY9yG,KAAKizL,YAAcj/K,cAI7BhU,KAAKgzL,QAAQlgF,SAAW9yG,KAAKgzL,SACrC1yJ,cAAc6yJ,sBAAsBz/B,EAAO73G,WAEvD77C,KAAKozL,yBAOF3C,EAAAvwL,UAAA0uD,QADP,WAEI5uD,KAAKqzL,0BAOF5C,EAAAvwL,UAAAozL,cADP,SACqB5/B,GACjB1zJ,KAAK28G,OAAO+2C,EAAOn8D,SAAS1sB,UAIzB4lH,EAAAvwL,UAAAqzL,WADP,WAEIvzL,KAAKkzL,wBAIFzC,EAAAvwL,UAAAszL,SADP,WAEIxzL,KAAKozL,wBAaT5zL,OAAAgC,eAAWivL,EAAAvwL,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKkS,OAAS++K,GAAWrtG,uCAapCpkF,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAKoa,OAAOkB,MAAMxb,KAAKyzL,cAAgBzzL,KAAKyzL,cAAgBz/K,WAAahU,KAAKyzL,aAAezzL,KAAKoyL,WACvFpyL,KAAKyzL,YAGTzzL,KAAKoyL,gBAahB,SAAsBjwL,GAClBA,EAAQnC,KAAKslK,aAAanjK,EAAOnC,KAAKoyL,WAAYpyL,KAAKsyL,YACvDtyL,KAAKyzL,YAActxL,mCAcvB3C,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAKoa,OAAOkB,MAAMxb,KAAK0zL,cAAgB1zL,KAAK0zL,cAAgB1/K,WAAahU,KAAK0zL,aAAe1zL,KAAKsyL,WACvFtyL,KAAK0zL,YAGT1zL,KAAKsyL,gBAahB,SAAsBnwL,GAClBA,EAAQnC,KAAKslK,aAAanjK,EAAOnC,KAAKoyL,WAAYpyL,KAAKsyL,YACvDtyL,KAAK0zL,YAAcvxL,mCAWvB3C,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK0xL,kBACR1xL,KAAK4xL,OAAO5xL,KAAKyxL,YACjBzxL,KAAKyxL,4CAWbjyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK0xL,kBACR1xL,KAAK4xL,OAAO5xL,KAAK2xL,YACjB3xL,KAAK2xL,4CAYbnyL,OAAAgC,eAAWivL,EAAAvwL,UAAA,oBAAiB,KAA5B,WACI,SAAUF,KAAK4xL,QAAU5xL,KAAK4xL,OAAOjxL,OAAS,oCAM3C8vL,EAAAvwL,UAAA2uC,SAAP,WACI7uC,KAAK2zL,cAGL3zL,KAAK0wL,MAAQ1wL,KAAKyyL,gBAAgBzyL,KAAKoyL,aAAe,EACtDpyL,KAAK2wL,MAAQ3wL,KAAKyyL,gBAAgBzyL,KAAKsyL,aAAe,GAMnD7B,EAAAvwL,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACIA,KAAK4wL,cAAe,EACpB5wL,KAAK+xL,gCACL/xL,KAAKgyL,gBAAgBhyL,KAAK4xL,QAC1B5xL,KAAKmyL,0BAA0BnyL,KAAK4xC,UAEpC5xC,KAAK4zL,YAAY5zL,KAAKizL,UAAWjzL,KAAK6zL,aAAa5yI,KAAKjhD,OACxDA,KAAK4zL,YAAY5zL,KAAKgzL,QAAShzL,KAAK6zL,aAAa5yI,KAAKjhD,OAEtDA,KAAKoxL,OAAOnvI,QAAQpd,KAAKC,EAAAA,UAAU9kC,KAAKkxL,cAAcnsJ,UAAU,SAAAwH,OACtD0mJ,EAAY1mJ,EAAOj1B,KAAK,SAACk6K,GAAmC,OAAAA,EAAMt/K,OAASo9K,GAAaX,OACxFmF,EAAYl/K,EAAKy8K,UAAU/5K,KAAK,SAAC+hE,GAAkC,OAAAA,EAAMnnE,OAASo9K,GAAaX,OACrG/5K,EAAKm/K,eAAed,EAAWa,EAAWl/K,EAAK68K,YAC/C78K,EAAKg/K,YAAYX,EAAWr+K,EAAKi/K,aAAa5yI,KAAKrsC,IACnDA,EAAKu9K,0BAA0Bv9K,EAAKg9B,aAOrC6+I,EAAAvwL,UAAA8zL,sBAAP,WAEIh0L,KAAKowL,aAAepwL,KAAK8xL,yBAMtBrB,EAAAvwL,UAAAsmC,YAAP,WACIxmC,KAAKkxL,YAAYhvL,MAAK,GACtBlC,KAAKkxL,YAAYzqJ,WAEjBzmC,KAAKmxL,sBAAsBjvL,MAAK,GAChClC,KAAKmxL,sBAAsB1qJ,YAMxBgqJ,EAAAvwL,UAAAioE,WAAP,SAAkBhmE,GACTA,GAILnC,KAAKiyL,gBAAgB9vL,IAMlBsuL,EAAAvwL,UAAAkoE,iBAAP,SAAwBthB,GACpB9mD,KAAKwmE,kBAAoB1f,GAMtB2pI,EAAAvwL,UAAAmoE,kBAAP,SAAyBvhB,GACrB9mD,KAAKumE,mBAAqBzf,GAIvB2pI,EAAAvwL,UAAA8hE,eAAP,WACI,OAAOhiE,KAAK2yL,QAAU3yL,KAAKizL,UAAU3yJ,cAAgBtgC,KAAKgzL,QAAQ1yJ,eAO/DmwJ,EAAAvwL,UAAAy8G,OAAP,SAAc6yE,GACNxvL,KAAK4xC,WAKT5xC,KAAKuvL,MAAMrtL,KAAKstL,GAIhBxvL,KAAK+xL,gCACL/xL,KAAKumE,uBAMFkqH,EAAAvwL,UAAA2zL,aAAP,SAAoB1xL,EAAe8xL,OAG3B5uI,EAFE5iC,EAAWziB,KAAKmC,MAGlBnC,KAAK2yL,SAEDttI,EADA4uI,IAAc3E,GAAaX,KAClB,CACLiE,MAAQ5yL,KAAU,MAAuB4yL,MAAQzwL,EACjD0wL,MAAQ7yL,KAAU,MAAuB6yL,OAGpC,CACLD,MAAQ5yL,KAAU,MAAuB4yL,MACzCC,MAAQ7yL,KAAU,MAAuB6yL,MAAQ1wL,IAK9CywL,OAASvtI,EAAOwtI,MACvB7yL,KAAKmC,MAAQnC,KAAKk0L,UAAU7uI,GAE5BrlD,KAAKmC,MAAQkjD,EAIjBrlD,KAAKmC,MAAQnC,KAAU,MAAamC,EAGpCnC,KAAKm0L,gBAAgB1xK,IACrBziB,KAAKo0L,iBAAiB3xK,IAOvBguK,EAAAvwL,UAAAm0L,cAAP,WACIr0L,KAAKqzL,0BAGF5C,EAAAvwL,UAAAivL,cAAP,SAAqB5gL,GACjB,OAAOA,EAAQvO,KAAKkzL,uBAAyBlzL,KAAKozL,wBAG9C3C,EAAAvwL,UAAAg0L,UAAR,SAAkB/xL,GAWd,OAVInC,KAAKizL,UAAUngF,UACf3wG,EAAM0wL,MAAQ7yL,KAAK2xL,WACnBxvL,EAAMywL,MAAQ5yL,KAAK2xL,aAEnBxvL,EAAM0wL,MAAQ7yL,KAAKyxL,WACnBtvL,EAAMywL,MAAQ5yL,KAAKyxL,YAGvBzxL,KAAKs0L,cAEEnyL,GAGHsuL,EAAAvwL,UAAA6yL,iBAAR,SAAyBzgL,GACjBtS,KAAK2yL,QACL3yL,KAAKu0L,cAAcjiL,GAEnBtS,KAAKgzL,QAAQ1yJ,cAAciT,QAG/BvzC,KAAK28G,OAAOrqG,EAAMu4D,UAGd4lH,EAAAvwL,UAAAmyL,iCAAR,WACIryL,KAAKoyL,WAAapyL,KAAK+lG,SACvB/lG,KAAK0wL,MAAQ,GAGTD,EAAAvwL,UAAAqyL,iCAAR,WACIvyL,KAAKsyL,WAAatyL,KAAK8lG,SACvB9lG,KAAK2wL,MAAQ,GAGTF,EAAAvwL,UAAAyzL,YAAR,WAIS3zL,KAAK2yL,SAAW3yL,KAAKmC,QAAUnC,KAAKsyL,aACrCtyL,KAAKmC,MAAQnC,KAAKoyL,aAIlB3B,EAAAvwL,UAAA4xL,sBAAR,WACI,OAAO9xL,KAAKk3E,IAAI52C,cAAcpvB,wBAAwBD,OAASjR,KAAK8lG,SAAW9lG,KAAK+lG,UAAY/lG,KAAKu+E,MAGjGkyG,EAAAvwL,UAAAo0L,YAAR,WACI,OAAOt0L,KAAKizL,UAAUngF,SAClB9yG,KAAKgzL,QAAQ1yJ,cAAciT,QAC3BvzC,KAAKizL,UAAU3yJ,cAAciT,SAG7Bk9I,EAAAvwL,UAAAolK,aAAR,SAAqBnjK,EAAO8mC,EAAS5e,GACjC,YADwB,IAAA4e,IAAAA,EAAA,QAAS,IAAA5e,IAAAA,EAAA,KAC1B5O,KAAK4O,IAAI5O,KAAKwtB,IAAI9mC,EAAOkoB,GAAM4e,IAGlCwnJ,EAAAvwL,UAAAs0L,kBAAR,SAA0BrhI,EAAewF,GACrC,OAAoB,OAAbA,EAAoB,iEAErBxF,EAAK,kBACLA,EAAK,oEAEOwF,EAAQ,gFAGpBxF,EAAK,kBACLA,EAAK,oEAEOwF,EAAQ,eACrBA,GAGD83H,EAAAvwL,UAAA6zL,eAAR,SAAuBU,EAAyBC,EAAyBh4J,OAC/Di4J,EAAmD,IAAjC30L,KAAKyyL,gBAAgB/1J,GAAe,IAExD+3J,IACAA,EAAYn0J,cAAcj9B,MAAMo3B,KAAOk6J,GAGvCD,IACAA,EAAYp0J,cAAcj9B,MAAMo3B,KAAOk6J,IAIvClE,EAAAvwL,UAAA6xL,8BAAR,WACS/xL,KAAK2yL,SAGN3yL,KAAK+zL,eAAe/zL,KAAKgzL,QAAShzL,KAAK40L,QAAU50L,KAAU,MAAuB6yL,OAClF7yL,KAAK+zL,eAAe/zL,KAAKizL,UAAWjzL,KAAK8zL,UAAY9zL,KAAU,MAAuB4yL,QAHtF5yL,KAAK+zL,eAAe/zL,KAAKgzL,QAAShzL,KAAK40L,QAAS50L,KAAU,OAM9DA,KAAK6xL,eAGDpB,EAAAvwL,UAAAq0L,cAAR,SAAsBjiL,OACZuiL,EAAa70L,KAAKizL,UAAU3yJ,cAAcw0J,WAAa90L,KAAKizL,UAAU3yJ,cAAc84F,YAAc,EAClG27D,EAAW/0L,KAAKgzL,QAAQ1yJ,cAAcw0J,WAAa90L,KAAKgzL,QAAQ1yJ,cAAc84F,YAAc,EAC5F47D,EAAW1iL,EAAMu4D,QAAU7qE,KAAKk3E,IAAI52C,cAAcpvB,wBAAwBupB,KAC1E4jC,EAAQr+D,KAAKi1L,UAAUD,EAAU,CAACH,EAAYE,IAEhDF,IAAeE,GAAYA,EAAWC,EACtCh1L,KAAKgzL,QAAQ1yJ,cAAciT,QACpBshJ,IAAeE,GAAYA,EAAWC,EAC7Ch1L,KAAKizL,UAAU3yJ,cAAciT,QACtB8qB,IAAUw2H,EACjB70L,KAAKizL,UAAU3yJ,cAAciT,QAE7BvzC,KAAKgzL,QAAQ1yJ,cAAciT,SAI3Bk9I,EAAAvwL,UAAA8xL,gBAAR,SAAwBJ,OAChBj5H,EAEJ,GAAI34D,KAAK0xL,kBAEL/4H,EAHkB,KAGY34D,KAAK4xL,OAAOjxL,OAAS,GAAK,GAAO,OAC5D,KACGu0L,EAAal1L,KAAK8lG,SAAW9lG,KAAK+lG,SACxCptC,EAAW34D,KAAKu+E,KAAO,EANL,KAOK22G,EAAal1L,KAAKu+E,MAAS,GAAM,GAClD,SAGJ42G,EAA2Bn1L,KAAKuwL,WAAyD,KAA5CvwL,KAAKw0L,kBAAkB,QAAS77H,GACnF34D,KAAKs1D,SAASpuB,SAASlnC,KAAKo1L,MAAM90J,cAAe,aAAc60J,IAG3D1E,EAAAvwL,UAAAgzL,qBAAR,WACQlzL,KAAK4xC,WAIL5xC,KAAKq1L,mBACLr1L,KAAKmxL,sBAAsBjvL,MAAK,GAChClC,KAAKq1L,iBAAmB,MAG5Br1L,KAAKgzL,QAAQnD,sBACb7vL,KAAK40L,QAAQv9G,QAAS,EAClBr3E,KAAKizL,WACLjzL,KAAKizL,UAAUpD,sBAGf7vL,KAAK8zL,YACL9zL,KAAK8zL,UAAUz8G,QAAS,KAKxBo5G,EAAAvwL,UAAAkzL,qBAAR,WAAA,IAAAx+K,EAAA5U,KACQA,KAAK4xC,WAIT5xC,KAAKq1L,iBAAmBvuB,EAAAA,MAAM9mK,KAAKuxL,8BACnCvxL,KAAKq1L,iBAAiBxwJ,KAAKC,EAAAA,UAAU9kC,KAAKmxL,wBAAwBpsJ,UAAU,WACxEnwB,EAAKo+K,QAAQjD,sBACbn7K,EAAKggL,QAAQv9G,QAAS,EAClBziE,EAAKq+K,WACLr+K,EAAKq+K,UAAUlD,sBAGfn7K,EAAKk/K,YACLl/K,EAAKk/K,UAAUz8G,QAAS,OAK5Bo5G,EAAAvwL,UAAAmzL,uBAAR,WACIrzL,KAAKkzL,uBACLlzL,KAAKozL,wBAGD3C,EAAAvwL,UAAAiyL,0BAAR,SAAkC5jL,OACxBpM,EAAQoM,GAAS,EAAI,EAEvBvO,KAAK2yL,UACL3yL,KAAKizL,UAAUpqH,SAAW1mE,GAG9BnC,KAAKgzL,QAAQnqH,SAAW1mE,EAExBnC,KAAKw8E,KAAKj6C,iBAGNkuJ,EAAAvwL,UAAA+0L,UAAR,SAAkBn0B,EAAcw0B,GAC5B,OAAOA,EAAUnqK,OAAO,SAACqmI,EAAUj9D,GAC/B,OAAQ94E,KAAKutB,IAAI83H,EAAOvsE,GAAW94E,KAAKutB,IAAI83H,EAAOtP,GAAYj9D,EAAUi9D,KAIzEi/B,EAAAvwL,UAAAuyL,gBAAR,SAAwBtwL,EAAeozL,EAAmBC,GACtD,YADmC,IAAAD,IAAAA,EAAOv1L,KAAK0wL,YAAO,IAAA8E,IAAAA,EAAOx1L,KAAK2wL,OAC3D3wL,KAAKslK,cAAcnjK,EAAQnC,KAAK+lG,WAAa/lG,KAAK8lG,SAAW9lG,KAAK+lG,UAAWwvF,EAAMC,IAQtF/E,EAAAvwL,UAAA+xL,gBAAR,SAAwB9vL,GAChBnC,KAAK2yL,QACL3yL,KAAKmC,MAAS,CACVywL,MAAO,EAA6BA,MAAS,EAA6BA,MAAQ5yL,KAAKu+E,KACvFs0G,MAAO,EAA6BA,MAAS,EAA6BA,MAAQ7yL,KAAKu+E,MAG3Fv+E,KAAKmC,MAAQ,EAAqB,EAAoBnC,KAAKu+E,MAI3DkyG,EAAAvwL,UAAA2xL,YAAR,eACU/mL,EAAe9K,KAAKyyL,gBAAgBzyL,KAAKyxL,YACzC1mL,EAAa/K,KAAKyyL,gBAAgBzyL,KAAK2xL,YACvC8D,EAAc1qL,EAAaD,EAE7B4qL,EAAqB5qL,EACrB9K,KAAK2yL,SACD8C,IACAC,EAAqBj6K,KAAK4rB,MAAO,EAAIouJ,EAAc3qL,EAAgB,MAGvE9K,KAAKs1D,SAASpuB,SAASlnC,KAAK21L,MAAMr1J,cAAe,YAAa,UAAUm1J,EAAW,gBAAgBC,EAAkB,OAErH11L,KAAKs1D,SAASpuB,SAASlnC,KAAK21L,MAAMr1J,cAAe,YAAa,UAAUv1B,EAAU,MAIlF0lL,EAAAvwL,UAAA4yL,qBAAR,SAA6B3wL,GAgBzB,OAfIA,EAAMywL,MAAQ5yL,KAAKoyL,YAAcjwL,EAAM0wL,MAAQ7yL,KAAKoyL,aACpDjwL,EAAM0wL,MAAQ7yL,KAAKoyL,WACnBjwL,EAAMywL,MAAQ5yL,KAAKoyL,YAGnBjwL,EAAMywL,MAAQ5yL,KAAKsyL,YAAcnwL,EAAM0wL,MAAQ7yL,KAAKsyL,aACpDnwL,EAAM0wL,MAAQ7yL,KAAKsyL,WACnBnwL,EAAMywL,MAAQ5yL,KAAKsyL,YAGnBnwL,EAAM0wL,MAAQ1wL,EAAMywL,QACpBzwL,EAAM0wL,MAAQ7yL,KAAK2xL,WACnBxvL,EAAMywL,MAAQ5yL,KAAKyxL,YAGhBtvL,GAGHsuL,EAAAvwL,UAAA0zL,YAAR,SAAoBpC,EAAgC5hG,GAC3C4hG,GAILA,EAAMvC,mBACDpqJ,KAAKC,EAAAA,UAAU9kC,KAAK41L,aAAapE,KACjCzsJ,UAAU,SAAA5iC,GAAS,OAAAytF,EAASztF,EAAOqvL,EAAMt/K,SAG1Cu+K,EAAAvwL,UAAA01L,aAAR,SAAqBpE,GACjB,OAAOqE,EAAAA,MAAM71L,KAAKkxL,YAAaM,EAAMxvJ,UAGjCyuJ,EAAAvwL,UAAAi0L,gBAAR,SAAwB1xK,OACdqzK,GAAuC91L,KAAK2yL,SAAWlwK,IAAaziB,KAAKmC,MACzE4zL,EAAwC/1L,KAAK2yL,UAC9C,EAAgCC,QAAW5yL,KAAU,MAAuB4yL,OACzE,EAAgCC,QAAW7yL,KAAU,MAAuB6yL,OAEpF,OAAOiD,GAA8BC,GAGjCtF,EAAAvwL,UAAAk0L,iBAAR,SAAyB3xK,GACrBziB,KAAKqmE,cAAc9jD,KAAK,CAAEE,SAAQA,EAAEtgB,MAAOnC,KAAKmC,6BA9qCvD2vC,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAEg9C,QAAS8V,EAAAA,kBAAmB7V,YAAaqkI,EAAoBnoH,OAAO,IAClF55D,SAAU,aACVqjC,SAAA,unDAlD8CwhB,EAAAA,iBADpBjwB,EAAAA,kBAS1B2L,EAAAA,oDAkFCwH,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,mBAM7BF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,oBAM7BinC,EAAAA,aAAY5vE,KAAA,CAAC6gL,uBAMbjxG,EAAAA,aAAY5vE,KAAA,CAACwiL,kCAgCbnkI,EAAAA,aAAYr+C,KAAA,CAACwgL,GAA+B,CAAE93I,KAAMoS,EAAAA,YAAanS,UAAQ,gCAMzE0V,EAAAA,aAAYr+C,KAAA,CAACygL,GAA6B,CAAE/3I,KAAMoS,EAAAA,YAAanS,UAAQ,kBAMvExH,EAAAA,YAAWnhC,KAAA,CAAC,+BAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wCAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,2CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CAYZmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,oBAYAA,EAAAA,4CAoCAA,EAAAA,sBAUAA,EAAAA,oBAyCAA,EAAAA,wBAmCAA,EAAAA,0BA6BAA,EAAAA,4BA4BAA,EAAAA,wBAqCAA,EAAAA,wBA8CAA,EAAAA,0BA8CAA,EAAAA,0BAsCAA,EAAAA,qBAkDAA,EAAAA,6BA4BAgd,EAAAA,8BASA/c,EAAAA,aAAYZ,KAAA,CAAC,cAAe,CAAC,gCAmB7BY,EAAAA,aAAYZ,KAAA,CAAC,YAAa,CAAC,4BAe3BY,EAAAA,aAAYZ,KAAA,CAAC,gCAQbY,EAAAA,aAAYZ,KAAA,CAAC,MAAO,CAAC,+BAKrBY,EAAAA,aAAYZ,KAAA,CAAC,8BAKbY,EAAAA,aAAYZ,KAAA,CAAC,aAhTdilC,EAAAA,CADC/U,GAAkB,oLAs1BvBuyJ,EAhrCA,GAqrCAuF,GAAA,WAAA,SAAAA,KAgBA,2BAhBChnL,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVwhL,GACAjC,GACAC,GACAI,GACA2B,IACJthL,QAAS,CACLuhL,GACAjC,GACAC,GACAI,GACA2B,IACJ/zI,QAAS,CAACC,EAAAA,kBAGds5I,EAhBA,GCrtCIxkJ,GAAU,EAiBdykJ,GAAA,WA0JI,SAAAA,EAAoB5gI,GAAAr1D,KAAAq1D,KAAAA,EAvFbr1D,KAAA2N,GAAK,gBAAgB6jC,KAsBZxxC,KAAAu7F,WAAY,EAYZv7F,KAAAk2L,UAAW,EAYXl2L,KAAAm2L,YAAc,IAiBbn2L,KAAAw6E,SAAW,IAAIrxD,EAAAA,aASfnpB,KAAAo2L,iBAAmB,IAAIjtK,EAAAA,aASvBnpB,KAAAqwF,cAAgB,IAAIlnE,EAAAA,aA4DzC,OA9CW8sK,EAAA/1L,UAAAkhC,KAAP,WAAA,IAAAxsB,EAAA5U,KACI4wE,aAAa5wE,KAAK6wE,WAClB9kB,WAAW/rD,KAAK6wE,WAChB7wE,KAAKu7F,WAAY,EAEbv7F,KAAKk2L,WACLl2L,KAAK6wE,UAAY9kB,WAAW,WACxBn3C,EAAK4sB,QACNxhC,KAAKm2L,eAUTF,EAAA/1L,UAAAshC,KAAP,WACIxhC,KAAKu7F,WAAY,EACjB3qB,aAAa5wE,KAAK6wE,YAKfolH,EAAA/1L,UAAAm2L,cAAP,WACIr2L,KAAKw6E,SAASj4D,KAAKviB,OAMhBi2L,EAAA/1L,UAAAo2L,yBAAP,SAAgCv+I,GACN,SAAlBA,EAAIw+I,WACJv2L,KAAKo2L,iBAAiB7zK,KAAKw1B,IAO5Bk+I,EAAA/1L,UAAAs2L,sBAAP,SAA6Bz+I,GACH,SAAlBA,EAAIw+I,WACJv2L,KAAKqwF,cAAc9tE,KAAKw1B,wBA7MnCjG,EAAAA,UAAS9jC,KAAA,CAAC,CACP+iF,WAAY,CACRhvB,EAAAA,QAAQ,aAAc,CAClBivB,EAAAA,WAAW,YAAa,CACpBxgB,EAAAA,aAAarlE,GAAe,CACxBlH,OAAQ,CACJP,SAAU,OACVC,OAAQ,iCACRmH,aAAc,mBACdC,WAAY,qBAIxBimF,EAAAA,WAAW,YAAa,CACpBxgB,EAAAA,aAAa9kE,GAAgB,CACzBzH,OAAQ,CACJP,SAAU,MACVC,OAAQ,+BACRmH,aAAc,gBACd2rL,UAAW,EACX1rL,WAAY,0BAK5Bg3D,EAAAA,QAAQ,YAAa,CACjBivB,EAAAA,WAAW,YAAa,CACpBxgB,EAAAA,aAAazsE,EAAQ,CACjBE,OAAQ,CACJP,SAAU,OACVC,OAAQ,gBAIpBqtF,EAAAA,WAAW,YAAa,CACpBxgB,EAAAA,aAAatsE,EAAS,CAClBD,OAAQ,CACJP,SAAU,MACVC,OAAQ,mBAM5B+K,SAAU,eACVqjC,SAAA,kfACS,gHApEThL,EAAAA,sCAuFCoI,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAWAA,EAAAA,yBAYAA,EAAAA,wBAYAA,EAAAA,2BAYAA,EAAAA,0BAQAA,EAAAA,wBASAgd,EAAAA,iCASAA,EAAAA,8BASAA,EAAAA,UA4DLsqK,EAhNA,GAqNAS,GAAA,WAAA,SAAAA,KAKiC,2BALhC1nL,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACgnL,IACf/mL,QAAS,CAAC+mL,IACVx5I,QAAS,CAACC,EAAAA,kBAEmBg6I,EALjC,OCrOIluH,OAAS,SACTC,MAAQ,SAQNtC,GAAO,aACTuC,GAAS,EAcbiuH,GAAA,WAAA,SAAAA,IA+CoB32L,KAAA2N,GAAK,cAAc+6D,KAYnB1oE,KAAA6xC,QAAa7xC,KAAK2N,GAAE,SAiCpB3N,KAAA6oE,SAAmB,KAYnB7oE,KAAA4oE,cAA8C,QAY9C5oE,KAAA8oE,eAAgB,EAYhB9oE,KAAA0uD,UAAW,EAapB1uD,KAAA+oE,eAAiB/oE,KAAK6xC,QAYtB7xC,KAAAgpE,UAA2B,KAOzBhpE,KAAAusC,OAA+C,IAAIpjB,EAAAA,aAKpDnpB,KAAAumE,mBAAiCJ,GAKjCnmE,KAAAwmE,kBAAsCL,GASvCnmE,KAAAi1C,SAAW,aAaFj1C,KAAAipE,SAAU,EAaVjpE,KAAA4xC,UAAW,EAapB5xC,KAAAyyC,SAAU,EAIVzyC,KAAAkpE,QAAalpE,KAAK2N,GAAE,SAsF/B,OA9EWgpL,EAAAz2L,UAAA6N,OAAP,WACQ/N,KAAK4xC,WAIT5xC,KAAKipE,SAAWjpE,KAAKipE,QACrBjpE,KAAKyyC,SAAU,EACfzyC,KAAKusC,OAAOhqB,KAAK,CAAE0mD,QAASjpE,KAAKipE,QAAS2tH,SAAQ52L,OAClDA,KAAKwmE,kBAAkBxmE,KAAKipE,WAKzB0tH,EAAAz2L,UAAA22L,gBAAP,SAAuBvkL,GACnBA,EAAMmyB,mBAKHkyJ,EAAAz2L,UAAA42L,eAAP,SAAsBxkL,GAClBA,EAAMmyB,kBACNzkC,KAAK+N,SAEDoD,MACAnR,KAAKy1F,eAAen1D,cAAcipC,QAMnCotH,EAAAz2L,UAAAspE,cAAP,SAAqBl3D,GACjBtS,KAAK+N,UAKF4oL,EAAAz2L,UAAA0uD,QAAP,SAAet8C,GACXtS,KAAKyyC,SAAU,GAKZkkJ,EAAAz2L,UAAA4uD,OAAP,SAAcx8C,GACVtS,KAAKyyC,SAAU,EACfzyC,KAAKumE,sBAKFowH,EAAAz2L,UAAAioE,WAAP,SAAkBhmE,GACdnC,KAAKmpE,OAAShnE,EACdnC,KAAKipE,UAAYjpE,KAAKmpE,QAG1BwtH,EAAAz2L,UAAA8hE,eAAA,WACI,OAAOhiE,KAAKy1F,eAAen1D,eAM/B9gC,OAAAgC,eAAWm1L,EAAAz2L,UAAA,aAAU,KAArB,WACI,OAAQF,KAAK4oE,eACT,KAAKmuH,GAAoBvuH,OACrB,OAAUxoE,KAAKi1C,SAAQ,kBAC3B,KAAK8hJ,GAAoBtuH,MACzB,QACI,OAAUzoE,KAAKi1C,SAAQ,4CAM5B0hJ,EAAAz2L,UAAAkoE,iBAAP,SAAwBthB,GAAwB9mD,KAAKwmE,kBAAoB1f,GAIlE6vI,EAAAz2L,UAAAmoE,kBAAP,SAAyBvhB,GAAkB9mD,KAAKumE,mBAAqBzf,uBAnTxEhV,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CAAC,CAAEg9C,QAAS8V,EAAAA,kBAAmB7V,YAAauqI,EAAoBruH,OAAO,IAClF55D,SAAU,aACVqjC,SAAA,6gCAcC0E,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,yBAQhCF,EAAAA,UAASzoC,KAAA,CAAC,QAAS,CAAE2oC,UAAQ,8BAQ7BF,EAAAA,UAASzoC,KAAA,CAAC,mBAAoB,CAAE2oC,UAAQ,gBAaxCxH,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAYAA,EAAAA,qBAWAA,EAAAA,oBAWAA,EAAAA,wBAWAA,EAAAA,6BAYAA,EAAAA,6BAYAA,EAAAA,wBAYAA,EAAAA,8BAYAA,EAAAA,MAAKX,KAAA,CAAC,sCAYNW,EAAAA,MAAKX,KAAA,CAAC,8BAON2d,EAAAA,yBAmBAwjB,EAAAA,YAAWnhC,KAAA,CAAC,qCAaZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8BAA2B,CAAAkE,KACvCvD,EAAAA,wBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,+BAA4B,CAAAkE,KACxCvD,EAAAA,uBAYAwgC,EAAAA,YAAWnhC,KAAA,CAAC,gCA2FjB2oL,EApTA,GAsTaK,GAA0C,CACnD7qI,QAASypC,EAAAA,cACTxpC,YAAaG,EAAAA,WAAW,WAAM,OAAA0qI,KAC9B3uH,OAAO,GAIX2uH,GAAA,SAAAn9K,GAAA,SAAAm9K,mDAM4E,OAA5Bj/K,EAAAA,EAAAA,uBAN/CvJ,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,oHAGVS,UAAW,CAAC6nL,QAE4DC,EAN5E,CAMgDnhG,EAAAA,2BAKhDohG,GAAA,WAAA,SAAAA,KAK+B,2BAL9BloL,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC0nL,GAAoBM,IACnC/nL,QAAS,CAACynL,GAAoBM,IAC9Bx6I,QAAS,CAACuuB,QAEiBksH,EAL/B,GCnVI1lJ,GAAU,EAEd2lJ,GAAA,WAKI,SAAAA,EAAmBplJ,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wDAlBVo6C,EAAAA,eAwBJquI,EAPA,GAuBAC,GAAA,WAuII,SAAAA,EAAoB/pI,GAAArtD,KAAAqtD,SAAAA,EA7HZrtD,KAAAq3L,oBAAsB7lJ,KA0DvBxxC,KAAA2N,GAAK,kBAAkB3N,KAAKq3L,oBAUlBr3L,KAAAs3L,cAAgB,IAAInuK,EAAAA,aAUpBnpB,KAAAu3L,gBAAkB,IAAIpuK,EAAAA,aAShCnpB,KAAAw3L,eAAiB,EAuBhBx3L,KAAAy3L,WAAa,iBAgHzB,OA/LIj4L,OAAAgC,eAAW41L,EAAAl3L,UAAA,OAAI,KAAf,WACI,OAAOF,KAAK03L,eAAiB13L,KAAK23L,YAAc33L,KAAK43L,0CAgEzDp4L,OAAAgC,eAAW41L,EAAAl3L,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKy3L,4CAMhBj4L,OAAAgC,eAAW41L,EAAAl3L,UAAA,iBAAc,KAAzB,WACI,OAAQF,KAAK23L,aAAe33L,KAAK23L,YAAYh3L,OAAS,mCAe1DnB,OAAAgC,eAAI41L,EAAAl3L,UAAA,cAAW,KAAf,WACI,GAAIF,KAAK63L,MAAQ73L,KAAKw3L,gBAAkBxjL,UACpC,OAAOhU,KAAK63L,KAAKjlL,UAAU5S,KAAKw3L,gDAUjCJ,EAAAl3L,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACIA,KAAK83L,sBACL93L,KAAK+3L,gBAAkB/3L,KAAKg4L,OAAO/1I,QAAQld,UAAU,WACjDnwB,EAAKkjL,wBAIT/rI,WAAW,WACP,IAA4B,IAAxBn3C,EAAK4iL,cAAsB,KAErB79G,EADmB/kE,EAAKojL,OAAOh+K,OAAO,SAACpa,GAAM,OAACA,EAAEgyC,WACvB,GAC3B+nC,GACAA,EAAMxnB,WAGf,IAMAilI,EAAAl3L,UAAAsmC,YAAP,WACQxmC,KAAK+3L,iBACL/3L,KAAK+3L,gBAAgB7pJ,eAIrBkpJ,EAAAl3L,UAAA43L,oBAAR,WAEI,QADMG,EAAcj4L,KAAKg4L,OAAOplL,UACvBe,EAAQ,EAAGA,EAAQ3T,KAAKg4L,OAAOr3L,OAAQgT,IAAS,KAC/CukL,EAAYD,EAAYtkL,GAC9BukL,EAAU53J,cAAcgzB,aAAa,KAAMtzD,KAAKm4L,cAAcxkL,IAC9DukL,EAAU53J,cAAcgzB,aAAa,kBAAmBtzD,KAAKo4L,SAASzkL,MAQvEyjL,EAAAl3L,UAAAm4L,sBADP,SAC6BrqL,GAD7B,IAAA4G,EAAA5U,KAEQA,KAAK03L,gBACL13L,KAAKw3L,cAAgBxpL,EAAKsqL,IAAI3kL,MAC9B3T,KAAK23L,YAAYllL,QAAQ,SAACnS,GAClBA,IAAM0N,EAAKsqL,KACX1jL,EAAK2jL,aAAaj4L,MAItB0N,EAAK2rE,QACL35E,KAAKw3L,cAAgBxpL,EAAK2rE,MAAMhmE,MAChC3T,KAAKg4L,OAAOvlL,QAAQ,SAAC7S,GACbA,EAAE+T,QAAUiB,EAAK4iL,eACjB5iL,EAAK4jL,eAAe54L,OAUhCw3L,EAAAl3L,UAAAs4L,eAAR,SAAuB7+G,GAEfA,EAAM/nC,UAAY5xC,KAAKy4L,YAAY9kL,QAAUgmE,EAAMhmE,QAIvDgmE,EAAM2T,YAAa,EACnBttF,KAAKu3L,gBAAgBh1K,KAAK,CAAE+1K,IAAKt4L,KAAK63L,KAAKl+G,EAAMhmE,OAAQgmE,MAAKA,MAG1Dy9G,EAAAl3L,UAAAq4L,aAAR,SAAqBG,GACjBA,EAAKprG,YAAa,EAClBttF,KAAKu3L,gBAAgBh1K,KAAK,CAAE+1K,IAAKI,EAAM/+G,MAAO,QAM3Cy9G,EAAAl3L,UAAAk4L,SAAP,SAAgBzkL,GACZ,MAAO,WAAW3T,KAAKq3L,oBAAmB,IAAI1jL,GAM3CyjL,EAAAl3L,UAAAi4L,cAAP,SAAqBxkL,GACjB,MAAO,iBAAiB3T,KAAKq3L,oBAAmB,IAAI1jL,uBAtO3Dm+B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,iBACVqjC,SAAA,gjBACS,gHApDTzO,EAAAA,gDAqECs6C,EAAAA,aAAY5vE,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAAosI,2BAU9BrsI,EAAAA,gBAAet+C,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAAosI,sBAsBjCrsI,EAAAA,gBAAet+C,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAAqsI,kBAcjCzpJ,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,6BAWAgd,EAAAA,gCAUAA,EAAAA,sCA4FA/c,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,cAoDpCopL,EAxOA,GA4OAwB,GAAA,WA0LI,SAAAA,EAAoBC,EAAwCxrI,GAAxCrtD,KAAA64L,QAAAA,EAAwC74L,KAAAqtD,SAAAA,EAjLpDrtD,KAAAy3L,WAAa,gBAKbz3L,KAAA84L,aAAc,EA6CW94L,KAAA0xC,KAAO,WA2J5C,OAlJIlyC,OAAAgC,eACIo3L,EAAA14L,UAAA,aAAU,KADd,WAEI,OAASF,KAAKstF,4CAalB9tF,OAAAgC,eACWo3L,EAAA14L,UAAA,aAAU,KADrB,WAEI,OAAOF,KAAK84L,iBAEhB,SAAsBz8K,GACdrc,KAAK84L,cAAgBz8K,IACjBA,EACArc,KAAKmyD,SAELnyD,KAAK84L,YAAcz8K,oCAY/B7c,OAAAgC,eAAWo3L,EAAA14L,UAAA,YAAS,KAApB,WACI,OAAOF,KAAKy3L,4CAShBj4L,OAAAgC,eAAWo3L,EAAA14L,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKqtD,SAAS/sB,+CAUzB9gC,OAAAgC,eAAIo3L,EAAA14L,UAAA,aAAU,KAAd,WACI,GAAIF,KAAK64L,QAAQhB,KACb,OAAO73L,KAAK64L,QAAQhB,KAAKjlL,UAAU5S,KAAK2T,wCAShDnU,OAAAgC,eAAIo3L,EAAA14L,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAK+4L,WAAa/4L,KAAK+4L,WAAWC,aAAe,mCAU5Dx5L,OAAAgC,eAAIo3L,EAAA14L,UAAA,QAAK,KAAT,WACI,GAAIF,KAAK64L,QAAQb,OACb,OAAOh4L,KAAK64L,QAAQb,OAAOplL,UAAUtB,QAAQtR,uCAWrDR,OAAAgC,eAAIo3L,EAAA14L,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKi5L,kBAUhB,SAAsBlnJ,GAClB/xC,KAAKi5L,aAAelnJ,mCAoBjB6mJ,EAAA14L,UAAAq4D,mBAAP,WACQv4D,KAAKk5L,cACLl5L,KAAKi5L,aAAej5L,KAAKk5L,YAAYnnJ,WAYtC6mJ,EAAA14L,UAAAiyD,OAAP,WACQnyD,KAAK4xC,UAAY5xC,KAAK64L,QAAQrB,gBAAkBx3L,KAAK2T,QAIzD3T,KAAK84L,aAAc,EACnB94L,KAAK64L,QAAQvB,cAAc/0K,KAAK,CAAE+1K,IAAKt4L,KAAK64L,QAAQhB,KAAKjlL,UAAU5S,KAAK2T,OAAQgmE,MAAO35E,6BApN9F8xC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,gBACVqjC,SAAA,2EAwL6BqlJ,UAvd7B9zJ,EAAAA,6CAuTC30B,EAAAA,oBAYAA,EAAAA,wBAYAA,EAAAA,oBASAwgC,EAAAA,YAAWnhC,KAAA,CAAC,iCASZmhC,EAAAA,YAAWnhC,KAAA,CAAC,mDAeZmhC,EAAAA,YAAWnhC,KAAA,CAAC,8DAoGZq+C,EAAAA,aAAYr+C,KAAA,CAACmpL,GAAyB,CAAEzgJ,KAAMygJ,GAAyBxgJ,UAAQ,OA+BpFiiJ,EAtNA,GA0NAD,GAAA,WAiOI,SAAAA,EAAoBE,EAAwCxrI,GAAxCrtD,KAAA64L,QAAAA,EAAwC74L,KAAAqtD,SAAAA,EApNrDrtD,KAAA0xC,KAAO,MAMP1xC,KAAAgpE,UAAYhpE,KAAKq5E,MAMjBr5E,KAAAm5L,aAAen5L,KAAK4xC,SAMpB5xC,KAAAo5L,aAAep5L,KAAKstF,WAoEnBttF,KAAAq5L,cAAgB,EAWhBr5L,KAAAqyC,WAAY,EAqBbryC,KAAAmyC,WAAY,EA8HvB,OAtMI3yC,OAAAgC,eACWm3L,EAAAz4L,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKs5L,aAAet5L,KAAKs5L,aAAajgH,MAAQr5E,KAAKqzD,YAE9D,SAAiBh3C,GACTrc,KAAKs5L,eACLt5L,KAAKs5L,aAAajgH,MAAQh9D,GAE9Brc,KAAKqzD,OAASh3C,mCAkBlB7c,OAAAgC,eACWm3L,EAAAz4L,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKs5L,aAAet5L,KAAKs5L,aAAahhH,KAAOt4E,KAAKsuH,WAE7D,SAAgBjyG,GACRrc,KAAKs5L,eACLt5L,KAAKs5L,aAAahhH,KAAOj8D,GAE7Brc,KAAKsuH,MAAQjyG,mCAajB7c,OAAAgC,eAAIm3L,EAAAz4L,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKq5L,+CAYhB75L,OAAAgC,eACIm3L,EAAAz4L,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKs5L,aAAet5L,KAAKs5L,aAAa1nJ,SAAW5xC,KAAKqyC,eAEjE,SAAah2B,GACLrc,KAAKs5L,aACLt5L,KAAKs5L,aAAa1nJ,SAAWv1B,EAE7Brc,KAAKqyC,UAAYh2B,mCAazB7c,OAAAgC,eACIm3L,EAAAz4L,UAAA,aAAU,KAUd,WACI,OAAOF,KAAKs5L,aAAet5L,KAAKs5L,aAAahsG,WAAattF,KAAKmyC,eAZnE,SACe91B,GACPrc,KAAKs5L,aACLt5L,KAAKs5L,aAAahsG,WAAajxE,EACxBrc,KAAKmyC,YAAc91B,IAC1Brc,KAAKmyC,UAAY91B,EACbrc,KAAKmyC,WACLnyC,KAAK64L,QAAQvB,cAAc/0K,KAAK,CAAE+1K,IAAKt4L,KAAM25E,MAAO,yCAehEn6E,OAAAgC,eACWm3L,EAAAz4L,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAKstF,4CAGhB9tF,OAAAgC,eACWm3L,EAAAz4L,UAAA,mBAAgB,KAD3B,WAEI,OAAOF,KAAK4xC,0CAGhBpyC,OAAAgC,eACWm3L,EAAAz4L,UAAA,WAAQ,KADnB,WAEI,OAASF,KAAK4xC,WAAa5xC,KAAKstF,4CAUpC9tF,OAAAgC,eAAWm3L,EAAAz4L,UAAA,QAAK,KAAhB,WACI,GAAIF,KAAK64L,QAAQhB,KACb,OAAO73L,KAAK64L,QAAQhB,KAAKjlL,UAAUtB,QAAQtR,uCAmBnDR,OAAAgC,eAAWm3L,EAAAz4L,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKs5L,cAAgBt5L,KAAKs5L,aAAaC,kBAChCv5L,KAAKs5L,aAAaC,kBAEzBv5L,KAAKw5L,qBACEx5L,KAAKw5L,qBAAqBznJ,SAE9B/xC,KAAKy5L,oDAShBj6L,OAAAgC,eAAWm3L,EAAAz4L,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKs5L,aAAet5L,KAAKs5L,aAAet5L,sCAa5C24L,EAAAz4L,UAAAiyD,OAAP,WACQnyD,KAAKs5L,aACLt5L,KAAKs5L,aAAannI,UAElBnyD,KAAKmyC,WAAY,EACjBnyC,KAAK64L,QAAQvB,cAAc/0K,KAAK,CAAE+1K,IAAKt4L,KAAM25E,MAAO,SAQrDg/G,EAAAz4L,UAAAqvC,QADP,WAEQvvC,KAAK05L,eACL15L,KAAKmyD,UAINwmI,EAAAz4L,UAAAmgC,WAAP,WACI,OAAOrgC,KAAKqtD,8BA/PnBvb,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,UACVqjC,SAAA,kgBA+N6BqlJ,UAxtB7B9zJ,EAAAA,4CAmgBC6L,EAAAA,YAAWnhC,KAAA,CAAC,gCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAWZW,EAAAA,qBAkBAA,EAAAA,oBA0BAA,EAAAA,wBAkCAA,EAAAA,0BAqBAA,EAAAA,6BAmBAA,EAAAA,gCAGAwgC,EAAAA,YAAWnhC,KAAA,CAAC,uEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+DAmBZyoC,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,kCAI7D0V,EAAAA,aAAYr+C,KAAA,CAACmpL,GAAyB,CAAEzgJ,KAAMygJ,GAAyBxgJ,UAAQ,qBAoD/E/nC,EAAAA,aAAYZ,KAAA,CAAC,YAUlB2qL,EAjQA,GAsQAgB,GAAA,WAAA,SAAAA,KAMA,2BANC3qL,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACmoL,GAAuBwB,GAAsBD,GAAiBxB,IAC7EjoL,QAAS,CAACkoL,GAAuBwB,GAAsBD,GAAiBxB,IACxE16I,QAAS,CAACC,EAAAA,aAAc+8B,GAAgB7B,QAG5C+hH,EANA,iBClwBA,SAAAC,KAiBA,OAJIA,EAAA15L,UAAA25L,cAAA,SAAc/1J,EAAcg2J,KAC5BF,EAAA15L,UAAA65L,uBAAA,SAAuBC,KACvBJ,EAAA15L,UAAA+5L,0BAAA,SAA0B3B,EAAqB50L,KAC/Ck2L,EAAA15L,UAAAg6L,4BAAA,SAA4Bp2J,EAAsBpgC,KACtDk2L,mBAGA,SAAAO,KAKA,OAHI36L,OAAAgC,eAAI24L,EAAAj6L,UAAA,QAAK,KAAT,WAAsB,OAAO,mCAC7Bi6L,EAAAj6L,UAAAiyD,OAAA,aACAgoI,EAAAj6L,UAAAk6L,oBAAA,SAAoB/9K,KACxB89K,mBAGA,SAAAE,KAGA,OAFIA,EAAAn6L,UAAAiyD,OAAA,aACAkoI,EAAAn6L,UAAAk6L,oBAAA,SAAoB/9K,KACxBg+K,QC1Bc,aACD,YACO,gBAGpBC,GAAA,WAKI,SAAAA,EAAmBzC,GAAA73L,KAAA63L,KAAAA,EA4CvB,OAzCIr4L,OAAAgC,eACI84L,EAAAp6L,UAAA,aAAU,KADd,WAEI,OAAQF,KAAKu6L,wBAA0BC,oCAG3Ch7L,OAAAgC,eACI84L,EAAAp6L,UAAA,YAAS,KADb,WAEI,OAAQF,KAAKu6L,wBAA0BC,oCAG3Ch7L,OAAAgC,eACI84L,EAAAp6L,UAAA,kBAAe,KADnB,WAEI,OAAQF,KAAKu6L,wBAA0BC,oCAGnCF,EAAAp6L,UAAAq6L,oBAAR,eACUE,EAAgBz6L,KAAK63L,KAAKh3C,SAASvgH,cAAc84F,YAIjDshE,EAA8B16L,KAAK63L,KAAK8C,eAAer6J,cAAc3tB,SAAShS,OAChFi6L,EAAsB,EAC1B,GAAIF,EAA8B,EAAG,KAC3BG,EAAU76L,KAAK63L,KAAK8C,eAAer6J,cAAc3tB,SAAS+nL,EAA8B,GAC9FE,EAAsBC,EAAQ/F,WAAa+F,EAAQzhE,gBAEjD0hE,EAAuB96L,KAAK63L,KAAKx+D,gBAAgB/4F,cAAc84F,YAC/D70H,EAASvE,KAAK63L,KAAKtzL,OAIzB,OAAIq2L,EAAsBE,GAAwB,GAAgB,IAAXv2L,EAC5Ci2L,GAGPI,EAPUr2L,EAASk2L,EAQZD,GAEAA,wBA9ClB/rL,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,qEATLkrL,0CAgBJzqJ,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CA+BjBssL,EAjDA,iBAwDI,SAAAS,EAAmBlD,GAAA73L,KAAA63L,KAAAA,EAuCvB,OApCIr4L,OAAAgC,eACIu5L,EAAA76L,UAAA,aAAU,KADd,WAEI,OAAQF,KAAKg7L,uBAAyBR,oCAG1Ch7L,OAAAgC,eACIu5L,EAAA76L,UAAA,YAAS,KADb,WAEI,OAAQF,KAAKg7L,uBAAyBR,oCAG1Ch7L,OAAAgC,eACIu5L,EAAA76L,UAAA,kBAAe,KADnB,WAEI,OAAQF,KAAKg7L,uBAAyBR,oCAGlCO,EAAA76L,UAAA86L,mBAAR,eAGUN,EAA8B16L,KAAK63L,KAAK8C,eAAer6J,cAAc3tB,SAAShS,OAChFi6L,EAAsB,EAC1B,GAAIF,EAA8B,EAAG,KAC3BG,EAAU76L,KAAK63L,KAAK8C,eAAer6J,cAAc3tB,SAAS+nL,EAA8B,GAC9FE,EAAsBC,EAAQ/F,WAAa+F,EAAQzhE,gBAEjD0hE,EAAuB96L,KAAK63L,KAAKx+D,gBAAgB/4F,cAAc84F,YAErE,OAAe,IADAp5H,KAAK63L,KAAKtzL,OAGjBq2L,EAAsBE,GAAwB,EACvCN,GAEJA,GAEAA,wBAzClB/rL,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,oEA5DLkrL,0CAmEJzqJ,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,0CA0BjB+sL,mBAOI,SAAAE,EAAmBlpJ,GAAA/xC,KAAA+xC,SAAAA,EAEvB,2BAPCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,wDA5GVo6C,EAAAA,eAkHJmyI,oBC/BI,SAAAC,EAAoBC,EAA4B9tI,GAAhD,IAAAz4C,EACIkF,EAAAlZ,KAAAZ,OAAOA,YADS4U,EAAAumL,MAAAA,EAA4BvmL,EAAAy4C,SAAAA,EA3DzCz4C,EAAAg9B,UAAW,EAyDVh9B,EAAAkkL,aAAc,EAUflkL,EAAA88B,KAAO,WAOP98B,EAAAwzE,YAAa,IAiFxB,OAnK2CpwE,EAAAA,EAAAA,GAuCvCxY,OAAAgC,eAAW05L,EAAAh7L,UAAA,aAAU,KAArB,WACI,OAAOF,KAAK84L,iBAEhB,SAAsBz8K,GACbrc,KAAK4xC,UAAY5xC,KAAKstF,aAAejxE,GACtCrc,KAAKm7L,MAAMpB,uBAAuB19K,EAAWrc,KAAK+4L,WAAa,uCAUvEv5L,OAAAgC,eAAW05L,EAAAh7L,UAAA,gBAAa,KAAxB,WACI,OAAOF,KAAKqtD,SAAS/sB,+CAuCzB9gC,OAAAgC,eAAI05L,EAAAh7L,UAAA,aAAU,KAAd,WACI,GAAIF,KAAKm7L,MAAMtD,KACX,OAAO73L,KAAKm7L,MAAMtD,KAAKjlL,UAAU5S,KAAK2T,wCAc9CnU,OAAAgC,eAAI05L,EAAAh7L,UAAA,QAAK,KAAT,WACI,OAAIF,KAAKm7L,MAAMhkL,OACJnX,KAAKm7L,MAAMhkL,OAAOvE,UAAUtB,QAAQtR,OAEvC,mCAMZR,OAAAgC,eAAI05L,EAAAh7L,UAAA,oBAAiB,KAArB,WACI,OAAOF,KAAKi5L,kBAMhB,SAAsBlnJ,GAClB/xC,KAAKi5L,aAAelnJ,mCAMjBmpJ,EAAAh7L,UAAAq4D,mBAAP,WACQv4D,KAAKk5L,cACLl5L,KAAKi5L,aAAej5L,KAAKk5L,YAAYnnJ,WAetCmpJ,EAAAh7L,UAAAiyD,OAAP,WACSnyD,KAAK4xC,UAAa5xC,KAAKstF,YACxBttF,KAAKm7L,MAAMpB,uBAAuB/5L,KAAK+4L,aAOxCmC,EAAAh7L,UAAAk6L,oBAAP,SAA2B/9K,GACvBrc,KAAK84L,YAAcz8K,uBAtK1By1B,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,iBACVqjC,SAAA,8FAJK6nJ,UARLt2J,EAAAA,gDAsBC30B,EAAAA,oBAUAA,EAAAA,qBASAA,EAAAA,2BAmCA09C,EAAAA,aAAYr+C,KAAA,CAACitL,GAA6B,CAAEvkJ,KAAMukJ,GAA6BtkJ,UAAQ,kBAavFxH,EAAAA,YAAWnhC,KAAA,CAAC,iCAOZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4BAkFjBktL,GAnK2Cb,mBC6EvC,SAAAe,EAAoBD,EAA4B9tI,EAA8BguI,GAA9E,IAAAzmL,EACIkF,EAAAlZ,KAAAZ,OAAOA,YADS4U,EAAAumL,MAAAA,EAA4BvmL,EAAAy4C,SAAAA,EAA8Bz4C,EAAAymL,QAAAA,EALtEzmL,EAAAykL,cAAgB,EAChBzkL,EAAAkkL,aAAc,EACdlkL,EAAAy9B,WAAY,EA2Bbz9B,EAAA88B,KAAO,MAMP98B,EAAAi0D,UAAY,EAMZj0D,EAAAo0D,UAAYp0D,EAAKykE,MAMjBzkE,EAAAukL,aAAevkL,EAAKg9B,SAMpBh9B,EAAAwkL,aAAexkL,EAAK04E,WA9CvB14E,EAAK0mL,eAAiBjuI,IAwP9B,OAlUyCr1C,EAAAA,EAAAA,GAoBrCxY,OAAAgC,eACW45L,EAAAl7L,UAAA,OAAI,KADf,WAEI,OAAOF,KAAKu7L,aAAev7L,KAAKu7L,aAAajjH,KAAOt4E,KAAKsuH,WAE7D,SAAgBjyG,GACRrc,KAAKu7L,eACLv7L,KAAKu7L,aAAajjH,KAAOj8D,GAE7Brc,KAAKsuH,MAAQjyG,mCAYjB7c,OAAAgC,eACW45L,EAAAl7L,UAAA,QAAK,KADhB,WAEI,OAAOF,KAAKu7L,aAAev7L,KAAKu7L,aAAaliH,MAAQr5E,KAAKqzD,YAE9D,SAAiBh3C,GACTrc,KAAKu7L,eACLv7L,KAAKu7L,aAAaliH,MAAQh9D,GAE9Brc,KAAKqzD,OAASh3C,mCA6BlB7c,OAAAgC,eACW45L,EAAAl7L,UAAA,0BAAuB,KADlC,WAEI,OAAOF,KAAKstF,4CAGhB9tF,OAAAgC,eACW45L,EAAAl7L,UAAA,0BAAuB,KADlC,WAEI,OAAOF,KAAK4xC,0CAGhBpyC,OAAAgC,eACW45L,EAAAl7L,UAAA,kBAAe,KAD1B,WAEI,OAASF,KAAK4xC,WAAa5xC,KAAKstF,4CAiCpC8tG,EAAAl7L,UAAAyhD,gBAAA,WAAA,IAAA/sC,EAAA5U,KACIA,KAAKq7L,QAAQvxJ,kBAAkB,WAC3Bl1B,EAAKo5K,gBAAkB,IAAInsI,EAAe,WACtCjtC,EAAKumL,MAAMjB,4BAA4BtlL,EAAK0mL,eAAeh7J,cAAe,QAKtF86J,EAAAl7L,UAAAsmC,YAAA,WAAA,IAAA5xB,EAAA5U,KACIA,KAAKq7L,QAAQvxJ,kBAAkB,WAC3Bl1B,EAAKo5K,gBAAgBjsI,gBAQtBq5I,EAAAl7L,UAAAqvC,QADP,SACej9B,GACPtS,KAAK05L,eACL15L,KAAKmyD,UAQNipI,EAAAl7L,UAAA0mE,UADP,SACiBt0D,OACPkpL,EAAYx7L,KAAKm7L,MAAMtD,KAAKjlL,UAC5B+iC,EAAa6lJ,EAAUlqL,QAAQtR,MACjCy7L,GAAc,EACdlmJ,EAAeI,EAEnB,OAAQrjC,EAAMrR,KACV,IAAA,aACA,IAAA,QACI,GAEI,KADAs0C,IACqBimJ,EAAU76L,QAGxB,IAAkE,IAA7D66L,EAAUjmJ,GAAsC3D,SAAoB,CAC5E6pJ,EAAalmJ,EACb,YAJAA,GAAgB,QAOjBA,IAAiBI,GACxB,MACJ,IAAA,YACA,IAAA,OACI,GAEI,IAAsB,MADtBJ,GAIO,IAAkE,IAA7DimJ,EAAUjmJ,GAAsC3D,SAAoB,CAC5E6pJ,EAAalmJ,EACb,YAJAA,EAAeimJ,EAAU76L,aAO1B40C,IAAiBI,GACxB,MACJ,IAAA,OACIrjC,EAAM23B,iBACNwxJ,EAAaD,EAAUlkL,KAAK,SAAAhX,GAAK,OAAwC,IAAxC,EAA2BsxC,WAAoBj+B,MAChF,MACJ,IAAA,MACIrB,EAAM23B,iBACNwxJ,EAAaD,EAAU3jL,QAAQhD,UAAUyC,KAAK,SAAAhX,GAAK,OAAwC,IAAxC,EAA2BsxC,WAAoBj+B,MAClG,MACJ,IAAA,QACS3T,KAAK05L,eACN15L,KAAK07L,cAAcp7J,cAAcvhB,QAErC,MACJ,IAAA,IACA,IAAA,WACIzM,EAAM23B,iBACDjqC,KAAK05L,eACN15L,KAAK07L,cAAcp7J,cAAcvhB,QAO7C,GAAI08K,GAAc,EAAG,KACXnD,EAAMkD,EAAUC,GACtBnD,EAAIoD,cAAcp7J,cAAciT,QAE5BvzC,KAAK05L,eACLpB,EAAInmI,WAQhB3yD,OAAAgC,eAAI45L,EAAAl7L,UAAA,eAAY,KAAhB,WACI,OAAOF,KAAKq5L,+CAMhB75L,OAAAgC,eAAI45L,EAAAl7L,UAAA,gBAAa,KAAjB,WACI,OAAOF,KAAKs7L,gDAShB97L,OAAAgC,eACI45L,EAAAl7L,UAAA,WAAQ,KADZ,WAEI,OAAOF,KAAKu7L,aAAev7L,KAAKu7L,aAAa3pJ,SAAW5xC,KAAKqyC,eAEjE,SAAah2B,GACLrc,KAAKu7L,aACLv7L,KAAKu7L,aAAa3pJ,SAAWv1B,EAE7Brc,KAAKqyC,UAAYh2B,mCAUzB7c,OAAAgC,eACI45L,EAAAl7L,UAAA,aAAU,KADd,WAEI,OAAOF,KAAKu7L,aAAev7L,KAAKu7L,aAAajuG,WAAattF,KAAK84L,iBAEnE,SAAez8K,GACNrc,KAAK4xC,UAAY5xC,KAAKstF,aAAejxE,GACtCrc,KAAKm7L,MAAMpB,uBAAuB19K,EAAWrc,KAAO,uCAOrDo7L,EAAAl7L,UAAAiyD,OAAP,WACSnyD,KAAK4xC,UAAa5xC,KAAKstF,YACxBttF,KAAKm7L,MAAMpB,uBAAuB/5L,OAO1CR,OAAAgC,eAAI45L,EAAAl7L,UAAA,QAAK,KAAT,WACI,OAAIF,KAAKm7L,MAAMtD,KACJ73L,KAAKm7L,MAAMtD,KAAKjlL,UAAUtB,QAAQtR,OAErC,mCAMLo7L,EAAAl7L,UAAAk6L,oBAAP,SAA2B/9K,GAA3B,IAAAzH,EAAA5U,KACIA,KAAK84L,YAAcz8K,EACnBrc,KAAKq7L,QAAQvxJ,kBAAkB,WACvBl1B,EAAKo5K,kBACDp5K,EAAKkkL,YACLlkL,EAAKo5K,gBAAgBlsI,QAAQltC,EAAKy4C,SAAS/sB,eAE3C1rB,EAAKo5K,gBAAgBjsI,gBAIjC/hD,KAAK6oE,SAAWxsD,EAAW,GAAK,GAMpC7c,OAAAgC,eAAW45L,EAAAl7L,UAAA,WAAQ,KAAnB,WACI,OAAIF,KAAKu7L,cAAgBv7L,KAAKu7L,aAAahC,kBAChCv5L,KAAKu7L,aAAahC,kBAEzBv5L,KAAKw5L,qBACEx5L,KAAKw5L,qBAAqBznJ,SAE9B/xC,KAAKy5L,oDAMhBj6L,OAAAgC,eAAW45L,EAAAl7L,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKu7L,aAAev7L,KAAKu7L,aAAev7L,0DArUtD8xC,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,eACVqjC,SAAA,ohBANqB6nJ,UAZrBt2J,EAAAA,kBAMAyD,EAAAA,gDAsBCp4B,EAAAA,oBAaAA,EAAAA,qBAoBAA,EAAAA,6BAeAA,EAAAA,kCAIA8nC,EAAAA,UAASzoC,KAAA,CAAC,qBAAsB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,kCAI7D0V,EAAAA,aAAYr+C,KAAA,CAACitL,GAA6B,CAAEvkJ,KAAMukJ,GAA6BtkJ,UAAQ,qCAcvFxH,EAAAA,YAAWnhC,KAAA,CAAC,+EAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uEAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kDAQZmhC,EAAAA,YAAWnhC,KAAA,CAAC,+BAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,yCAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4CAMZmhC,EAAAA,YAAWnhC,KAAA,CAAC,uCAoBZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,8BAUvBY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,6BA0FzBW,EAAAA,0BAkBAA,EAAAA,SAiELysL,GAlUyCjB,QCMrCwB,MAAQ,QACRC,WAAa,cAGbC,GAAe,EAEnBC,GAAA,WA6RI,SAAAA,EAAoBzuI,EAA8BguI,EAAyBpoG,GAAvDjzF,KAAAqtD,SAAAA,EAA8BrtD,KAAAq7L,QAAAA,EAAyBr7L,KAAAizF,aAAAA,EAtRnEjzF,KAAA+7L,eAAiBF,KAuDlB77L,KAAAg8L,oBAAsB,IAAI7yK,EAAAA,aAY1BnpB,KAAAi8L,SAA8B,aAgB9Bj8L,KAAA2N,GAAK,YAAY3N,KAAK+7L,eAMtB/7L,KAAAq2F,SAAQ,GAkBRr2F,KAAAk8L,oBAAsB,IAAI/yK,EAAAA,aAkB1BnpB,KAAAm8L,kBAAoB,IAAIhzK,EAAAA,aAiFxBnpB,KAAAuE,OAAS,EAGRvE,KAAAo8L,gBAAkB,EA0R9B,OA3cI58L,OAAAgC,eACWs6L,EAAA57L,UAAA,gBAAa,KADxB,WAEI,OAAOF,KAAKo8L,oBAGhB,SAAyBzoL,OACf6hC,EAA4B,iBAAV7hC,EAAqB8lC,SAAS9lC,EAAO,IAAMA,EACnE,GAAI3T,KAAKo8L,iBAAmB5mJ,EACxB,GAAIx1C,KAAK63L,MAAQ73L,KAAK63L,KAAKl3L,OAAS,EAAG,KAC7Bq5L,EAASh6L,KAAK63L,KAAKjlL,UAAU4iC,GAC/BwkJ,GACDh6L,KAAK+5L,uBAAuBC,QAG/Bh6L,KAAKo8L,eAAiB5mJ,mCAqIlCh2C,OAAAgC,eAAWs6L,EAAA57L,UAAA,OAAI,KAAf,WACI,OAAIF,KAAK03L,eACE13L,KAAK23L,YAET33L,KAAK43L,0CAMhBp4L,OAAAgC,eAAWs6L,EAAA57L,UAAA,iBAAc,KAAzB,WACI,OAAQF,KAAK23L,aAAe33L,KAAK23L,YAAYh3L,OAAS,mCAyB1DnB,OAAAgC,eACWs6L,EAAA57L,UAAA,WAAQ,KADnB,eAOQmoK,EAFEg0B,EAAyBr8L,KAAKmX,OAAOG,KAAK,SAACP,GAAU,OAAc,MAAdA,EAAMuhE,MAA+B,MAAfvhE,EAAMsiE,QACjFijH,EAAuBt8L,KAAK23L,YAAYrgL,KAAK,SAACghL,GAAQ,OAAY,MAAZA,EAAIhgH,MAA6B,MAAbggH,EAAIj/G,QAEpF,OAAQkjH,GAASv8L,KAAKi8L,SAASvuI,gBAC3B,KAAK6uI,GAASZ,MACVtzB,EAPW,kBAQX,MAEJ,QACIA,EAZa,WAsBrB,OAJIg0B,IAA2BroL,WAAasoL,IAAyBtoL,YACjEq0J,GAAY,oBAGNA,EAAG,IAAIroK,KAAKq2F,0CAMnBylG,EAAA57L,UAAAo7B,WAAP,SAAkBhpB,GACdtS,KAAKy9C,QAAO,IAMTq+I,EAAA57L,UAAA45L,YAAP,SAAmBxnL,GACftS,KAAKy9C,QAAO,IAMTq+I,EAAA57L,UAAA25L,cAAP,SAAqB/1J,EAAcg2J,OACzBW,EAAgBz6L,KAAK6gJ,SAASvgH,cAAc84F,YAElDp5H,KAAKuE,OAAS,EAAgBu/B,EAAQs1F,YAAct1F,EAAQgxJ,WAAa2F,EAAgB32J,EAAQgxJ,WACjG90L,KAAK26L,eAAer6J,cAAcj9B,MAAMmB,UAAY,cAAcxE,KAAKuE,OAAM,OASjF/E,OAAAgC,eAAIs6L,EAAA57L,UAAA,kBAAe,KAAnB,WACI,GAAIF,KAAK63L,MAAQ73L,KAAKw3L,gBAAkBxjL,UACpC,OAAOhU,KAAK63L,KAAKjlL,UAAU5S,KAAKw3L,gDASjCsE,EAAA57L,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,MACiC,IAAzBA,KAAKo8L,gBACLp8L,KAAK63L,KAAKplL,QAAQ,SAACnS,GACXA,EAAEgtF,aACF14E,EAAKwnL,eAAiB97L,EAAEqT,UAK/B3T,KAAK03L,iBAAmB13L,KAAKw3L,cAAgB,GAAKx3L,KAAKw3L,eAAiBx3L,KAAKmX,OAAOxW,UACrFX,KAAKo8L,eAAiB,GAGtBp8L,KAAKizF,aAAarhF,YAClB2qC,sBAAsB,eACZy9I,EAASplL,EAAKijL,KAAKjlL,UAAUgC,EAAKwnL,gBACpCpC,EACAplL,EAAK4nL,iBAAiBxC,GAEtBplL,EAAK6nL,kBAGbz8L,KAAKq7L,QAAQvxJ,kBAAkB,WAC3Bl1B,EAAKo5K,gBAAkB,IAAInsI,EAAe,WACtC,IAAKjtC,EAAK8iL,gBAAkB9iL,EAAKwnL,gBAAkB,GAAKxnL,EAAKwnL,eAAiBxnL,EAAKijL,KAAKl3L,OAAQ,KACtFq5L,EAASplL,EAAKijL,KAAKjlL,UAAUgC,EAAKwnL,gBACxCxnL,EAAKqlL,0BAA0BD,EAAQ,MAI/CplL,EAAKo5K,gBAAgBlsI,QAAQltC,EAAK8nL,cAAcp8J,kBAIxDtgC,KAAK28L,sBACL38L,KAAK48L,eAAiB58L,KAAKmX,OAAO8qC,QAAQld,UAAU,WAChDnwB,EAAK+nL,sBACL/nL,EAAKioL,uCAONf,EAAA57L,UAAAsmC,YAAP,WAAA,IAAA5xB,EAAA5U,KACQA,KAAK48L,gBACL58L,KAAK48L,eAAe1uJ,cAEpBluC,KAAKguL,iBACLhuL,KAAKq7L,QAAQvxJ,kBAAkB,WAC3Bl1B,EAAKo5K,gBAAgBjsI,gBAKzB+5I,EAAA57L,UAAAy8L,oBAAR,WAEI,QADMG,EAAc98L,KAAKmX,OAAOvE,UACvBe,EAAQ,EAAGA,EAAQ3T,KAAKmX,OAAOxW,OAAQgT,IAAS,KAC/CopL,EAAYD,EAAYnpL,GAC9BopL,EAAUz8J,cAAcgzB,aAAa,KAAMtzD,KAAKg9L,eAAerpL,IAC/DopL,EAAUz8J,cAAcgzB,aAAa,kBAAmBtzD,KAAKi9L,aAAatpL,MAI1EmoL,EAAA57L,UAAA28L,kCAAR,WAAA,IAAAjoL,EAAA5U,KACIu8C,sBAAsB,eACZ2gJ,EAAatoL,EAAKijL,KAAKjlL,UAAUgC,EAAK4iL,eACxC0F,EACAtoL,EAAKmlL,uBAAuBmD,GACrBtoL,EAAK4iL,eAAiB5iL,EAAKijL,KAAKl3L,OACvCiU,EAAKmlL,uBAAuBnlL,EAAKijL,KAAK1gE,MAEtCviH,EAAK6nL,mBAKTX,EAAA57L,UAAAu9C,OAAR,SAAeq8I,WACL0B,EAAYx7L,KAAK63L,KAAKjlL,cAC5B,IAAkB,IAAAuqL,EAAAptL,EAAAyrL,GAAS4B,EAAAD,EAAAj7L,QAAAk7L,EAAAh7L,KAAAg7L,EAAAD,EAAAj7L,OAAE,CAAxB,IACK4hC,EADIs5J,EAAAj7L,MACUu5L,cAAcp7J,cAClC,GAAIw5J,GACA,GAAIh2J,EAAQs1F,YAAct1F,EAAQgxJ,WAAa90L,KAAK6gJ,SAASvgH,cAAc84F,YAAcp5H,KAAKuE,OAAQ,CAClGvE,KAAK65L,cAAc/1J,EAASg2J,GAC5B,YAGJ,GAAIh2J,EAAQs1F,YAAct1F,EAAQgxJ,YAAc90L,KAAKuE,OAAQ,CACzDvE,KAAK65L,cAAc/1J,EAASg2J,GAC5B,8GASTgC,EAAA57L,UAAA65L,uBAAP,SAA8BC,OACpBqD,EAASr9L,KAAKs9L,gBAChBD,GACAr9L,KAAKu9L,mBAAmBF,GAExBrD,EACAh6L,KAAKw8L,iBAAiBxC,GAGtBh6L,KAAKy8L,gBAETz8L,KAAKg8L,oBAAoBz5K,KAAKviB,KAAKo8L,iBAG/BN,EAAA57L,UAAAq9L,mBAAR,SAA2BF,GACvBA,EAAOjD,qBAAoB,OACrBoD,EAAqBx9L,KAAKmX,OAAOvE,UAAUyqL,EAAO1pL,OACpD6pL,GACAA,EAAmBpD,qBAAoB,GAE3Cp6L,KAAKo8L,gBAAkB,EACvBp8L,KAAKk8L,oBAAoB35K,KAAK,CAAE+1K,IAAK+E,EAAQtmL,MAAOymL,KAGhD1B,EAAA57L,UAAAs8L,iBAAR,SAAyBxC,GAAzB,IAAAplL,EAAA5U,KACIg6L,EAAOI,qBAAoB,GAC3Bp6L,KAAKo8L,eAAiBpC,EAAOrmL,UAEzB8pL,EAAqB,MACpBz9L,KAAK03L,gBAAkB13L,KAAKmX,SAC7BsmL,EAAqBz9L,KAAKmX,OAAOvE,UAAUonL,EAAOrmL,SAE9C8pL,EAAmBrD,qBAAoB,GAI/Cp6L,KAAKm8L,kBAAkB55K,KAAK,CAAE+1K,IAAK0B,EAAQjjL,MAAO0mL,IAElDlhJ,sBAAsB,WAElB3nC,EAAK8oL,oBAAoB1D,GAEzBplL,EAAKslL,4BAA4BF,EAAO0B,cAAcp7J,eAEjD1rB,EAAK8iL,gBACN9iL,EAAKqlL,0BAA0BD,EAAQ,OAK3C8B,EAAA57L,UAAAw9L,oBAAR,SAA4B1D,OAClB2D,EAAmB3D,EAAO0B,cAAcp7J,cAG1Cq9J,EAAiB7I,WAAa90L,KAAKuE,QACnCvE,KAAK65L,cAAc8D,GAAkB,OAInCC,EAAsB59L,KAAK6gJ,SAASvgH,cAAc84F,YACzCukE,EAAiB7I,WAAa6I,EAAiBvkE,aAAgBwkE,EAAsB59L,KAAKuE,QAG7F,GACRvE,KAAK65L,cAAc8D,GAAkB,IAOtC7B,EAAA57L,UAAA+8L,aAAP,SAAoBtpL,GAChB,MAAO,gBAAgB3T,KAAK+7L,eAAc,IAAIpoL,GAM3CmoL,EAAA57L,UAAA88L,eAAP,SAAsBrpL,GAClB,MAAO,kBAAkB3T,KAAK+7L,eAAc,IAAIpoL,GAO7CmoL,EAAA57L,UAAA+5L,0BAAP,SAAiC3B,EAAqB50L,OAC5Cm6L,EAAgB79L,KAAK08L,cAAcp8J,cAAc84F,YAAck/D,EAAI3kL,MACzE3T,KAAK89L,kBAAkBx9J,cAAcj9B,MAAM6iC,mBAAqBxiC,EAAW,EAAOA,EAAQ,IAAM,UAChG1D,KAAK89L,kBAAkBx9J,cAAcj9B,MAAMmB,UAAY,cAAcq5L,EAAa,OAM/E/B,EAAA57L,UAAAg6L,4BAAP,SAAmCp2J,EAAsBpgC,QAAA,IAAAA,IAAAA,EAAA,IACjD1D,KAAK+9L,oBACL/9L,KAAK+9L,kBAAkBz9J,cAAcj9B,MAAMw/B,WAAa,UACxD7iC,KAAK+9L,kBAAkBz9J,cAAcj9B,MAAM6iC,mBAAqBxiC,EAAW,EAAOA,EAAQ,IAAM,UAChG1D,KAAK+9L,kBAAkBz9J,cAAcj9B,MAAM4N,MAAW6yB,EAAQs1F,YAAW,KACzEp5H,KAAK+9L,kBAAkBz9J,cAAcj9B,MAAMmB,UAAY,aAAas/B,EAAQgxJ,WAAU,QAIvFgH,EAAA57L,UAAAu8L,cAAP,WACQz8L,KAAK+9L,oBACL/9L,KAAK+9L,kBAAkBz9J,cAAcj9B,MAAMw/B,WAAa,+BA9enEiP,EAAAA,UAAS9jC,KAAA,CAAC,CACPU,SAAU,WACVqjC,SAAA,mjDACA5iC,UAAW,CAAC,CAAEg9C,QAASytI,GAAaxtI,YAAa0vI,iDAlCjDx4J,EAAAA,kBAWAyD,EAAAA,cAWKr1B,sCAwBJ46C,EAAAA,gBAAet+C,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAA2uI,2BASjC5uI,EAAAA,gBAAet+C,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAA6uI,6BAejCzsL,EAAAA,mCAsBAgd,EAAAA,yBAYAhd,EAAAA,MAAKX,KAAA,CAAC,wBAeNmhC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,uBAMAA,EAAAA,mCAkBAgd,EAAAA,kCAkBAA,EAAAA,kCAMA8qB,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE2oC,UAAQ,6BAMzCF,EAAAA,UAASzoC,KAAA,CAAC,kBAAmB,CAAE2oC,UAAQ,4BAMvCF,EAAAA,UAASzoC,KAAA,CAAC,iBAAkB,CAAE2oC,UAAQ,+BAMtCF,EAAAA,UAASzoC,KAAA,CAAC,oBAAqB,CAAE2oC,UAAQ,2BAMzCF,EAAAA,UAASzoC,KAAA,CAAC,gBAAiB,CAAE2oC,UAAQ,sBAMrCF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,sBAShCinC,EAAAA,aAAY5vE,KAAA,CAACu+C,EAAAA,WAAW,WAAM,OAAA6uI,wBA8C9BjsJ,EAAAA,YAAWnhC,KAAA,CAAC,iBAoRjB8tL,EAlfA,GAufAkC,GAAA,WAAA,SAAAA,KAiBA,2BAjBChvL,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAAC6sL,GACXZ,GACAE,GACAH,GACAX,GACAS,IACJ7rL,QAAS,CAAC4sL,GACNZ,GACAE,GACAH,GACAX,GACAS,IACJt+I,QAAS,CAACC,EAAAA,aAAc+8B,GAAgB7B,GAAe5M,QAI3DgzH,EAjBA,GCzgBAC,GAAA,WAUI,SAAAA,EACOC,EACK79J,GADLrgC,KAAAk+L,WAAAA,EACKl+L,KAAAqgC,WAAAA,EAGLrgC,KAAA6oE,SAAW,EAgLtB,OA9KIrpE,OAAAgC,eACIy8L,EAAA/9L,UAAA,aAAU,KADd,WAEI,OAAO,mCAGXV,OAAAgC,eACIy8L,EAAA/9L,UAAA,UAAO,KADX,WAEI,MAAqB,aAAdF,KAAKkS,sCAGhB1S,OAAAgC,eACIy8L,EAAA/9L,UAAA,YAAS,KADb,WAEI,MAAqB,eAAdF,KAAKkS,sCAGhB1S,OAAAgC,eACIy8L,EAAA/9L,UAAA,UAAO,KADX,WAEI,MAAqB,aAAdF,KAAKkS,sCAIT+rL,EAAA/9L,UAAA0uD,QADP,WAEI5uD,KAAK8yG,UAAW,GAIbmrF,EAAA/9L,UAAA4uD,OADP,WAEI9uD,KAAK8yG,UAAW,GAGZmrF,EAAA/9L,UAAA+mK,SAAR,WACI,OAAQjnK,KAAKkS,MACT,IAAK,WACDlS,KAAKk+L,WAAWC,WAChB,MAEJ,IAAK,aACDn+L,KAAKk+L,WAAWE,aAChB,MAEJ,IAAK,WACDp+L,KAAKk+L,WAAWG,aAMpBJ,EAAA/9L,UAAA+nD,SAAR,WACI,OAAQjoD,KAAKkS,MACT,IAAK,WACDlS,KAAKk+L,WAAWI,WAChB,MAEJ,IAAK,aACDt+L,KAAKk+L,WAAWK,aAChB,MAEJ,IAAK,WACDv+L,KAAKk+L,WAAWM,aAUrBP,EAAA/9L,UAAAgpF,mBADP,SAC0B52E,GACtBA,EAAM23B,iBAENjqC,KAAKinK,YAOFg3B,EAAA/9L,UAAA2oF,iBADP,SACwBv2E,GACpBA,EAAM23B,iBAENjqC,KAAKioD,YAOFg2I,EAAA/9L,UAAAipF,oBADP,SAC2B72E,GACvBA,EAAM23B,qBAEAw0J,EAAYnsL,EAAY,OAAiByiE,WAET,IAAlC0pH,EAASntL,QAAQ,aAAsBtR,KAAKk+L,WAAWQ,WACvD1+L,KAAKk+L,WAAWQ,WAAWp+J,cAAciT,SACC,IAAlCkrJ,EAASntL,QAAQ,cAA0D,IAApCmtL,EAASntL,QAAQ,gBAAyBtR,KAAKk+L,WAAWS,UACzG3+L,KAAKk+L,WAAWS,SAASr+J,cAAciT,SAQxC0qJ,EAAA/9L,UAAAkpF,mBADP,SAC0B92E,GACtBA,EAAM23B,qBAEAw0J,EAAYnsL,EAAY,OAAiByiE,WAET,IAAlC0pH,EAASntL,QAAQ,aAAsBtR,KAAKk+L,WAAWQ,WACvD1+L,KAAKk+L,WAAWQ,WAAWp+J,cAAciT,SACC,IAAlCkrJ,EAASntL,QAAQ,cAA0D,IAApCmtL,EAASntL,QAAQ,gBAAyBtR,KAAKk+L,WAAWU,UACzG5+L,KAAKk+L,WAAWU,SAASt+J,cAAciT,SAQxC0qJ,EAAA/9L,UAAAqpF,eADP,SACsBj3E,GAClBA,EAAM23B,iBAEFjqC,KAAKk+L,WAAW51F,OAASC,GAAgBJ,SAI7CnoG,KAAKk+L,WAAWW,gBAHZ7+L,KAAKk+L,WAAW9vL,SAUjB6vL,EAAA/9L,UAAAkxE,gBADP,SACuB9+D,GACnBA,EAAM23B,iBAENjqC,KAAKk+L,WAAWY,qBAObb,EAAA/9L,UAAA6+L,QADP,WAEI/+L,KAAKqgC,WAAWC,cAAciT,SAO3B0qJ,EAAA/9L,UAAAwpC,SADP,SACgBp3B,GACZA,EAAM23B,iBACN33B,EAAMmyB,kBAEFnyB,EAAM8mC,OAAS,EACfp5C,KAAKinK,WACE30J,EAAM8mC,OAAS,GACtBp5C,KAAKioD,YAQNg2I,EAAA/9L,UAAA8+L,UADP,SACiB1sL,GACTA,EAAM8mC,OAAS,EACfp5C,KAAKinK,WACE30J,EAAM8mC,OAAS,GACtBp5C,KAAKioD,gCA5LhBx5C,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yFASGyD,EAAAA,OAAMnE,KAAA,CCxBkB,wCDGrCs1B,EAAAA,4CAgBC30B,EAAAA,MAAKX,KAAA,CAAC,iCASNmhC,EAAAA,YAAWnhC,KAAA,CAAC,qCAGZmhC,EAAAA,YAAWnhC,KAAA,CAAC,kDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,sDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZY,EAAAA,aAAYZ,KAAA,CAAC,yBAKbY,EAAAA,aAAYZ,KAAA,CAAC,oCA0CbY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,qCAUnCY,EAAAA,aAAYZ,KAAA,CAAC,kBAAmB,CAAC,wCAUjCY,EAAAA,aAAYZ,KAAA,CAAC,qBAAsB,CAAC,uCAgBpCY,EAAAA,aAAYZ,KAAA,CAAC,oBAAqB,CAAC,mCAgBnCY,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,oCAc/BY,EAAAA,aAAYZ,KAAA,CAAC,iBAAkB,CAAC,4BAUhCY,EAAAA,aAAYZ,KAAA,CAAC,+BAQbY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,8BAevBY,EAAAA,aAAYZ,KAAA,CAAC,UAAW,CAAC,cAQ9BiwL,EA/LA,GAoMAgB,GAAA,WA2BI,SAAAA,EACOf,EACKgB,GADLl/L,KAAAk+L,WAAAA,EACKl+L,KAAAk/L,SAAAA,EAQhB,OA7BI1/L,OAAAgC,eACIy9L,EAAA/+L,UAAA,aAAU,KADd,WAEI,OAAO,mCAGXV,OAAAgC,eACIy9L,EAAA/+L,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKm/L,gDAGhB3/L,OAAAgC,eACIy9L,EAAA/+L,UAAA,YAAS,KADb,WAEI,OAAOF,KAAKm/L,gBAAkBn/L,KAAKk/L,SAASpsF,0CAGhDtzG,OAAAgC,eAAIy9L,EAAA/+L,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKk+L,WAAWkB,eAAiBp/L,KAAKmC,uCAQ1C88L,EAAA/+L,UAAAqvC,QADP,SACetzB,GACE,KAATA,GACAjc,KAAKk+L,WAAWmB,mBAAmBpjL,wBAlC9CxN,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yFA0BGyD,EAAAA,OAAMnE,KAAA,CC7OkB,wCD+OfiwL,qCAxBrBtvL,EAAAA,MAAKX,KAAA,CAAC,mCAGNmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAaZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,aAM5BixL,EArCA,GA0CAK,GAAA,WA2BI,SAAAA,EACOpB,EACKgB,GADLl/L,KAAAk+L,WAAAA,EACKl+L,KAAAk/L,SAAAA,EAQhB,OA7BI1/L,OAAAgC,eACI89L,EAAAp/L,UAAA,aAAU,KADd,WAEI,OAAO,mCAGXV,OAAAgC,eACI89L,EAAAp/L,UAAA,cAAW,KADf,WAEI,OAAOF,KAAKu/L,kDAGhB//L,OAAAgC,eACI89L,EAAAp/L,UAAA,YAAS,KADb,WAEI,OAAOF,KAAKu/L,kBAAoBv/L,KAAKk/L,SAASpsF,0CAGlDtzG,OAAAgC,eAAI89L,EAAAp/L,UAAA,mBAAgB,KAApB,WACI,OAAOF,KAAKk+L,WAAWsB,iBAAmBx/L,KAAKmC,uCAQ5Cm9L,EAAAp/L,UAAAqvC,QADP,SACetzB,GACE,KAATA,GACAjc,KAAKk+L,WAAWuB,qBAAqBxjL,wBAlChDxN,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,2FA0BGyD,EAAAA,OAAMnE,KAAA,CCvRkB,wCDyRfiwL,qCAxBrBtvL,EAAAA,MAAKX,KAAA,CAAC,qCAGNmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAaZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,aAM5BsxL,EArCA,GA0CAI,GAAA,WA2BI,SAAAA,EACOxB,EACKgB,GADLl/L,KAAAk+L,WAAAA,EACKl+L,KAAAk/L,SAAAA,EAQhB,OA7BI1/L,OAAAgC,eACIk+L,EAAAx/L,UAAA,aAAU,KADd,WAEI,OAAO,mCAGXV,OAAAgC,eACIk+L,EAAAx/L,UAAA,cAAW,KADf,WAEI,OAAOF,KAAK2/L,gDAGhBngM,OAAAgC,eACIk+L,EAAAx/L,UAAA,YAAS,KADb,WAEI,OAAOF,KAAK2/L,gBAAkB3/L,KAAKk/L,SAASpsF,0CAGhDtzG,OAAAgC,eAAIk+L,EAAAx/L,UAAA,iBAAc,KAAlB,WACI,OAAOF,KAAKk+L,WAAW0B,eAAiB5/L,KAAKmC,uCAQ1Cu9L,EAAAx/L,UAAAqvC,QADP,SACetzB,GACE,KAATA,GACAjc,KAAKk+L,WAAW2B,mBAAmB5jL,wBAlC9CxN,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,yFA0BGyD,EAAAA,OAAMnE,KAAA,CCjUkB,wCDmUfiwL,qCAxBrBtvL,EAAAA,MAAKX,KAAA,CAAC,mCAGNmhC,EAAAA,YAAWnhC,KAAA,CAAC,oDAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,4DAKZmhC,EAAAA,YAAWnhC,KAAA,CAAC,wDAaZY,EAAAA,aAAYZ,KAAA,CAAC,QAAS,CAAC,aAM5B0xL,EArCA,GA0CAI,GAAA,WAII,SAAAA,EAAmB/tJ,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,uEAzUVo6C,EAAAA,eA6UJg3I,EALA,GAUAC,GAAA,WAII,SAAAA,EAAmBhuJ,GAAA/xC,KAAA+xC,SAAAA,EACvB,2BALCtjC,EAAAA,UAAST,KAAA,CAAC,CACPU,SAAU,sEAnVVo6C,EAAAA,eAuVJi3I,EALA,GEtVAC,GAAA,WAGK,SAAAA,EAAuD9B,GAAAl+L,KAAAk+L,WAAAA,EAkE5D,OAhEK8B,EAAA9/L,UAAAsE,UAAA,SAAUrC,OACH89L,EAAMvsH,EAASwsH,EAEbC,EAAWngM,KAAKk+L,WAAW/5H,YAC3Bb,EAAOtjE,KAAKk+L,WAAW/5H,WAAU,GACvC,IAAKhiE,GAASA,IAAUmhE,GAAQnhE,IAAUg+L,EACtC,MAAO,OAGLC,EAAWj+L,EAAM4Q,MAAM,UAEzB/S,KAAKk+L,WAAWmC,gBAChBJ,EAAOG,EAAS,IAGhBpgM,KAAKk+L,WAAWoC,kBAChB5sH,EAAU1zE,KAAKk+L,WAAWmC,cAAgBD,EAAS,GAAKA,EAAS,IAGjEpgM,KAAKk+L,WAAWqC,eAChBL,EAAOE,EAASA,EAASz/L,OAAS,QAGhC4iE,EAASvjE,KAAKk+L,WAAW36H,OACzBi9H,EAASxgM,KAAKk+L,WAAWn6H,WACzB08H,EAAS,IAAI56H,OAAO7lE,KAAKk+L,WAAWn6H,WAAY,KAUtD,KAR8B,IAA1BR,EAAOjyD,QAAQ,QAA0C,IAA1BiyD,EAAOjyD,QAAQ,QAA0C,IAA1B2uL,EAAK3uL,QAAQkvL,MAC5EP,EAAOA,IAASO,EAASA,EAAS,KAAOP,EAAKnxK,QAAQ2xK,EAAQ,OAGnC,IAA1Bl9H,EAAOjyD,QAAQ,QAA6C,IAA7BoiE,EAAQpiE,QAAQkvL,KAChD9sH,EAAUA,IAAY8sH,EAASA,EAAS,KAAO9sH,EAAQ5kD,QAAQ2xK,EAAQ,OAG5C,IAA1Bl9H,EAAOjyD,QAAQ,QAA0C,IAA1BiyD,EAAOjyD,QAAQ,OAAgB2uL,IAASjsL,UAAW,CAClFisL,GAAiC,IAA1BA,EAAK3uL,QAAQkvL,GAAiBP,EAAKnxK,QAAQ2xK,EAAQ,IAAMR,MAC1DS,EAAUjnJ,SAASwmJ,EAAM,IAC/BA,EAAQS,EAAgBA,EAAU,IAAkB,IAAZA,EAAgBT,EAAKnxK,QAAQ,IAAK,IAAMmxK,EAA9D,IAGtB,IAA8B,IAA1B18H,EAAOjyD,QAAQ,OAAgBoiE,IAAY1/D,UAAW,CACtD0/D,GAAuC,IAA7BA,EAAQpiE,QAAQkvL,GAAiB9sH,EAAQ5kD,QAAQ2xK,EAAQ,IAAM/sH,MACnEitH,EAAalnJ,SAASi6B,EAAS,IACrCA,EAAWitH,EAAmBA,EAAa,IAAqB,IAAfA,EAAmBjtH,EAAQ5kD,QAAQ,IAAK,IAAM4kD,EAAvE,KAGE,IAA1BnQ,EAAOjyD,QAAQ,OAA0B,OAAT4uL,GAA0B,OAATA,IAClDA,GAA8B,IAAvBA,EAAK5uL,QAAQ,OAAsC,IAAvB4uL,EAAK5uL,QAAQ,KAAc,KAAO,UAGpEd,EAAS0vL,EAAUD,EAAI,IAAIvsH,EAAO,IAAIwsH,EAAYD,EAAI,IAAIvsH,EAW9D,OATKusH,IACDzvL,EAASA,EAAOqH,MAAMrH,EAAOc,QAAQ,KAAO,EAAGd,EAAO7P,SAGrD+yE,IACDljE,EAASA,EAAOqH,MAAM,EAAGrH,EAAOc,QAAQ,MACpC4uL,IAAQ1vL,EAASA,EAAS,IAAM0vL,IAGjC1vL,uBAnEdmY,EAAAA,KAAI3a,KAAA,CAAC,CAAEgS,KAAM,yFAGI7N,EAAAA,OAAMnE,KAAA,CDPiB,oCCyEzCgyL,EArEA,GA2EAY,GAAA,WAGI,SAAAA,EAAuD1C,GAAAl+L,KAAAk+L,WAAAA,EAsD3D,OApDI0C,EAAA1gM,UAAAsE,UAAA,SAAUrC,OAIFmhE,EAAM28H,EAAMvsH,EAASwsH,EAHnBM,EAASxgM,KAAKk+L,WAAWn6H,WACzB08H,EAAS,IAAI56H,OAAO26H,EAAQ,KAWlC,GAPIxgM,KAAKk+L,WAAW2C,SAChB7gM,KAAKk+L,WAAW2C,SAAU,EAC1Bv9H,EAAOtjE,KAAKk+L,WAAW/5H,WAAU,IAEjCb,EAAOtjE,KAAKk+L,WAAW/5H,aAGtBhiE,GAASA,IAAUmhE,EACpB,OAAOA,MAGL88H,EAAWj+L,EAAM4Q,MAAM,UAE7B,GAAI/S,KAAKk+L,WAAWmC,cAAe,CAE/BJ,GADAA,EAAOG,EAAS,IACJtxK,QAAQ2xK,EAAQ,QAEtBK,EAAgBrnJ,SAASwmJ,EAAM,IAAM,KAAOA,EAAK1rH,WAAW,MAAkB,MAAT0rH,EAC3EA,EAAOa,EAAe,IAAMb,EAAOA,EAGvC,GAAIjgM,KAAKk+L,WAAWoC,gBAAiB,CAEjC5sH,GADAA,EAAU1zE,KAAKk+L,WAAWmC,cAAgBD,EAAS,GAAKA,EAAS,IAC/CtxK,QAAQ2xK,EAAQ,QAE5BM,EAAmBtnJ,SAASi6B,EAAS,IAAM,KAAOA,EAAQa,WAAW,MAAqB,MAAZb,EACpFA,EAAUqtH,EAAkB,IAAMrtH,EAAUA,EAG5C1zE,KAAKk+L,WAAWqC,eAChBL,EAAOE,EAASA,EAASz/L,OAAS,QAGlC6P,EAAS0vL,EAAUD,EAAI,IAAIvsH,EAAO,IAAIwsH,EAAYD,EAAI,IAAIvsH,EAW9D,OATKusH,IACDzvL,EAASA,EAAOqH,MAAMrH,EAAOc,QAAQ,KAAO,EAAGd,EAAO7P,SAGrD+yE,IACDljE,EAASA,EAAOqH,MAAM,EAAGrH,EAAOc,QAAQ,MACpC4uL,IAAQ1vL,EAASA,EAAS,IAAM0vL,IAGjC1vL,uBAvDdmY,EAAAA,KAAI3a,KAAA,CAAC,CAAEgS,KAAM,uFAGG7N,EAAAA,OAAMnE,KAAA,CDlFkB,oCCwIzC4yL,EAzDA,GC7BIpvJ,GAAU,EAERwvJ,GAAY,CAAC,EAAG,EAAG,GACnBC,GAAc,CAAC,EAAG,EAAG,GACrBC,GAAW,CAAC,EAAG,EAAG,GAIxBC,GAAA,SAAArnL,GAAA,SAAAqnL,IAAA,IAAAvsL,EAAA,OAAAkF,GAAAA,EAAAjZ,MAAAb,KAAAU,YAAAV,YAEW4U,EAAA60E,UAAY,CACfC,IAAK,CAAEliF,UAAWmiF,OAAOC,mBAAoBC,UAAW,MAEhE,OAJ4C7xE,EAAAA,EAAAA,uBAD3ChG,EAAAA,aAKDmvL,EALA,CAC4Cr3G,EAAAA,qBAiBtC3jB,GAAO,2BA80BT,SAAAi7H,EACYliK,EACAs9C,GADAx8E,KAAAk/B,UAAAA,EACAl/B,KAAAw8E,KAAAA,EAryBLx8E,KAAA2N,GAAK,mBAAmB6jC,KA2DxBxxC,KAAA4xC,UAAW,EAsEX5xC,KAAAqhM,WAAa,CAAE7tH,MAAO,EAAGE,QAAS,GAgClC1zE,KAAA6lG,YAAa,EASb7lG,KAAA+zD,UAAW,EA4CX/zD,KAAA+jE,WAAa,IAcb/jE,KAAAsoG,KAAOC,GAAgBH,OAwDvBpoG,KAAAyxH,eAAiB,IAAItoG,EAAAA,aAoBrBnpB,KAAAupG,mBAAqB,IAAIpgF,EAAAA,aAgCzBnpB,KAAA8/B,SAAW,IAAI3W,EAAAA,aAoBfnpB,KAAAggC,SAAW,IAAI7W,EAAAA,aAMfnpB,KAAA+/B,UAAY,IAAI5W,EAAAA,aAgEhBnpB,KAAAshM,WAAa,GAIbthM,KAAAuhM,aAAe,GAIfvhM,KAAAwhM,WAAa,GAKbxhM,KAAA6gM,SAAU,EAIV7gM,KAAAyhM,YAAa,EAIbzhM,KAAA0hM,cAAgB,IAAI1B,GAAsBhgM,MAI1CA,KAAA2hM,YAAc,IAAIf,GAAoB5gM,MAgBrCA,KAAA2rJ,iBAAmB3a,GAAuBmF,qBAC1Cn2I,KAAA4hM,eAAiB,KACjB5hM,KAAA6hM,mBAAqB,KAKrB7hM,KAAA8hM,gBAAkB9hM,KAAK6lG,WACvB7lG,KAAA+hM,kBAAoB/hM,KAAK6lG,WAEzB7lG,KAAAgiM,UAAY,GACZhiM,KAAAiiM,YAAc,GACdjiM,KAAAkiM,UAAY,GAGZliM,KAAA2pG,UAAY,IAAInqE,EAAAA,QAShBx/B,KAAA4pG,QAAU,IAAIzgF,EAAAA,aACdnpB,KAAA6pG,SAAW,IAAI1gF,EAAAA,aAEfnpB,KAAAmiM,UAAY,IAAI5xL,IAChBvQ,KAAAoiM,YAAc,IAAI7xL,IAClBvQ,KAAAqiM,YAAc,IAAI9xL,IAClBvQ,KAAAsiM,SAAW,IAAI/xL,IACfvQ,KAAA8pG,WAAwB,KAIxB9pG,KAAAwmE,kBAAuCL,GACvCnmE,KAAAumE,mBAAiCJ,GAgxC7C,OA7vDI3mE,OAAAgC,eACI4/L,EAAAlhM,UAAA,QAAK,KAqCT,WACI,OAAOF,KAAKmpE,YAvChB,SACUhnE,GACN,GAAInC,KAAKuiM,cAAcpgM,GAAQ,KACrBijD,EAASplD,KAAKmpE,OAEpBnpE,KAAKmpE,OAAShnE,EACdnC,KAAKwmE,kBAAkBrkE,OAEjBqgM,EAAUxiM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QAC9CvjE,KAAKsoG,OAASC,GAAgBJ,UAAYnoG,KAAK0iM,gBAAkBF,IACjExiM,KAAK2iM,aAAeH,OAGlBx0L,EAA2C,CAC7CyU,SAAU2iC,EACV/oC,SAAUla,GAEdnC,KAAKyxH,eAAelvG,KAAKvU,OACtB,CACGA,EAA+C,CACjDkwL,WAAYl+L,KACZkiD,aAAc//C,EACdygM,cAAc,GAElB5iM,KAAKupG,mBAAmBhnF,KAAKvU,qCA+BrCxO,OAAAgC,eACI4/L,EAAAlhM,UAAA,kBAAe,KAOnB,WACI,OAAOF,KAAK2rJ,sBAThB,SACoBxpJ,GAChBnC,KAAK2rJ,iBAAmBnsJ,OAAOa,OAAO,GAAIL,KAAK2rJ,iBAAkBxpJ,oCAgBrE3C,OAAAgC,eACI4/L,EAAAlhM,UAAA,gBAAa,KAOjB,WACI,OAA4B,OAAxBF,KAAK4hM,eACE5hM,KAAKyhI,gBAAgB2U,mBAEzBp2I,KAAK4hM,oBAZhB,SACkBz/L,GACdnC,KAAK4hM,eAAiBz/L,mCAoB1B3C,OAAAgC,eACI4/L,EAAAlhM,UAAA,oBAAiB,KAOrB,WACI,OAAgC,OAA5BF,KAAK6hM,mBACE7hM,KAAKyhI,gBAAgB4U,uBAEzBr2I,KAAK6hM,wBAZhB,SACsB1/L,GAClBnC,KAAK6hM,mBAAqB1/L,mCAgF9B3C,OAAAgC,eACI4/L,EAAAlhM,UAAA,SAAM,KADV,WAEI,OAAOF,KAAK+pG,SAAW,gBAG3B,SAAW84F,GACP7iM,KAAK+pG,QAAU84F,EACf7iM,KAAKsjE,MAAuC,IAAhCtjE,KAAK+pG,QAAQz4F,QAAQ,MAAe,WAAa,QAExDtR,KAAKqgM,eAAkBrgM,KAAKsgM,kBAC7BtgM,KAAKsjE,KAAOtjE,KAAKsjE,KAAKzrD,MAAM7X,KAAKsjE,KAAKhyD,QAAQ,KAAO,EAAGtR,KAAKsjE,KAAK3iE,SAGlEX,KAAK2iM,eACL3iM,KAAK2iM,aAAe3iM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAK+pG,2CAyD9DvqG,OAAAgC,eACW4/L,EAAAlhM,UAAA,kBAAe,KAI1B,WACI,OAAOF,KAAKw+F,iBAAmBx+F,KAAKw+F,iBAC/Bx+F,KAAKsoG,OAASC,GAAgBH,OAASpoG,KAAK8iM,uBAAyB9iM,KAAKkqG,8BAPnF,SAC2B/nG,GACvBnC,KAAKw+F,iBAAmBr8F,mCAgE5B3C,OAAAgC,eAAW4/L,EAAAlhM,UAAA,SAAM,KAAjB,WACI,OAAOF,KAAK4pG,aAGhB,SAAkBtwF,GACdtZ,KAAK4pG,QAAUtwF,mCAenB9Z,OAAAgC,eAAW4/L,EAAAlhM,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAK6pG,cAGhB,SAAmBvwF,GACftZ,KAAK6pG,SAAWvwF,mCA6Jb8nL,EAAAlhM,UAAAioE,WAAP,SAAkBhmE,GAGdnC,KAAK+iM,eAAiB5gM,EAEtBnC,KAAKmpE,OAAShnE,EAEVnC,KAAKsoG,OAASC,GAAgBJ,WAC9BnoG,KAAK2iM,aAAe3iM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,UAKvD69H,EAAAlhM,UAAAkoE,iBAAP,SAAwBthB,GAAyB9mD,KAAKwmE,kBAAoB1f,GAGnEs6I,EAAAlhM,UAAAmoE,kBAAP,SAAyBvhB,GAAkB9mD,KAAKumE,mBAAqBzf,GAG9Ds6I,EAAAlhM,UAAA6hG,iBAAP,SAAwB/W,GAA6BhrF,KAAK4xC,SAAWo5C,GASrExrF,OAAAgC,eAAI4/L,EAAAlhM,UAAA,OAAI,KAAR,WACI,OAAOF,KAAKgjM,OAAS,gBAGzB,SAAS1pL,GACLtZ,KAAKgjM,MAAQ1pL,mCAMjB9Z,OAAAgC,eAAI4/L,EAAAlhM,UAAA,eAAY,KAAhB,WACI,OAAIF,KAAK0iM,gBAAkB1uL,UAChBhU,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QAEtCvjE,KAAK0iM,mBAGhB,SAAiBvgM,GACbnC,KAAK0iM,cAAgBvgM,mCAczB3C,OAAAgC,eAAW4/L,EAAAlhM,UAAA,cAAW,KAAtB,WACI,OAAIF,KAAKmC,MACEnC,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QAEtC,oCAMX/jE,OAAAgC,eAAI4/L,EAAAlhM,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKgiM,2CAMhBxiM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,aAAU,KAAd,WACI,OAAOF,KAAKiiM,6CAMhBziM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,WAAQ,KAAZ,WACI,OAAOF,KAAKkiM,2CAMhB1iM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,kBAAe,KAAnB,WACI,OAAQF,KAAK2iM,cAAgB3iM,KAAK2iM,eAAiB3iM,KAAKmkE,WAAU,IAAWnkE,KAAKyhM,4CAMtFjiM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,gBAAa,KAAjB,WACI,OAAsC,IAA/BF,KAAKujE,OAAOjyD,QAAQ,OAA+C,IAA/BtR,KAAKujE,OAAOjyD,QAAQ,sCAMnE9R,OAAAgC,eAAI4/L,EAAAlhM,UAAA,kBAAe,KAAnB,WACI,OAAsC,IAA/BF,KAAKujE,OAAOjyD,QAAQ,sCAM/B9R,OAAAgC,eAAI4/L,EAAAlhM,UAAA,eAAY,KAAhB,WACI,OAAsC,IAA/BF,KAAKujE,OAAOjyD,QAAQ,sCAM/B9R,OAAAgC,eAAI4/L,EAAAlhM,UAAA,qBAAkB,KAAtB,WAEI,QADM+iM,EAAgB,GACbziM,EAAI,EAAGA,EAAI,GAAIA,IACpByiM,EAAczgM,KAAKhC,GAEvB,OAAOyiM,mCAMXzjM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,mBAAgB,KAApB,WAGI,QAFMgjM,EAAc,GACdvvL,GAAsC,IAA9B3T,KAAKujE,OAAOjyD,QAAQ,KAAc,GAAK,GAC5C9Q,EAAI,EAAGA,EAAImT,EAAOnT,IACvB0iM,EAAY1gM,KAAKhC,GAErB,OAAO0iM,mCAUX1jM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,WAAQ,KAAZ,WACI,OAAIF,KAAKmjM,4BACEnjM,KAAKmjM,4BAA4BpxJ,SAErC/xC,KAAKsoG,OAASC,GAAgBH,OAASpoG,KAAKojM,0BAA4BpjM,KAAKqjM,uDAOxF7jM,OAAAgC,eAAI4/L,EAAAlhM,UAAA,UAAO,KAAX,WAAA,IAAA0U,EAAA5U,KACI,MAAO,CACHmC,MAAOnC,KAAKmC,MACZg0L,YAAan2L,KAAKm2L,YAClBwM,aAAc3iM,KAAK2iM,aACnB/3F,WAAY,SAAC5pG,GAAyB,OAAA4T,EAAKg2F,WAAW5pG,sCAI9DxB,OAAAgC,eAAY4/L,EAAAlhM,UAAA,WAAQ,KAApB,WACI,GAAIF,KAAK8pG,YAAc9pG,KAAK8pG,WAAW16C,SAAWpvD,KAAK8pG,WAAW16C,QAAQC,UAAW,KAE3E5sD,EAAQzC,KAAK8pG,WAAW16C,QAAQC,UAAS,IAC/C,OAAO5sD,GAASA,EAAMisD,SAG1B,OAAO,mCAMJ0yI,EAAAlhM,UAAA2uC,SAAP,WACI7uC,KAAKsjM,iBACLtjM,KAAKujM,oBAC8B,IAA/BvjM,KAAKujE,OAAOjyD,QAAQ,OACpBtR,KAAKwjM,gBAGTxjM,KAAKkqG,yBAA2B,CAC5BvqE,OAAO,EACPC,qBAAqB,EACrBF,eAAgB,IAAI8J,GACpB/J,iBAAkB,IAAIuI,IAE1BhoC,KAAK8iM,uBAAyB,GAC9B9iM,KAAK8pG,WAAa9pG,KAAKk/B,UAAUpxB,IAAe+zF,EAAS,UAAqB,OAM3Eu/F,EAAAlhM,UAAAyhD,gBAAP,WAAA,IAAA/sC,EAAA5U,KACQA,KAAKsoG,OAASC,GAAgBJ,UAAYnoG,KAAKgrG,kBAC/CpmE,EAAAA,UAAU5kC,KAAKgrG,iBAAiB1qE,cAAe,WAAWuE,KACtD6zB,EAAAA,SAAS,WAAM,OAAAC,EAAAA,SAAS,EAAGC,EAAAA,2BAC3B9zB,EAAAA,UAAU9kC,KAAK2pG,YACjB5kE,UAAU,SAACzyB,GACI,YAATA,EAAMrR,KAAkC,OAATqR,EAAMrR,KAC5B,cAATqR,EAAMrR,KAAoC,SAATqR,EAAMrR,KACvC2T,EAAK6uL,WAAWnxL,KAKxBtS,KAAKgwG,WAAahwG,KAAK0jM,cACvB1jM,KAAKgwG,UAAUlsE,QAAQzgC,MAAM4N,MAAQjR,KAAK0jM,YAAY5/J,QAAQxD,cAAcpvB,wBAAwBD,MAAQ,MAG5GjR,KAAKgwG,YACLhwG,KAAKgwG,UAAUhwE,SAAS6E,KAAKC,EAAAA,UAAU9kC,KAAK2pG,YAAY5kE,UAAU,WAC1DnwB,EAAK0zF,OAASC,GAAgBJ,UAC9BvzF,EAAK+uL,oBAGT/uL,EAAKorB,SAASzd,KAAK3N,GAGnBA,EAAKi1F,SAAStnF,KAAK3N,KAGvB5U,KAAKgwG,UAAUlwE,SAAS+E,KAAKC,EAAAA,UAAU9kC,KAAK2pG,YAAY5kE,UAAU,WAC9DnwB,EAAKkrB,SAASvd,KAAK3N,GAGnBA,EAAKg1F,QAAQrnF,KAAK3N,KAGtB5U,KAAKgwG,UAAUjwE,UAAU8E,KAAKC,EAAAA,UAAU9kC,KAAK2pG,YAAY5kE,UAAU,SAACzyB,GAGhE,GAFAsC,EAAKmrB,UAAUxd,KAAKjQ,IAEhBA,EAAM8P,OAAV,KAIMo+B,EAAQ5rC,EAAKotD,kBACfxhB,GAAWluC,EAAMA,OAASsC,EAAK0zF,OAASC,GAAgBJ,SAGxDvzF,EAAK62F,wBAFLjrD,EAAMjN,WAMdvzC,KAAK4jM,qBAED5jM,KAAK8pG,aACL9pG,KAAKwvD,gBAAkBxvD,KAAK8pG,WAAWr6C,cAAc1qB,UAAU/kC,KAAK0vD,gBAAgBzO,KAAKjhD,UAK9FohM,EAAAlhM,UAAAutE,mBAAP,WAMQztE,KAAK0jM,aAAe1jM,KAAK0jM,YAAY/0I,aAAe3uD,KAAK0uD,WACzD1uD,KAAK0jM,YAAY/0I,WAAa3uD,KAAK0uD,SACnC1uD,KAAKw8E,KAAKj6C,kBAOX6+J,EAAAlhM,UAAAsmC,YAAP,WACIxmC,KAAK2pG,UAAUznG,MAAK,GACpBlC,KAAK2pG,UAAUljE,YAQZ26J,EAAAlhM,UAAA2jM,eAFP,SAEsBvxL,GAClBtS,KAAK4qG,WAAW5qG,KAAK8qG,wBACrBx4F,EAAM23B,kBAOHm3J,EAAAlhM,UAAA4jM,eADP,WAEI9jM,KAAK4qG,WAAW5qG,KAAK8qG,yBAOjBs2F,EAAAlhM,UAAA0jM,mBAAR,mBACI5jM,KAAK+jM,qBACL,IAAmB,IAAAj0L,EAAAC,EAAA/P,KAAKujE,QAAMtzD,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAA3B,IAAM6wB,EAAI9iB,EAAA9N,MACX,OAAQ4wB,GACJ,IAAK,IACL,IAAK,IACuB,IAAxB/yB,KAAKmiM,UAAUvlK,KAAa58B,KAAKmiM,UAAUz0L,IAAI1N,KAAKujE,OAAOjyD,QAAQyhB,IAC/D/yB,KAAKmiM,UAAUz0L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,IAC/C/yB,KAAKmiM,UAAUz0L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,GAAQ,GACnD,MACJ,IAAK,IACL,IAAK,IACyB,IAA1B/yB,KAAKoiM,YAAYxlK,KAAa58B,KAAKoiM,YAAY10L,IAAI1N,KAAKujE,OAAOjyD,QAAQyhB,IACnE/yB,KAAKoiM,YAAY10L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,IACjD/yB,KAAKoiM,YAAY10L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,GAAQ,GACrD,MACJ,IAAK,IACL,IAAK,IACyB,IAA1B/yB,KAAKqiM,YAAYzlK,KAAa58B,KAAKqiM,YAAY30L,IAAI1N,KAAKujE,OAAOjyD,QAAQyhB,IACnE/yB,KAAKqiM,YAAY30L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,IACjD/yB,KAAKqiM,YAAY30L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,GAAQ,GACrD,MACJ,IAAK,IACL,IAAK,IACsB,IAAvB/yB,KAAKsiM,SAAS1lK,KAAa58B,KAAKsiM,SAAS50L,IAAI1N,KAAKujE,OAAOjyD,QAAQyhB,IAC7D/yB,KAAKsiM,SAAS50L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,IAC9C/yB,KAAKsiM,SAAS50L,IAAI1N,KAAKujE,OAAOygI,YAAYjxK,GAAQ,2GAM1DquK,EAAAlhM,UAAA6jM,eAAR,WAAA,IAAAnvL,EAAA5U,KACIA,KAAKmiM,UAAU1vL,QAAQ,SAAAoa,GAAK,OAAAjY,EAAKutL,UAAUv1J,UAAO/f,KAClD7sB,KAAKoiM,YAAY3vL,QAAQ,SAAAoa,GAAK,OAAAjY,EAAKwtL,YAAYx1J,UAAO/f,KACtD7sB,KAAKqiM,YAAY5vL,QAAQ,SAAAoa,GAAK,OAAAjY,EAAKytL,YAAYz1J,UAAO/f,KACtD7sB,KAAKsiM,SAAS7vL,QAAQ,SAAAoa,GAAK,OAAAjY,EAAK0tL,SAAS11J,UAAO/f,MAG5Cu0K,EAAAlhM,UAAA+jM,oBAAR,SAA4BhoL,EAAcy2B,EAAcI,EAAsBoxJ,EAAqBC,OAC3FC,EACJ,GAAI1xJ,EAAO,KACD/+B,EAAkB,OAATsI,GAA0B,OAATA,EAAiBy2B,EAAMphC,QAAQ2K,GAAQy2B,EAAMphC,QAAQmoC,SAASx9B,EAAM,KAChGoD,OAAI,GAEO,IAAX1L,IACIuwL,EACIvwL,EAAQ,GACRm/B,EAAe9yC,KAAKqkM,cAAc3xJ,EAAM/+B,EAAQ,GAAIwwL,GACpDC,EAAepkM,KAAKskM,UAAU5xJ,EAAOI,EAAcoxJ,EAAYC,KAE/DrxJ,EAAe9yC,KAAKqkM,cAAc3xJ,EAAM,GAAIyxJ,GAC5CC,EAAepkM,KAAKukM,UAAU7xJ,EAAOI,EAAcoxJ,EAAYC,KAGnE9kL,EAAOqzB,EAAM76B,MAAMlE,EAAQ,EAAGA,EAAQ,GAEtCywL,EAAe,CAAEtxJ,aADjBA,EAAe9yC,KAAKqkM,cAAc3xJ,EAAM/+B,GAAQwwL,GACjB9kL,KAAIA,IAEvC+kL,EAAa/kL,KAAOrf,KAAKwkM,cAAcJ,EAAa/kL,KAAM8kL,IAGlE,OAAOC,GAGHhD,EAAAlhM,UAAAskM,cAAR,SAAsBnlL,EAAW8kL,GAC7B,IAAK,IAAI3jM,EAAI,EAAGA,EAAI6e,EAAK1e,OAAQH,IACJ,iBAAb6e,EAAK7e,KACb6e,EAAK7e,GAAKR,KAAKqkM,cAAchlL,EAAK7e,GAAI2jM,IAG9C,OAAO9kL,GAGH+hL,EAAAlhM,UAAAmkM,cAAR,SAAsBpoL,EAAWkoL,GAC7B,GAAa,OAATloL,EACAA,EAAO,QACJ,GAAIkoL,GAA8B,iBAAlB,EAA4B,KACzCrD,EAAgB7kL,EAAO,MAAsC,IAA/Bjc,KAAKujE,OAAOjyD,QAAQ,QAA+C,IAA/BtR,KAAKujE,OAAOjyD,QAAQ,OACtFmzL,EAAkBxoL,EAAO,KAAqC,IAA/Bjc,KAAKujE,OAAOjyD,QAAQ,MAGzD2K,GAD+B,SAAbkoL,EAAuBrD,EAAe2D,GACpC,IAAMxoL,EAAO,GAAGA,EAExC,OAAOA,GAGHmlL,EAAAlhM,UAAAqkM,UAAR,SAAkB7xJ,EAAcI,EAAsBoxJ,EAAqBC,OAGnE9kL,EAFEm4K,EAAgB9kJ,EAAMphC,QAAQmoC,SAAS3G,EAAc,KACrD4xJ,EAAahyJ,EAAM/xC,OA0BzB,OAvBuB,IAAnB62L,GACAn4K,EAAOqzB,EAAM76B,MAAM,EAAG,GACtBi7B,EAAeJ,EAAM,IACdwxJ,GAGH7kL,EAFAm4K,EAAgB,EAAI,GACpBn4K,EAAOqzB,EAAM76B,MAAM6sL,GAAc,EAAIlN,GAAgBkN,IACzC/hM,OAAO+vC,EAAM76B,MAAM,EAAG2/K,EAAgB,IAC3CA,EAAgB,EAAIkN,GAC3BrlL,EAAOqzB,EAAM76B,MAAM2/K,EAAgB,EAAGkN,IAC1B/hM,OAAO+vC,EAAM76B,MAAM,EAAG2/K,EAAgB,EAAIkN,IAE/ChyJ,EAAM76B,MAAM2/K,EAAgB,EAAGA,EAAgB,GAG1D1kJ,EAAkC,IAAlB0kJ,EAAuB9kJ,EAAMgyJ,EAAa,GAAKhyJ,EAAM8kJ,EAAgB,IAC9EA,EAAgB,GACvBn4K,EAAOqzB,EAAM76B,MAAM2/K,EAAgB,EAAGA,EAAgB,GACtD1kJ,EAAeJ,EAAM8kJ,EAAgB,IACZ,IAAlBA,IACPn4K,EAAOqzB,EAAM76B,MAAM,EAAG,IAE1BwH,EAAOrf,KAAKwkM,cAAcnlL,EAAM8kL,GAEzB,CACHrxJ,aAFJA,EAAe9yC,KAAKqkM,cAAcvxJ,EAAcqxJ,GAG5C9kL,KAAIA,IAIJ+hL,EAAAlhM,UAAAokM,UAAR,SAAkB5xJ,EAAcI,EAAsBoxJ,EAAqBC,OAGnE9kL,EAFEm4K,EAAgB9kJ,EAAMphC,QAAQmoC,SAAS3G,EAAc,KACrD4xJ,EAAahyJ,EAAM/xC,OA0BzB,OAvBuB,IAAnB62L,GACAn4K,EAAOqzB,EAAM76B,MAAM,EAAG,GACtBi7B,EAAeJ,EAAM,IACdwxJ,GAGH7kL,EAFAm4K,EAAgB,GAChBn4K,EAAOqzB,EAAM76B,MAAM6sL,GAAc,EAAIlN,GAAgBkN,IACzC/hM,OAAO+vC,EAAM76B,MAAM,EAAG2/K,EAAgB,IAC3CA,EAAgB,GAAKkN,GAC5BrlL,EAAOqzB,EAAM76B,MAAM2/K,EAAgB,EAAGkN,IAC1B/hM,OAAO+vC,EAAM76B,MAAM,EAAG2/K,EAAgB,EAAIkN,IAE/ChyJ,EAAM76B,MAAM2/K,EAAgB,EAAGA,EAAgB,GAG1D1kJ,EAAgB0kJ,IAAkBkN,EAAa,EAAKhyJ,EAAM,GAAKA,EAAM8kJ,EAAgB,IAC9EA,EAAgB,EAAIkN,EAAa,GACxCrlL,EAAOqzB,EAAM76B,MAAM2/K,EAAgB,EAAGA,EAAgB,GACtD1kJ,EAAeJ,EAAM8kJ,EAAgB,IAC9BA,IAAkBkN,EAAa,IACtCrlL,EAAOqzB,EAAM76B,MAAM2/K,EAAgB,EAAGkN,IAE1CrlL,EAAOrf,KAAKwkM,cAAcnlL,EAAM8kL,GAEzB,CACHrxJ,aAFJA,EAAe9yC,KAAKqkM,cAAcvxJ,EAAcqxJ,GAG5C9kL,KAAIA,IAIJ+hL,EAAAlhM,UAAAuiM,YAAR,SAAoBtgM,EAAaohE,GAC7B,GAAKphE,EAEE,KAECwiM,EADA1E,EAAO99L,EAAM2xE,WACI8wH,OAAa,EAE5BC,EAAS1iM,EAAM4xE,aACfmsH,EAAQD,EAAO,GAAM,KAAO,KAuBlC,OAlBQ2E,GAHqB,IAAzBrhI,EAAOjyD,QAAQ,KACX2uL,EAAO,IACPA,GAAQ,IACe,KAAgC,IAA1B18H,EAAOjyD,QAAQ,MAAe,IAAM2uL,EAAO,GAAGA,EAC3D,IAATA,EACS,KACTA,EAAO,KAAgC,IAA1B18H,EAAOjyD,QAAQ,MACnB,IAAM2uL,EAEN,GAAGA,EAGnBA,EAAO,KAAgC,IAA1B18H,EAAOjyD,QAAQ,MACZ,IAAM2uL,EAEN,GAAGA,EAI3B0E,EAAkBE,EAAS,KAAgC,IAA1BthI,EAAOjyD,QAAQ,MAAe,IAAMuzL,EAAS,GAAGA,EAE1EthI,EAAOz0C,QAAQ,KAAM81K,GAAe91K,QAAQ,IAAK81K,GACnD91K,QAAQ,KAAM81K,GAAe91K,QAAQ,IAAK81K,GAC1C91K,QAAQ,KAAM61K,GAAiB71K,QAAQ,IAAK61K,GAC5C71K,QAAQ,KAAMoxK,GAhCnB,MAAO,IAoCPkB,EAAAlhM,UAAA4kM,gBAAR,SAAwBt+I,EAAY1lC,GAChC9gB,KAAKgiM,UAAYhiM,KAAKwkM,cAAcxkM,KAAKshM,WAAWzpL,MAAM2uC,EAAO1lC,GAAM,SAGnEsgL,EAAAlhM,UAAA6kM,kBAAR,SAA0Bv+I,EAAY1lC,GAClC9gB,KAAKiiM,YAAcjiM,KAAKwkM,cAAcxkM,KAAKuhM,aAAa1pL,MAAM2uC,EAAO1lC,GAAM,WAGvEsgL,EAAAlhM,UAAA8kM,gBAAR,SAAwBx+I,EAAY1lC,GAChC9gB,KAAKkiM,UAAYliM,KAAKwhM,WAAW3pL,MAAM2uC,EAAO1lC,IAG1CsgL,EAAAlhM,UAAA+kM,eAAR,SAAuBvyJ,GACnB,IAAK,IAAIlyC,EAAI,EAAGA,EAAI,EAAGA,IACnBkyC,EAAMlwC,KAAK,OAIX4+L,EAAAlhM,UAAAojM,eAAR,eACQ4B,EAAiB,IACa,IAA9BllM,KAAKujE,OAAOjyD,QAAQ,OACpB4zL,EAAiB,IAGrBA,GAAkBllM,KAAKqhM,WAAW7tH,UAE9BhzE,GAAkC,IAA9BR,KAAKujE,OAAOjyD,QAAQ,KAAc,EAAI,EAO9C,IALI4zL,EAAiB,IAAMllM,KAAK6lG,cAC5B7lG,KAAKilM,eAAejlM,KAAKshM,YACzBthM,KAAK8hM,iBAAkB,GAGvBoD,EAAiB,EACjB,KAAQ1kM,EAAI0kM,EAAgB1kM,IACxBR,KAAKshM,WAAW9+L,KAAKhC,EAAIR,KAAKqhM,WAAW7tH,YAG7CxzE,KAAKshM,WAAW9+L,KAAK,IAGrB0iM,EAAiB,IAAMllM,KAAK6lG,aAC5B7lG,KAAKilM,eAAejlM,KAAKshM,aAIzBF,EAAAlhM,UAAAqjM,iBAAR,eACU4B,EAAmB,GAAKnlM,KAAKqhM,WAAW3tH,SAE1CyxH,EAAmB,IAAMnlM,KAAK6lG,cAC9B7lG,KAAKilM,eAAejlM,KAAKuhM,cACzBvhM,KAAK+hM,mBAAoB,GAG7B,IAAK,IAAIvhM,EAAI,EAAGA,EAAI2kM,EAAkB3kM,IAClCR,KAAKuhM,aAAa/+L,KAAKhC,EAAIR,KAAKqhM,WAAW3tH,UAG3CyxH,EAAmB,IAAMnlM,KAAK6lG,aAC9B7lG,KAAKilM,eAAejlM,KAAKuhM,eAIzBH,EAAAlhM,UAAAsjM,cAAR,WAEIxjM,KAAKilM,eAAejlM,KAAKwhM,YAEzBxhM,KAAKwhM,WAAWh/L,KAAK,MACrBxC,KAAKwhM,WAAWh/L,KAAK,MAErBxC,KAAKilM,eAAejlM,KAAKwhM,aAGrBJ,EAAAlhM,UAAAklM,iBAAR,eACU9xH,EAAOtzE,KAAKmC,MAAQ,IAAIgO,KAAKnQ,KAAKmC,OAAS,IAAIgO,KAkBrD,OAjBInQ,KAAKo/L,cACL9rH,EAAK44B,SAASzyD,SAASz5C,KAAKo/L,aAAc,KAE1Cp/L,KAAKw/L,gBACLlsH,EAAK64B,WAAW1yD,SAASz5C,KAAKw/L,eAAgB,KAElDlsH,EAAK84B,WAAW,IACVpsG,KAAKqgM,eAAuC,OAAtBrgM,KAAKo/L,eAA4Bp/L,KAAKqgM,eAAiBrgM,KAAKo/L,cAAgB,OAC1E,OAAtBp/L,KAAK4/L,cACTtsH,EAAK44B,SAAS54B,EAAKQ,WAAa,KAE/B9zE,KAAKqgM,eAAuC,OAAtBrgM,KAAK4/L,cAAyB5/L,KAAKo/L,aAAe,MACzE9rH,EAAK44B,SAAS54B,EAAKQ,WAAa,IAEV,OAAtB9zE,KAAK4/L,cAA+C,OAAtB5/L,KAAKo/L,cACnC9rH,EAAK44B,SAAS,GAEX54B,GAGH8tH,EAAAlhM,UAAAmlM,oBAAR,SAA4BljM,OAGpB89L,EAAMvsH,EAASwsH,EAFb5sH,EAAOtzE,KAAKmC,MAAQ,IAAIgO,KAAKnQ,KAAKmC,OAASnC,KAAK+iM,eAAiB,IAAI5yL,KAAKnQ,KAAK+iM,gBAAkB,IAAI5yL,KACrGiwL,EAAWj+L,EAAM4Q,MAAM,UAgC7B,OA7BAugE,EAAK84B,WAAW,GAEZpsG,KAAKqgM,gBACLJ,EAAOG,EAAS,GAChB9sH,EAAK44B,SAASzyD,SAASwmJ,EAAM,MAG7BjgM,KAAKsgM,kBACL5sH,EAAU1zE,KAAKqgM,cAAgBD,EAAS,GAAKA,EAAS,GACtD9sH,EAAK64B,WAAW1yD,SAASi6B,EAAS,MAGlC1zE,KAAKugM,eACLL,EAAOE,EAASA,EAASz/L,OAAS,IAE5BX,KAAKqgM,eAAgD,OAA/B/sH,EAAKQ,WAAWrjE,aAClCzQ,KAAKqgM,eAAiB/sH,EAAKQ,WAAWrjE,YAAc,OAAmB,OAATyvL,GAC5D5sH,EAAK44B,SAAS54B,EAAKQ,WAAa,KAGvC9zE,KAAKqgM,eAA0B,OAATH,GAAiB5sH,EAAKQ,WAAWrjE,WAAa,MACrE6iE,EAAK44B,SAAS54B,EAAKQ,WAAa,IAGhC9zE,KAAKqgM,eAAqC,KAApB/sH,EAAKQ,YAA8B,OAATosH,GAChD5sH,EAAK44B,SAAS,IAIf54B,GAGH8tH,EAAAlhM,UAAAqiM,cAAR,SAAsBpgM,GAClB,QAAInC,KAAK8lG,UAAY3jG,EAAQnC,KAAKqlM,oBAAoBrlM,KAAK8lG,cAEhD9lG,KAAK+lG,UAAY5jG,EAAQnC,KAAKqlM,oBAAoBrlM,KAAK+lG,YAO9Dq7F,EAAAlhM,UAAAolM,cAAR,SAAsBhsL,OACdisL,GAAS,EACTC,GAAS,EAEPpF,EAAW9mL,EAAIvG,MAAM,UACrB0yL,EAAK,IAAI5/H,OAAO7lE,KAAK+jE,WAAY,KAMvC,GAJI/jE,KAAKqgM,gBACLkF,GAAuF,IAA9EvlM,KAAK0lM,iBAAiBp0L,QAAQmoC,SAAS2mJ,EAAS,GAAGtxK,QAAQ22K,EAAI,IAAK,MAG7EzlM,KAAKsgM,gBAAiB,KAChB5sH,EAAU1zE,KAAKqgM,cAAgBD,EAAS,GAAKA,EAAS,GAC5DoF,GAAqF,IAA5ExlM,KAAK2lM,mBAAmBr0L,QAAQmoC,SAASi6B,EAAQ5kD,QAAQ22K,EAAI,IAAK,KAG/E,OAAOF,GAAUC,GAGbpE,EAAAlhM,UAAAysG,mBAAR,WACI,OAAO3sG,KAAKgrG,iBAAiB1qE,cAAcqmC,gBAGvCy6H,EAAAlhM,UAAA+rG,mBAAR,SAA2BzlD,EAAe1lC,QAAA,IAAAA,IAAAA,EAAA0lC,GACtCxmD,KAAKgrG,iBAAiB1qE,cAAc4nC,kBAAkB1hB,EAAO1lC,IAGzDsgL,EAAAlhM,UAAA0lM,qBAAR,WACQ5lM,KAAKsoG,OAASC,GAAgBJ,WAC9BnoG,KAAK2iM,aAAe3iM,KAAKyiM,YAAYziM,KAAKolM,mBAAoBplM,KAAKujE,UAInE69H,EAAAlhM,UAAA2lM,WAAR,SAAmBC,EAAkBhhF,EAAcihF,EAAcC,EAAgBhtJ,OACvEoM,EAAS,IAAIj1C,KAAK21L,GAExBA,EAAW35F,WAAWnzD,EAAOgtJ,GACzBF,EAAW1yH,YAAchuB,EAAOguB,WAAapzE,KAAK6lG,YAClDigG,EAAW3yH,QAAQ/tB,EAAOguB,eAG1BM,EAAUoyH,EAAW/xH,aACzB,OAAI+xH,EAAW11L,UAAY21L,EAAO31L,UAC1BpQ,KAAK6lG,YACLnyB,EAAUA,EAAUoxC,EAAO/wC,aAAe,GAAKL,EAAUA,EACzDoxC,EAAO3Y,WAAWnzD,EAAO06B,GAClBoxC,GAEA1/D,EAEJ0gJ,EAAW11L,UAAY00G,EAAO10G,UACjCpQ,KAAK6lG,YACLnyB,EAAUA,GAAWqyH,EAAOhyH,aAAeL,EAAUA,EAAU,GAC/DqyH,EAAO55F,WAAWz4B,GACXqyH,GAEA3gJ,EAGJ0gJ,GAIP1E,EAAAlhM,UAAA+lM,aAAR,SAAqBH,EAAkBI,EAAgBltJ,OAC/C06B,EAAUoyH,EAAW/xH,aAAgB/6B,EAAOktJ,EAOhD,OALIxyH,EAAU,GAAKA,GAAW,MAC1BA,EAAU1zE,KAAK6lG,WAAanyB,EAAkB,GAAP16B,EAAa8sJ,EAAW/xH,cAGnE+xH,EAAW35F,WAAWz4B,GACfoyH,GAGH1E,EAAAlhM,UAAAimM,qBAAR,WAAA,IAAAvxL,EAAA5U,KACI,GAAIA,KAAKmC,MAAO,KAENi+L,EADepgM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QACzBxwD,MAAM,UAEhC/S,KAAKqgM,gBACLrgM,KAAKo/L,aAAegB,EAAS,IAG7BpgM,KAAKsgM,kBACLtgM,KAAKw/L,eAAiBx/L,KAAKqgM,cAAgBD,EAAS,GAAKA,EAAS,IAGlEpgM,KAAKugM,cAAoC,OAApBvgM,KAAKwhM,aAC1BxhM,KAAK4/L,aAAeQ,EAASA,EAASz/L,OAAS,IAInDX,KAAKo/L,eAAiBprL,YACtBhU,KAAKo/L,cAAgBp/L,KAAKqgM,eAAiBrgM,KAAKmC,MAAQnC,KAAKmC,MAAM2xE,WAAWrjE,WAC1EzQ,KAAKqgM,cAAgB,GAAGrgM,KAAKshM,WAAW,GAAO,KAEnDthM,KAAKw/L,iBAAmBxrL,YACxBhU,KAAKw/L,gBAAkBx/L,KAAKsgM,iBAAmBtgM,KAAKmC,MAAQnC,KAAKmC,MAAM4xE,aAAatjE,WAAa,KAEjGzQ,KAAK4/L,eAAiB5rL,WAAiC,OAApBhU,KAAKwhM,aACxCxhM,KAAK4/L,aAAe5/L,KAAKwhM,WAAW,IAGxCxhM,KAAKomM,kBAAoBpmM,KAAKo/L,aAC9Bp/L,KAAKqmM,oBAAsBrmM,KAAKw/L,eAChCx/L,KAAKsmM,kBAAoBtmM,KAAK4/L,aAE9B5/L,KAAKumE,qBAELvmE,KAAK8kM,gBAAgB,EAlyCT,GAmyCZ9kM,KAAK+kM,kBAAkB,EAnyCX,GAoyCZ/kM,KAAKglM,gBAAgB,EApyCT,GAsyCRhlM,KAAKo/L,cACLp/L,KAAKq/L,mBAAmBr/L,KAAKo/L,cAE7Bp/L,KAAKw/L,gBACLx/L,KAAKy/L,qBAAqBz/L,KAAKw/L,gBAE/Bx/L,KAAK4/L,cACL5/L,KAAK6/L,mBAAmB7/L,KAAK4/L,cAGjCrjJ,sBAAsB,WACd3nC,EAAKgqL,SACLhqL,EAAKgqL,SAASt+J,cAAciT,QACrB3+B,EAAK8pL,YACZ9pL,EAAK8pL,WAAWp+J,cAAciT,WAKlC6tJ,EAAAlhM,UAAAyjM,kBAAR,eACUlhL,EAAWziB,KAAKmC,MAChBkjD,EAASrlD,KAAKqlM,oBAAoBrlM,KAAK2iM,cAE7C,GAAI3iM,KAAK2iM,eAAiB3iM,KAAKmkE,WAAU,GAIzC,GAAInkE,KAAKuiM,cAAcl9I,GACdrlD,KAAKmC,OAASsgB,EAASrS,YAAci1C,EAAOj1C,YAC7CpQ,KAAKmC,MAAQkjD,OAEd,CACHrlD,KAAK2iM,aAAe3iM,KAAK2hM,YAAYn9L,UAAUxE,KAAKyiM,YAAYhgL,EAAUziB,KAAKujE,aAEzEv1D,EAA+C,CACjDkwL,WAAYl+L,KACZkiD,aAAcmD,EACdu9I,cAAc,GAElB5iM,KAAKupG,mBAAmBhnF,KAAKvU,KAI3BozL,EAAAlhM,UAAAwvD,gBAAV,WACI,IAAK1vD,KAAK8pG,WAAW16C,QAAQQ,SAAW5vD,KAAK8pG,WAAW16C,QAAQS,SAC3D7vD,KAAK8pG,WAAW16C,QAAQC,WAAarvD,KAAK8pG,WAAW16C,QAAQO,gBAAiB,KACzEnP,EAAQxgD,KAAK0rG,iBAAmB1rG,KAAKkuG,4BACvCluG,KAAK0jM,YAAY70I,UACjBrO,EAAMwO,MAAQhvD,KAAK8pG,WAAW96C,MAAQX,GAAcP,MAAQO,GAAcN,QAE1EvN,EAAMwO,MAAQhvD,KAAK8pG,WAAW96C,MAAQX,GAAcR,QAAUQ,GAAcN,QAIhF/tD,KAAK0jM,aAAe1jM,KAAK0jM,YAAY/0I,aAAe3uD,KAAK0uD,WACzD1uD,KAAK0jM,YAAY/0I,WAAa3uD,KAAK0uD,WAO3C0yI,EAAAlhM,UAAA8hE,eAAA,WACI,OAAOhiE,KAAKgrG,iBAAmBhrG,KAAKgrG,iBAAiB1qE,cAAgB,MAMlE8gK,EAAAlhM,UAAA4qG,qBAAP,WACI,OAAO9qG,KAAK0jM,YAAe1jM,KAAK0jM,YAAa5/J,QAAQxD,cAAgB,MAoBlE8gK,EAAAlhM,UAAA0qG,WAAP,SAAkB5pG,GACd,IAAKhB,KAAKgwG,UAAU7hE,UAChB,OAAOnuC,KAAK2jM,wBAEVrpK,EAAWt6B,KAAKouC,gBAElBptC,GAAUs5B,GAAYA,EAASmF,mBAC/BnF,EAASmF,iBAAiBnF,SAASt5B,OAASA,GAE5ChB,KAAK0kC,SACLpK,EAASoK,OAAS1kC,KAAK0kC,QAG3B1kC,KAAKgwG,UAAU7hG,KAAKmsB,GACpBt6B,KAAKmmM,wBAeF/E,EAAAlhM,UAAAm/L,mBAAP,SAA0BpjL,GACtB,GAAIjc,KAAKqgM,cAAe,KACdkG,EAAevmM,KAAKikM,oBAAoBhoL,EAAMjc,KAAKshM,WAAYthM,KAAKo/L,aAAcp/L,KAAK8hM,gBAAiB,QAC1GyE,IACAvmM,KAAKgiM,UAAYuE,EAAalnL,KAC9Brf,KAAKo/L,aAAemH,EAAazzJ,aACjC9yC,KAAK4lM,0BAiBVxE,EAAAlhM,UAAAu/L,qBAAP,SAA4BxjL,GACxB,GAAIjc,KAAKsgM,gBAAiB,KAChBkG,EAAiBxmM,KAAKikM,oBAAoBhoL,EAAMjc,KAAKuhM,aAAcvhM,KAAKw/L,eAAgBx/L,KAAK+hM,kBAAmB,UAClHyE,IACAxmM,KAAKiiM,YAAcuE,EAAennL,KAClCrf,KAAKw/L,eAAiBgH,EAAe1zJ,aACrC9yC,KAAK4lM,0BAiBVxE,EAAAlhM,UAAA2/L,mBAAP,SAA0B5jL,GACtB,GAAIjc,KAAKugM,aAAc,KACbkG,EAAezmM,KAAKikM,oBAAoBhoL,EAAMjc,KAAKwhM,WAAYxhM,KAAK4/L,cAAc,EAAO,MAC3F6G,IACAzmM,KAAKkiM,UAAYuE,EAAapnL,KAC9Brf,KAAK4/L,aAAe6G,EAAa3zJ,aACjC9yC,KAAK4lM,0BAQVxE,EAAAlhM,UAAAi+L,SAAP,eACUA,EAAWn+L,KAAKskM,UAAUtkM,KAAKshM,WAAYthM,KAAKo/L,aAAcp/L,KAAK8hM,gBAAiB,QAC1F9hM,KAAKgiM,UAAY7D,EAAS9+K,KAC1Brf,KAAKo/L,aAAejB,EAASrrJ,aAE7B9yC,KAAK4lM,wBAMFxE,EAAAlhM,UAAAo+L,SAAP,eACUA,EAAWt+L,KAAKukM,UAAUvkM,KAAKshM,WAAYthM,KAAKo/L,aAAcp/L,KAAK8hM,gBAAiB,QAC1F9hM,KAAKgiM,UAAY1D,EAASj/K,KAC1Brf,KAAKo/L,aAAed,EAASxrJ,aAE7B9yC,KAAK4lM,wBAMFxE,EAAAlhM,UAAAk+L,WAAP,eACUA,EAAap+L,KAAKskM,UAAUtkM,KAAKuhM,aAAcvhM,KAAKw/L,eAAgBx/L,KAAK+hM,kBAAmB,UAClG/hM,KAAKiiM,YAAc7D,EAAW/+K,KAC9Brf,KAAKw/L,eAAiBpB,EAAWtrJ,aAEjC9yC,KAAK4lM,wBAMFxE,EAAAlhM,UAAAq+L,WAAP,eACUA,EAAav+L,KAAKukM,UAAUvkM,KAAKuhM,aAAcvhM,KAAKw/L,eAAgBx/L,KAAK+hM,kBAAmB,UAClG/hM,KAAKiiM,YAAc1D,EAAWl/K,KAC9Brf,KAAKw/L,eAAiBjB,EAAWzrJ,aAEjC9yC,KAAK4lM,wBAMFxE,EAAAlhM,UAAAm+L,SAAP,eACU7G,EAAgBx3L,KAAKwhM,WAAWlwL,QAAQtR,KAAK4/L,cAE/CpI,EAAgB,EAAIx3L,KAAKwhM,WAAW7gM,OAAS,IAC7CX,KAAKglM,gBAAgBxN,EAAgB,EAAGA,EAAgB,GACxDx3L,KAAK4/L,aAAe5/L,KAAKwhM,WAAWhK,EAAgB,GAEpDx3L,KAAK4lM,yBAONxE,EAAAlhM,UAAAs+L,SAAP,eACUhH,EAAgBx3L,KAAKwhM,WAAWlwL,QAAQtR,KAAK4/L,cAE/CpI,EAAgB,IAChBx3L,KAAKglM,gBAAgBxN,EAAgB,EAAGA,EAAgB,GACxDx3L,KAAK4/L,aAAe5/L,KAAKwhM,WAAWhK,EAAgB,GAEpDx3L,KAAK4lM,yBAYNxE,EAAAlhM,UAAA2+L,cAAP,eACU6H,EAAO1mM,KAAKolM,mBAClB,GAAIplM,KAAKuiM,cAAcmE,GAGnB,OAFA1mM,KAAKoO,QACLpO,KAAKmC,MAAQukM,GACN,MAED14L,EAA+C,CACjDkwL,WAAYl+L,KACZkiD,aAAcwkJ,EACd9D,cAAc,GAGlB,OADA5iM,KAAKupG,mBAAmBhnF,KAAKvU,IACtB,GAYRozL,EAAAlhM,UAAA4+L,kBAAP,WACQ9+L,KAAKsoG,OAASC,GAAgBJ,WAC9BnoG,KAAK2iM,aAAe3iM,KAAKmC,MAAQnC,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QAAUvjE,KAAKmkE,WAAU,IAGhGnkE,KAAKoO,QAELpO,KAAKo/L,aAAep/L,KAAKomM,kBACzBpmM,KAAKw/L,eAAiBx/L,KAAKqmM,oBAC3BrmM,KAAK4/L,aAAe5/L,KAAKsmM,mBAatBlF,EAAAlhM,UAAAymM,YAAP,WACI,OAAO3mM,KAAKgiM,UAAUhoL,OAAO,SAACimL,GAAS,MAAS,KAATA,KAapCmB,EAAAlhM,UAAA0mM,cAAP,WACI,OAAO5mM,KAAKiiM,YAAYjoL,OAAO,SAAC6qL,GAAW,MAAW,KAAXA,KAaxCzD,EAAAlhM,UAAA2mM,WAAP,WACI,OAAO7mM,KAAKkiM,UAAUloL,OAAO,SAAC8sL,GAAS,MAAS,KAATA,KAapC1F,EAAAlhM,UAAAkO,MAAP,WACIpO,KAAKgwG,UAAU5hG,SAMZgzL,EAAAlhM,UAAAikE,UAAP,SAAiB4iI,QAAA,IAAAA,IAAAA,GAAA,OACPC,EAAehnM,KAAKsjE,KAAKx0C,QAAQ,IAAI+2C,OAAO,IAAK,KAAM7lE,KAAK+jE,YAAYj1C,QAAQ,KAAM,MACtFm4K,EAAWjnM,KAAKsjE,KAAKx0C,QAAQ,IAAI+2C,OAAO,IAAK,KAAM7lE,KAAK+jE,YAAYj1C,QAAQ,IAAI+2C,OAAO,IAAK,KAAM7lE,KAAK+jE,YAE7G,OAAOgjI,EAAeC,EAAeC,GAMlC7F,EAAAlhM,UAAAqrC,MAAP,WACI,GAAIvrC,KAAKgwG,UAAU7hE,UAAW,CAC1BnuC,KAAK6gM,SAAU,EACf7gM,KAAKyhM,YAAa,MAEZr8I,EAAS,IAAIj1C,KAAKnQ,KAAKmC,OAK7B,GAHAnC,KAAK2iM,aAAe,GACpB3iM,KAAKmC,MAAM+pG,SAAS,EAAG,GAEnB9mD,EAAOh1C,YAAcpQ,KAAKmC,MAAMiO,UAAW,KACrCpC,EAA2C,CAC7CyU,SAAU2iC,EACV/oC,SAAUrc,KAAKmC,OAEnBnC,KAAKyxH,eAAelvG,KAAKvU,SAG7BhO,KAAKoO,SAONgzL,EAAAlhM,UAAAgvD,QAAP,SAAe58C,OACLgH,EAAMhH,EAAMtR,OAAOmB,MACnBijD,EAAS,IAAIj1C,KAAKnQ,KAAKmC,OAM7B,GAJAnC,KAAKyhM,WAAanoL,IAAQtZ,KAAKmkE,WAAU,IAIH,IAAlC7qD,EAAIhI,QAAQtR,KAAK+jE,YACjB,GAAI/jE,KAAKslM,cAAchsL,GAAM,KACnB+rC,EAASrlD,KAAKqlM,oBAAoB/rL,GACpC8rC,EAAOh1C,YAAci1C,EAAOj1C,YAC5BpQ,KAAKmC,MAAQkjD,OAEd,KACGr3C,EAA+C,CACjDkwL,WAAYl+L,KACZkiD,aAAc5oC,EACdspL,cAAc,GAElB5iM,KAAKupG,mBAAmBhnF,KAAKvU,QAG9B,KAAKhO,KAAKmC,OAAUmX,GAAOA,IAAQtZ,KAAKmkE,WAAU,KACrDnkE,KAAKyhM,YAAa,EAElBzhM,KAAKmC,MAAM+pG,SAAS,EAAG,GACvBlsG,KAAK2iM,aAAerpL,EAEhB8rC,EAAOh1C,YAAcpQ,KAAKmC,MAAMiO,YAAW,CACrCpC,EAA2C,CAC7CyU,SAAU2iC,EACV/oC,SAAUrc,KAAKmC,OAEnBnC,KAAKyxH,eAAelvG,KAAKvU,KAQ9BozL,EAAAlhM,UAAA0uD,QAAP,SAAet8C,GACXtS,KAAKyhM,WAAanvL,EAAMtR,OAAOmB,QAAUnC,KAAKmkE,WAAU,IAMrDi9H,EAAAlhM,UAAA4uD,OAAP,SAAcx8C,GACV,GAAItS,KAAKsoG,OAASC,GAAgBJ,SAAU,KAClChmG,EAAQmQ,EAAMtR,OAAOmB,MAG3B,GAFAnC,KAAKyhM,WAAuB,KAAVt/L,EAClBnC,KAAK2iM,aAAexgM,EAChBA,GAASA,IAAUnC,KAAKmkE,YACxB,GAAInkE,KAAKslM,cAAcnjM,GAAQ,KACrBkjD,EAASrlD,KAAKqlM,oBAAoBljM,GACnCnC,KAAKmC,OAASnC,KAAKmC,MAAMiO,YAAci1C,EAAOj1C,YAC/CpQ,KAAKmC,MAAQkjD,OAEd,KACGr3C,EAA+C,CACjDkwL,WAAYl+L,KACZkiD,aAAc//C,EACdygM,cAAc,GAElB5iM,KAAKupG,mBAAmBhnF,KAAKvU,IAKrChO,KAAKgwG,UAAU7hE,WACfnuC,KAAKyrG,yBAIN21F,EAAAlhM,UAAA8rG,UAAP,SAAiB15F,GAGTA,EAAMtR,SAAWhB,KAAKgiE,kBACtB1vD,EAAM23B,kBAOPm3J,EAAAlhM,UAAAujM,WAAP,SAAkBnxL,GAAlB,IAGQ0mC,EACAkuJ,EAJRtyL,EAAA5U,KACIsS,EAAM23B,qBAIA67J,EAAa,IAAI31L,KAAKnQ,KAAKmC,OAC3B8mC,EAAMjpC,KAAK+lG,SAAW/lG,KAAKqlM,oBAAoBrlM,KAAK+lG,UAAY/lG,KAAKqlM,oBAAoB,SACzFh7K,EAAMrqB,KAAK8lG,SAAW9lG,KAAKqlM,oBAAoBrlM,KAAK8lG,UAAY9lG,KAAKqlM,oBAAoB,SAEzFhiI,EAASrjE,KAAK2sG,qBAEpB,GAAIr6F,EAAMrR,IAAK,KACLA,EAAMqR,EAAMrR,IAClB+3C,EAAU,cAAH/3C,GAA8B,SAAHA,GAA8B,EAAI,EAOxE,GAJIqR,EAAM8mC,SACNJ,EAAO1mC,EAAM8mC,OAAS,EAAI,GAAK,GAG9Bp5C,KAAK2iM,aAGH,KACGqD,EAAiC,GAAxBhmM,KAAKqhM,WAAW7tH,MAAcx6B,EAAOh5C,KAAKmC,MAAM4xE,aACzDmyH,EAASlmM,KAAKqhM,WAAW3tH,QAW/B,GATI1zE,KAAKqgM,gBAAgD,IAA/BW,GAAU1vL,QAAQ+xD,KACxCrjE,KAAKmC,MAAQnC,KAAK6lM,WAAWC,EAAY78J,EAAK5e,EAAK27K,EAAQhtJ,IAG3Dh5C,KAAKsgM,kBACHtgM,KAAKqgM,gBAAkD,IAAjCY,GAAY3vL,QAAQ+xD,KAAqBrjE,KAAKqgM,gBAAgD,IAA/BW,GAAU1vL,QAAQ+xD,MACrGrjE,KAAKmC,MAAQnC,KAAKimM,aAAaH,EAAYI,EAAQltJ,IAGvDh5C,KAAKugM,iBACEvgM,KAAKqgM,gBAAkBrgM,KAAKsgM,mBAAqD,IAAjCW,GAAY3vL,QAAQ+xD,IACtErjE,KAAKqgM,eAAiBrgM,KAAKsgM,kBAAkD,IAA9BY,GAAS5vL,QAAQ+xD,IAAiB,KAExE+8H,EAAWpgM,KAAK2iM,aAAa5vL,MAAM,UACzCimC,EAAyC,OAAlConJ,EAASA,EAASz/L,OAAS,GAAc,GAAK,EACrDmlM,EAAW55F,SAAS45F,EAAWhyH,WAAqB,GAAP96B,GAE7Ch5C,KAAKmC,MAAQ2jM,EAIzBoB,EAAalnM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,aA3B/CvjE,KAAKmC,MAAQ8mC,EACbi+J,EAAalnM,KAAKyiM,YAAYziM,KAAKmC,MAAOnC,KAAKujE,QA8BnDvjE,KAAK2iM,aAAe3iM,KAAK2hM,YAAYn9L,UAAU0iM,GAC/ClnM,KAAKgrG,iBAAiB1qE,cAAcn+B,MAAQnC,KAAK2iM,aACjD3iM,KAAKisG,mBAAmB5oC,GAExB9mB,sBAAsB,WAClB3nC,EAAKq3F,mBAAmB5oC,MAIxB+9H,EAAAlhM,UAAAurG,sBAAR,WACIzrG,KAAKumE,yBACC/lB,EAAQxgD,KAAK0rG,iBAAmB1rG,KAAKkuG,4BACvCluG,KAAK8pG,aAAe9pG,KAAK8pG,WAAW96C,MACpCxO,EAAMwO,MAAQX,GAAcN,QAE5BvN,EAAMwO,MAAQX,GAAcR,6BA7yDvC/b,EAAAA,UAAS9jC,KAAA,CAAC,CACPmB,UAAW,CACP,CACIg9C,QAAS8V,EAAAA,kBACT7V,YAAag1I,EACb94H,OAAO,GAEX,CACInc,QAASs+B,EAAAA,sBACTC,SAAUy2G,IAEd,CACIh1I,QF1F6B,8BE2F7BC,YAAag1I,IAGrB1yL,SAAU,kBACVqjC,SAAA,0xGAEI,gGAlFJnL,EAAAA,gBACAqI,EAAAA,iDAqGCE,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,qBAWAA,EAAAA,wBAgDAA,EAAAA,+BAOAA,EAAAA,6BAkBAA,EAAAA,iCAsBAA,EAAAA,0BAuBAA,EAAAA,wBAWAA,EAAAA,wBAWAA,EAAAA,0BAUAA,EAAAA,wBASAA,EAAAA,sBAkBAA,EAAAA,0BA0BAA,EAAAA,oBAcAA,EAAAA,sBAcAA,EAAAA,+BAiBAA,EAAAA,8BAyBAgd,EAAAA,mCAoBAA,EAAAA,uBAoBAA,EAAAA,yBAYAA,EAAAA,wBAQAA,EAAAA,yBAYAA,EAAAA,0BAMAA,EAAAA,yBAMA8qB,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,wBAMhCF,EAAAA,UAASzoC,KAAA,CAAC,aAAc,CAAE2oC,UAAQ,sBAMlCF,EAAAA,UAASzoC,KAAA,CAAC,WAAY,CAAE2oC,UAAQ,uCAMhCF,EAAAA,UAASzoC,KAAA,CAAC,4BAA6B,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,mCAGpEF,EAAAA,UAASzoC,KAAA,CAAC,wBAAyB,CAAE0oC,KAAMoS,EAAAA,YAAanS,UAAQ,yCAMhE0V,EAAAA,aAAYr+C,KAAA,CAAC8xL,GAAgC,CAAEppJ,KAAMopJ,GAAgCnpJ,UAAQ,wCAM7F0V,EAAAA,aAAYr+C,KAAA,CAAC+xL,GAA+B,CAAErpJ,KAAMqpJ,GAA+BppJ,UAAQ,uBAM3FF,EAAAA,UAASzoC,KAAA,CAAC2/B,GAAoB,CAAEgJ,UAAQ,8BAGxCF,EAAAA,UAASzoC,KAAA,CAACggD,GAAmB,CAAEtX,KAAMpT,EAAAA,WAAYqT,UAAQ,6BAGzDF,EAAAA,UAASzoC,KAAA,CAACggD,GAAmB,CAAEtX,KAAMsX,GAAmBrX,UAAQ,yCAGhE0V,EAAAA,aAAYr+C,KAAA,CAACggD,GAAmB,CAAEtX,KAAMsX,GAAmBrX,UAAQ,yBAGnEF,EAAAA,UAASzoC,KAAA,CAACijD,GAAwB,CAAEva,KAAMua,GAAwBta,UAAQ,4BAkX1E/nC,EAAAA,aAAYZ,KAAA,CAAC,mBAAoB,CAAC,YAAS,CAAAkE,KAC3CtD,EAAAA,aAAYZ,KAAA,CAAC,gBAAiB,CAAC,mCAS/BY,EAAAA,aAAYZ,KAAA,CAAC,4BA1ddilC,EAAAA,CAFC/U,GAAkB,oFAMI/U,EAAAA,qCAAAA,EAAAA,2CAgBvB8pB,EAAAA,CAFC/U,GAAkB,qFAMK/U,EAAAA,qCAAAA,EAAAA,4CA26C5Bi4K,KAKA+F,GAAA,WAAA,SAAAA,KA6BmC,2BA7BlCn4L,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVmyL,GACAnC,GACAhB,GACAqB,GACAI,GACAI,GACAC,GACAC,GACAY,IAEJ1xL,QAAS,CACLkyL,GACAtB,GACAC,GACAC,GACAY,IAEJnkJ,QAAS,CACLC,EAAAA,aACAmV,GACA+lB,GACApkB,GACA+U,GACA34B,IAEJzgC,UAAW,OAEoBg4L,EA7BnC,GCv3DI31J,GAAU,EAiBd41J,GAAA,WA8MI,SAAAA,EACY/mK,EACYquE,GADZ1uG,KAAAqgC,WAAAA,EACYrgC,KAAA0uG,WAAAA,EA7LhB1uG,KAAAqnM,YAAa,EAQLrnM,KAAAsnM,YAAc,CAC1BC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,cAAe,kBAeZznM,KAAA2N,GAAK,aAAa6jC,KAWlBxxC,KAAA0nM,UAAY,IAAIv+K,EAAAA,aAWhBnpB,KAAA2nM,QAAU,IAAIx+K,EAAAA,aAWdnpB,KAAA4nM,SAAW,IAAIz+K,EAAAA,aAWfnpB,KAAA6nM,SAAW,IAAI1+K,EAAAA,aAafnpB,KAAA0xC,KAAO,QAaP1xC,KAAAk2L,UAAW,EAeXl2L,KAAAm2L,YAAc,IAgCdn2L,KAAA8nM,gBAAkB,IAAI3+K,EAAAA,aA2BtBnpB,KAAA08B,SAA6BqrK,GAAiB9tK,OAwHzD,OAjKIz6B,OAAAgC,eACW4lM,EAAAlnM,UAAA,YAAS,KADpB,WAEI,OAAOF,KAAKqnM,gBAEhB,SAAqBllM,GACjBnC,KAAKqnM,WAAallM,EAClBnC,KAAK8nM,gBAAgBvlL,KAAKviB,KAAKqnM,6CA4CnC7nM,OAAAgC,eAAW4lM,EAAAlnM,UAAA,UAAO,KAAlB,WACI,OAAOF,KAAKqgC,WAAWC,+CAmBpB8mK,EAAAlnM,UAAAkhC,KAAP,WAAA,IAAAxsB,EAAA5U,KACIg0F,cAAch0F,KAAK6wE,WACnB7wE,KAAK0nM,UAAUnlL,KAAKviB,MACpBA,KAAKu7F,WAAY,EAEbv7F,KAAKk2L,WACLl2L,KAAK6wE,UAAY9kB,WAAW,WACxBn3C,EAAK4sB,QACNxhC,KAAKm2L,cAGZn2L,KAAK2nM,QAAQplL,KAAKviB,OAUfonM,EAAAlnM,UAAAshC,KAAP,WACIxhC,KAAK4nM,SAASrlL,KAAKviB,MACnBA,KAAKu7F,WAAY,EACjBv7F,KAAK6nM,SAAStlL,KAAKviB,MAEnBg0F,cAAch0F,KAAK6wE,YAOhBu2H,EAAAlnM,UAAAiO,KAAP,WACInO,KAAKohC,QAOFgmK,EAAAlnM,UAAAkO,MAAP,WACIpO,KAAKwhC,QAUF4lK,EAAAlnM,UAAA6N,OAAP,WACI/N,KAAKu7F,UAAYv7F,KAAKoO,QAAUpO,KAAKmO,QASlCi5L,EAAAlnM,UAAA8nM,uBAAP,WACI,OAAIhoM,KAAK08B,WAAaqrK,GAAiBhuK,IAC5B/5B,KAAKsnM,YAAYG,cAGxBznM,KAAK08B,WAAaqrK,GAAiB/tK,OAC5Bh6B,KAAKsnM,YAAYE,iBAGxBxnM,KAAK08B,WAAaqrK,GAAiB9tK,OAC5Bj6B,KAAKsnM,YAAYC,sBAD5B,GAOGH,EAAAlnM,UAAA2uC,SAAP,WACQ7uC,KAAK0uG,YAAc1uG,KAAK2N,IACxB3N,KAAK0uG,WAAWhhG,IAAI1N,KAAK2N,GAAI3N,OAM9BonM,EAAAlnM,UAAAsmC,YAAP,WACQxmC,KAAK0uG,YAAc1uG,KAAK2N,IACxB3N,KAAK0uG,WAAW7gG,OAAO7N,KAAK2N,yBAlTvCmkC,EAAAA,UAAS9jC,KAAA,CAAC,CACP+iF,WAAY,CACRhvB,EAAAA,QAAQ,UAAW,CACfxzD,EAAAA,MAAM,OAAQlL,EAAAA,MAAM,CAChBC,QAAS,KAEb0tF,EAAAA,WAAW,YAAaztF,EAAAA,QAAQ,cAChCytF,EAAAA,WAAW,YAAaztF,EAAAA,QAAQ,qBAGxCmL,SAAU,YACVqjC,SAAA,+HACS,gHAzCTzO,EAAAA,kBAUK91B,GAAoBzM,WAAA,CAAA,CAAAmR,KAmOpBg9B,EAAAA,0CArKJC,EAAAA,YAAWnhC,KAAA,CAAC,YAAS,CAAAkE,KACrBvD,EAAAA,yBAWAgd,EAAAA,wBAWAA,EAAAA,yBAWAA,EAAAA,yBAWAA,EAAAA,qBAaAhd,EAAAA,wBAaAA,EAAAA,2BAeAA,EAAAA,yBAmBAA,EAAAA,+BAaAgd,EAAAA,wBAaAhd,EAAAA,wBAcAA,EAAAA,SAyHLy4L,EArTA,OA+TIntK,OAAA,EACAD,OAAA,EACAD,IAAA,kEAMJ,IAAAkuK,GAAA,WAAA,SAAAA,KAK8B,2BAL7Bj5L,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CAACm4L,IACfl4L,QAAS,CAACk4L,IACV3qJ,QAAS,CAACC,EAAAA,kBAEgBurJ,EAL9B,q5PlKvVIC,MAAQ,QACRC,OAAS,SACTC,MAAQ,gOgFUZ,SAA2B3mE,eACvB,IAAkB,IAAA3xH,EAAAC,EAAAvQ,OAAOwQ,KAAKghI,KAAuB/gI,EAAAH,EAAA5N,QAAA+N,EAAA7N,KAAA6N,EAAAH,EAAA5N,OAAE,CAAlD,IAAMjB,EAAGgP,EAAA9N,MACVq0I,GAAsBxF,GAAuB/vI,GAAMwgI,oUAO3D,WACI,OAAArhI,EAAA,GACW4wI,GAAuBC,eACvBD,GAAuBmF,8hE/HAL,qGmFrCE,2NKHM,mrBtCkBI,4N4JfJ","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab',\n    HOME = 'Home',\n    END = 'End'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    public static parseValue(dataType: DataType, value: any): any {\n        if (dataType === DataType.Number) {\n            value = parseFloat(value);\n        }\n\n        return value;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell ) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n             if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string,\n        pipeTrigger: number, filteringPipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn++;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (((grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0) ||\n            (grid.advancedFilteringExpressionsTree &&\n            grid.advancedFilteringExpressionsTree.filteringOperands.length > 0)) &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedFilteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' } as JSZip.JSZipGeneratorOptions<'base64'>;\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target as any;\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        clickOnPositionTarget = positionTarget.contains(target);\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe((e: Event) => this._hide(info.id, e));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = Util.getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = Util.getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            0 < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.width;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            0 < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return 0 < leftBorder && rightBorder < connectedFit.viewPortRect.width;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return 0 < topBorder && bottomBorder < connectedFit.viewPortRect.height;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, 0 - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.width);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, 0 - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.height);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\nimport { IBaseEventArgs } from './utils';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        this.cdr.detectChanges();\n    }\n\n    public get size() {\n        return this._size;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n     }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * @hidden @internal\n     * An event that is emitted when scrollbar visibility has changed.\n     */\n    @Output()\n    public onScrollbarVisibilityChanged = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n    */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent && !this.scrollComponent.destroyed) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0),\n             throttleTime(40, undefined, {leading: true, trailing: true}))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n        if (!this._bScrollInternal) {\n            this._calcVirtualScrollTop(event.target.scrollTop);\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        const scrollable = this.isScrollable();\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.size = totalWidth;\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because horizontalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n                // Need to reset the scrollAmount value here, because verticalScrollBar is hidden, therefore\n                // onScroll event handler for VirtualHelperBaseDirective will not be called\n                this.scrollComponent.scrollAmount = 0;\n            }\n        }\n        if (scrollable !== this.isScrollable()) {\n            // scrollbar visibility has changed\n            this.onScrollbarVisibilityChanged.emit();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        let currentScrollTop = this.scrollPosition;\n        if (this._virtHeightRatio !== 1) {\n            this._calcVirtualScrollTop(this.scrollPosition);\n            currentScrollTop = this._virtScrollTop;\n        }\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n        currentScrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n\n    protected _calcVirtualScrollTop(scrollTop: number) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = this.scrollComponent.size - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  scrollTop / maxRealScrollTop : 0;\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n        this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n    }\n\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n        if (!this._bScrollInternal) {\n            this._calcVirtualScrollTop(event.target.scrollTop);\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE, IBaseEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective, static: false })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    FLUENT,\n    SEARCH,\n    FLUENT_SEARCH,\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n    /**\n     * @hidden\n     */\n\n    @HostBinding('class.igx-input-group--fluent-search')\n    public isFluentSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public isFluent = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.FLUENT:\n                    this.isFluent = true;\n                    break;\n                case IgxInputGroupType.FLUENT_SEARCH:\n                    this.isFluentSearch = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Fluent.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     *}\n     * ```\n     */\n    get isTypeFluent() {\n        return this._type === IgxInputGroupType.FLUENT;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;\n     *}\n     * ```\n     */\n    get isTypeFluentSearch() {\n        return  this._type === IgxInputGroupType.FLUENT_SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        // if no drop-down width is set, the drop-down will be as wide as the autocomplete input;\n        this.target.width = this.target.width || (this.parentElement.clientWidth + 'px');\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     *@hidden\n     */\n    private _type: string;\n\n    /**\n     *@hidden\n     */\n    private _defaultType = 'flat';\n\n    /**\n     *@hidden\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     *@hidden\n     */\n    private _color: string;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    /**\n     *@hidden\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxDragHandleDirective } from './drag-handle.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n    /**\n     * @deprecated Please use custom base styling instead.\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'hideBaseOnDrag' @Input property is deprecated and will be removed in future major versions.\n        Alternatives to it are using the new no ghost dragging and custom base styling.`)\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * @deprecated Please use provided transition functions in future.\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'animateOnRelease' @Input property is deprecated and will be removed in future major versions.\n        Please use 'transitionToOrigin' or 'transitionTo' methods instead.`)\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective)\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n    /**\n     * @deprecated Please use native angular ways of hiding it using custom to the base element styling for future versions.\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    @DeprecateProperty(`'visible' @Input property is deprecated and will be removed in future major versions.\n        Please use native angular ways of hiding the base element using styling.`)\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibility = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n                const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n            }\n        });\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n                const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n            }\n        });\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _baseMarginLeft = 0;\n    protected _baseMarginTop = 0;\n    protected _baseOriginX;\n    protected _baseOriginY;\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        this._baseMarginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n        this._baseMarginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        this._baseOriginX = this.baseLeft;\n        this._baseOriginY = this.baseTop;\n        this._ghostStartX = this.baseLeft;\n        this._ghostStartY = this.baseTop;\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (!this._baseOriginX && !this._baseOriginY) {\n            this._baseOriginX = this.baseLeft;\n            this._baseOriginY = this.baseTop;\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            const updatedMovedX = setPageX - this._startX;\n            const updatedMovedY = setPageY - this._startY;\n\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    this.ghostLeft = this._ghostStartX + updatedMovedX;\n                    this.ghostTop = this._ghostStartY + updatedMovedY;\n                } else {\n                    const lastMovedX = setPageX - this._lastX;\n                    const lastMovedY = setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            } else if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            } else if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        // Hide the base after the ghostElement is created, because otherwise the ghostElement will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        let newPosX, newPosY;\n        if (this.ghost && this.ghostElement) {\n            // Calculate the new ghostElement position to remain where the mouse is, so it doesn't jump\n            const totalDraggedX = this.ghostLeft - this._ghostStartX;\n            const totalDraggedY = this.ghostTop - this._ghostStartY;\n            newPosX = this.baseLeft;\n            newPosY = this.baseTop;\n            const diffStartX = this._ghostStartX - newPosX;\n            const diffStartY = this._ghostStartY - newPosY;\n            this.ghostTop = newPosX + totalDraggedX - diffStartX;\n            this.ghostLeft = newPosY + totalDraggedY - diffStartY;\n        } else if (!this.ghost) {\n            const totalDraggedX = this.getTransformX(this.element.nativeElement);\n            const totalDraggedY = this.getTransformY(this.element.nativeElement);\n            newPosX = this.baseLeft - totalDraggedX;\n            newPosY = this.baseTop - totalDraggedY;\n            const deltaX = this._baseOriginX - newPosX;\n            const deltaY = this._baseOriginY - newPosY;\n            this.setTransformXY(totalDraggedX + deltaX, totalDraggedY + deltaY);\n        }\n        this._baseOriginX = newPosX !== undefined ? newPosX : this._baseOriginX;\n        this._baseOriginY = newPosY !== undefined ? newPosY : this._baseOriginY;\n    }\n\n    /**\n     * @deprecated This method will be removed in future major version. Please use `transitionToOrigin` or `transitionTo`.\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usually be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n    */\n    public dropFinished() {\n        this.updateDragRelativePos();\n        if (this.animateOnRelease && this.ghostElement) {\n            this.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n        /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE, IBaseEventArgs } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image', { static: false })\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective, { static: false })\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent),\n        { read: forwardRef(() => IgxExpansionPanelBodyComponent), static: false })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent),\n        { read: forwardRef(() => IgxExpansionPanelHeaderComponent), static: false })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective, { static: false })\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent, { static: false })\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\n/**\n * @hidden\n */\nenum TimeDeltaInterval {\n    Month = 'month',\n    Year = 'year'\n}\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    public getFirstViewDate(date: Date, interval: string, activeViewIdx: number) {\n        return this.timedelta(date, interval, -activeViewIdx);\n    }\n\n    public getNextMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, 1);\n    }\n\n    public getPrevMonth(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Month, -1);\n    }\n\n    public getNextYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, 1);\n    }\n\n    public getPrevYear(date: Date) {\n        return this.timedelta(date, TimeDeltaInterval.Year, -1);\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate } from '../core/utils';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            return;\n        }\n\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    public rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    protected calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (!this.selectedDates || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { HostBinding, ViewChildren, ElementRef, QueryList } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * Holds month view index we are operating on.\n     */\n    protected activeViewIdx = 0;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren('yearsBtn')\n    public yearsBtns: QueryList<ElementRef>;\n\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtns && this.yearsBtns.length) {\n                this.yearsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx).nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(activeViewIdx = 0): void {\n        this._activeView = CalendarView.DECADE;\n        this.activeViewIdx = activeViewIdx;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, activeViewIdx = 0) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(activeViewIdx);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public monthsRef: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.monthsRef.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.monthsRef.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.monthsRef.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.monthsRef.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.monthsRef.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.monthsRef.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabindex(): number {\n        return this.isDisabled || this.isHidden ? -1 : 0;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.daysNavService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from './daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public prevMonthView: IgxDaysViewComponent;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    constructor(public daysNavService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.daysNavService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.daysNavService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getFirstMonthView().daysNavService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getLastMonthView().daysNavService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * Calendar provides a way to display date information.\n *\n * @igxModule IgxCalendarModule\n *\n * @igxTheme igx-calendar-theme, igx-icon-theme\n *\n * @igxKeywords calendar, datepicker, schedule, date\n *\n * @igxGroup Scheduling\n *\n * @remarks\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * @example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit, OnDestroy {\n\n    /**\n     * Sets/gets the `id` of the calendar.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar id=\"my-first-calendar\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the calendar has header.\n     * Default value is `true`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [hasHeader]=\"false\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     *\n     * @example\n     * ```html\n     * <igx-calendar [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (val < 1 ) {\n            return;\n        }\n\n        this._monthsViewNumber = val;\n    }\n\n    /**\n     * Apply the different states for the transitions of animateChange\n     * @hidden\n     * @internal\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * Used to apply the active date when the calendar view is changed\n     *\n     * @hidden\n     * @internal\n     */\n    public nextDate: Date;\n\n    /**\n     * Denote if the calendar view was changed with the keyboard\n     *\n     * @hidden\n     * @internal\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * ViewChild that represents the months view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * Month button, that displays the months view.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('monthsBtn')\n    public monthsBtns: QueryList<ElementRef>;\n\n    /**\n     * ViewChild that represents the decade view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * ViewChild that represents the days view.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * ViewChildrenden representing all of the rendered days views.\n     * @hidden\n     * @internal\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * Button for previous month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('prevMonthBtn', { static: false })\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * Button for next month.\n     *\n     * @hidden\n     * @internal\n     */\n    @ViewChild('nextMonthBtn', { static: false })\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * Denote if the year view is active.\n     * @hidden\n     * @internal\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     *\n     * @example\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     *\n     *  @example\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     *\n     * @example\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     *\n     * @example\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     *\n     * @example\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     *\n     * @example\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Date displayed in header\n     *\n     * @hidden\n     * @internal\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthsViewNumber = 1;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    private _monthViewsChanges$: Subscription;\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     * @internal\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * Change to previous month\n     *\n     * @hidden\n     * @internal\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getPrevMonth(this.viewDate);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Change to next month\n     *\n     * @hidden\n     * @internal\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.getNextMonth(this.viewDate);\n        this.animationAction = ScrollMonth.NEXT;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * Continious navigation through the previous months\n     * @hidden\n     * @internal\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Continious navigation through the next months\n     * @hidden\n     * @internal\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * Stop continuous navigation\n     * @hidden\n     * @internal\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecade(args: Date, activeViewIdx: number) {\n        super.activeViewDecade(activeViewIdx);\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewDecadeKB(event, args: Date, activeViewIdx: number) {\n        super.activeViewDecadeKB(event, activeViewIdx);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * Handles invoked on date selection\n     * @hidden\n     * @internal\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.daysNavService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.viewDate = this.nextDate;\n    }\n\n    /**\n     * @hidden\n     * @intenal\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            const elem = this.monthsBtns.find((e: ElementRef, idx: number) => idx === this.activeViewIdx);\n            if (elem) { elem.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYear(args: Date, activeViewIdx: number, event?): void {\n        this.activeView = CalendarView.YEAR;\n        this.activeViewIdx = activeViewIdx;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.monthsRef.find((e) =>\n            e.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onActiveViewYearKB(args: Date, event, activeViewIdx: number): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.onActiveViewYear(args, activeViewIdx, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *\n     * @example\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     * @internal\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * Getter for the context object inside the calendar templates.\n     * @hidden\n     * @internal\n     */\n    public getContext(i: number) {\n        const date = this.getViewDate(i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public animationDone(event) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) { this.nextMonth(true); } else {\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * Keyboard navigation of the calendar\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Stop continuous navigation on mouseup event\n     * @hidden\n     * @internal\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     * @internal\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.onActiveViewYear(value, i),\n            yearView: () => this.onActiveViewDecade(value, i),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     * @internal\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     * @internal\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input,\n    ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false  })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false  })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false  })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn', { static: false })\n    public yearsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.getPrevYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.getNextYear(this.viewDate);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Calendar } from './calendar';\n\n@Pipe({\n    name: 'IgxMonthViewSlots'\n})\nexport class IgxMonthViewSlotsCalendar implements PipeTransform {\n    public transform(monthViews: number) {\n        return new Array(monthViews);\n    }\n}\n\n@Pipe({\n    name: 'IgxGetViewDate'\n})\nexport class IgxGetViewDateCalendar implements PipeTransform {\n    private calendar: Calendar;\n    constructor() {\n        this.calendar = new Calendar();\n    }\n    public transform(index: number, viewDate: Date, wholeDate = true) {\n        const date = this.calendar.timedelta(viewDate, 'month', index);\n        return wholeDate ? date : date.getMonth();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\nimport { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxMonthViewSlotsCalendar,\n        IgxGetViewDateCalendar\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs, PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef, private platformUtil: PlatformUtil) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0 && this.platformUtil.isBrowser) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n    private _active;\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n    public set active(value)  {\n        this._active = value;\n        this.activeChange.emit(this._active);\n    }\n    /**\n     *@hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n        /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * ```typescript\n     * chipSelectEnd(event: IBaseChipEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (event.propertyName === 'width' && !!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput', { static: false })\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef, static: false })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef, static: false })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef, static: false })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef, static: false })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef, static: false })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * */\n     public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n     /**\n     * Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n                this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n           } else {\n                this.valid = IgxComboState.INITIAL;\n           }\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus() {\n        if (this.collapsed) {\n            this._onTouchedCallback();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        if (this.collapsed) {\n            this.getEditElement().focus();\n        } else {\n            this.focusSearchInput(true);\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: Array.from(newSelection),\n            oldSelection: Array.from(this.selection.get(this.id) || []),\n            added,\n            removed,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            let value = '';\n            if (this.isRemote) {\n                if (args.newSelection.length) {\n                    const removedItems = args.oldSelection.filter(e => args.newSelection.indexOf(e) < 0);\n                    const addedItems = args.newSelection.filter(e => args.oldSelection.indexOf(e) < 0);\n                    this.registerRemoteEntries(addedItems);\n                    this.registerRemoteEntries(removedItems, false);\n                    value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n                } else {\n                    // If new selection is empty, clear all items\n                    this.registerRemoteEntries(args.oldSelection, false);\n                }\n            } else {\n                value = this.displayKey !== null && this.displayKey !== undefined ?\n                    this.convertKeysToItems(args.newSelection).map(entry => entry[this.displayKey]).join(', ') :\n                    args.newSelection.join(', ');\n            }\n            this._value = value;\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit,\n    Injector,\n    AfterViewChecked,\n    Type\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent, IgxInputState } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval, Subscription } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule} from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE, isEqual, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor,\n          EditorProvider, OnInit, AfterViewInit, OnDestroy, AfterViewChecked {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets/gets whether the inactive dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(\n        IgxOverlayService) private _overlayService: IgxOverlayService,\n        public element: ElementRef,\n        private _cdr: ChangeDetectorRef,\n        private _moduleRef: NgModuleRef<any>,\n        private _injector: Injector) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     *An @Output property that is fired when date picker value is changed.\n     *```typescript\n     *public valueChanged(event){\n        *    alert(\"Date picker value is changed\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n        *```\n    */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent, { static: false })\n    protected inputGroup: IgxInputGroupComponent;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _inputElementRef: ElementRef;\n\n    @ContentChild(IgxInputDirective, { read: ElementRef, static: false })\n    protected _inputUserTemplateElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { static: false })\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { static: false })\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective, static: false })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective, static: false })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective, static: false })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective, static: false })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        this._value = value;\n        // TODO: do we need next call\n        this._cdr.markForCheck();\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n\n    /** @hidden */\n    public getEditElement() {\n        const inputDirectiveElementRef = this._inputElementRef || this._inputUserTemplateElementRef;\n        return (inputDirectiveElementRef) ? inputDirectiveElementRef.nativeElement : null;\n    }\n\n    /** @hidden */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    // outside click\n                    this._updateValidityOnBlur();\n                }\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n\n        this._ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     *@hidden @internal\n    */\n    public ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n\n        if (this._ngControl) {\n            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of date picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this._inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this.inputGroup && this.inputGroup.isRequired !== this.required) {\n            this.inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        const oldValue =  this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value );\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    public mouseDown(e) {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or sufix, prevent default and this way prevent blur\n        if (e.target !== this.getEditElement()) {\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        if (this.mode === InteractionMode.DropDown) {\n            this.calculateDate(event.target.value, event.type);\n        }\n\n        if (this.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                        const oldValue =  this.value;\n                        this.value = newValue;\n\n                        this.emitValueChangeEvent(oldValue, this.value );\n                        this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    public _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (input && this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule,\n                IgxRippleModule, IgxMaskModule, IgxTextSelectionModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs, IgxGridBaseComponent } from '../grids/grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: newCell.id,\n            rowID: newCell.id.rowID,\n            oldValue: newCell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n        if (this.rowEditing) {\n            if (this.row && !this.sameRow(newCell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = newCell;\n                this.beginRowEdit();\n                return;\n            }\n\n            this.cell = newCell;\n\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.cell = newCell;\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows =  allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => { this.rowSelection.add(rowID); });\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void  {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row.*/\n    selectMultipleRows(rowID, rowData, event?): void  {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void  {\n        this.allRowsSelected = undefined;\n    }\n\n    /**Clear rowSelection and update checkbox state*/\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        const allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?\n            this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        const grid = this.grid as IgxGridBaseComponent;\n        return !FilteringExpressionsTree.empty(grid.filteringExpressionsTree) ||\n        !FilteringExpressionsTree.empty(grid.advancedFilteringExpressionsTree);\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport enum GridSelectionMode {\n    none = 'none',\n    single = 'single',\n    multiple = 'multiple',\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport {\n    getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick, PlatformUtil\n} from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty, DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n                return rowTransaction && rowTransaction.value &&\n                (rowTransaction.value[this.column.field] ||\n                 rowTransaction.value[this.column.field] === 0 ||\n                 rowTransaction.value[this.column.field] === false);\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective, static: false })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.notifyChanges();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n        this.focused = true;\n        this.row.focused = true;\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.grid.isRowSelectable) {\n                    this.row.selected ? this.selectionService.deselectRow(this.row.rowID, event) :\n                    this.selectionService.selectRowById(this.row.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Injectable\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n@Injectable()\nexport abstract class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent, static: false })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    @DeprecateProperty('isSelected property is deprecated. Use selected property instead.')\n    public get isSelected() {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.rowIslandAPI.rowIsland) {\n                    this.rowIslandAPI.rowIsland.updateColumnList();\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    OnDestroy,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { WatchColumnChanges } from './watch-changes';\nimport { IgxRowIslandAPIService } from './hierarchical-grid/row-island-api.service';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { notifyChanges } from './watch-changes';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit, OnDestroy {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.filteringService.hideFilteringRowOnColumnVisibilityChange(this);\n                this.grid.notifyChanges();\n                // this.grid.refreshSearch(true);\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n    * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n    * ```typescript\n    * let columnLayoutChild =  this.column.columnLayoutChild;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective, static: false })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective, static: false })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective, static: false })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     *@hidden\n    */\n    public get pinnable() {\n        const gridUnpinnedWidth = (this.grid as any).getUnpinnedWidth(true);\n        const elementWidth = this.parent ? parseInt(this.topLevelParent.width, 10) : parseInt(this.width, 10);\n        return (this.grid as any)._init || !((gridUnpinnedWidth - elementWidth) < this.grid.unpinnedAreaMinWidth);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit, OnDestroy {\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        this.children.forEach(child => child.hidden = value);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        /*\n            TO DO: In Angular 9 this need to be removed, because the @ContentChildren will not return the `parent`\n            component in the query list.\n        */\n        this.children.changes.pipe(takeUntil(this.destroy$))\n            .subscribe((change) => {\n                if (change.first === this) {\n                    this.children.reset(this.children.toArray().slice(1));\n                    this.children.forEach(child => {\n                        child.parent = this;\n                    });\n                }\n            });\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr, rowIslandAPI);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit, OnDestroy {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener,\n    ViewContainerRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _viewContainer: ViewContainerRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _viewContainer, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxButtonDirective } from '../directives/button/button.directive';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent, static: false })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent, { static: false })\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective, static: false })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent, static: false })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective, static: false })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent, static: false })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent, { static: false })\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective, static: false })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { GridType } from './common/grid.interface';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid(): GridType {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.grid.getColumnByName(this.groupRow.expression.fieldName);\n        return (column && column.dataType) || DataType.String;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from '../core/grid-selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { FilterMode } from './common/enums';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: GridType;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`) as HTMLElement;\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1) {\n            if (this.grid.rowEditTabs.length) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select last editable cell\n                prevEditableColumnIndex = this.grid.lastEditableColumnIndex;\n            }\n\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        let nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1) {\n            if ( this.grid.rowEditTabs.length) {\n                 //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            } else {\n                // In case when row edit template is empty select first editable cell\n                nextEditableColumnIndex = this.grid.firstEditableColumnIndex;\n            }\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const targetIndex = this.findFirstDataRowIndex();\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        if (targetScr >= verticalScroll.scrollTop) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[0] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { (cells[0] as HTMLElement).focus(); }\n                });\n        }\n    }\n\n    private findFirstDataRowIndex() {\n        const dv = this.grid.dataView;\n        return dv.findIndex(rec => !this.grid.isGroupByRecord(rec));\n    }\n\n    private findLastDataRowIndex() {\n        let i = this.grid.dataView.length;\n        while (i--) {\n            const rec = this.grid.dataView[i];\n            if (!this.grid.isGroupByRecord(rec)) {\n                 return i;\n            }\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[cells.length - 1] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        (cells[cells.length - 1] as HTMLElement).focus();\n                    }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.dataView.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const targetIndex = this.findFirstDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, false);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollTop === targetScr) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : 0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    this.onKeydownHome(this.grid.dataRowList.first.index);\n                });\n        }\n    }\n\n    public goToLastCell() {\n        const targetIndex = this.findLastDataRowIndex();\n        const targetScr = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === targetScr) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(targetIndex !== -1 ? targetIndex : this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.dataView.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.dataView.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n            `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n          <path d=\"M18,4.5H6A1.5,1.5,0,0,0,4.5,6V18A1.5,1.5,0,0,0,6,19.5h6.75V18H6V6H18v6.75h1.5V6A1.5,1.5,0,0,0,18,4.5Z\"/>\n          <rect x=\"7.5\" y=\"12.75\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"14.25\" y=\"14.25\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"7.5\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"12.75\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n        </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnVisibilityChangedEventArgs } from '../grid';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n    private _filterIconsRegistered = false;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return this.grid.headerContainer.scrollPosition;\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Close filtering row if a column is hidden.\n     */\n    public hideFilteringRowOnColumnVisibilityChange(col: IgxColumnComponent) {\n        const filteringRow = this.grid.filteringRow;\n\n        if (filteringRow && filteringRow.column && filteringRow.column === col) {\n            filteringRow.close();\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        if (!this._filterIconsRegistered) {\n            for (const icon of icons) {\n                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n                }\n            }\n            this._filterIconsRegistered = true;\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.scrollPosition += currentColumnRight - width;\n        } else {\n            forOfDir.scrollPosition = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(expressionTree: IFilteringExpressionsTree): boolean {\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    private _isLoading;\n\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public searchValue: any;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    public get valuesLoadingTemplate() {\n        if (this.grid.excelStyleLoadingValuesTemplateDirective) {\n            return this.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent, static: false })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = DataUtil.parseValue(this.column.dataType, eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef, static: false })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef, static: false })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from '../../grid.common';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n    public isBlanks = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSorting]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMoving]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHiding]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinning]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, OnInit, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef, static: true })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent, static: true })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent, static: true })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent, static: true })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent, static: false })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    public isColumnPinnable: boolean;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.isColumnPinnable = this.column.pinnable;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public pinClass() {\n        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.excelStyleSearch.isLoading = true;\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(val => val ? val.toDateString() : val) : colVals;\n\n            this.renderValues(columnValues);\n            this.excelStyleSearch.isLoading = false;\n            this.excelStyleSearch.refreshSize();\n        });\n    }\n\n    public renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :\n            data.map(record => record[columnField]);\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        this.uniqueValues = Array.from(new Set(columnValues));\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n\n        const numberPipe = new IgxDecimalPipeComponent(this.column.grid.locale);\n        const datePipe = new IgxDatePipeComponent(this.column.grid.locale);\n\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    const date = new Date(element);\n\n                    filterListItem.value = date;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(date) :\n                        datePipe.transform(date, this.column.grid.locale);\n\n                } else if (this.column.dataType === DataType.Number) {\n                    filterListItem.value = element;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(element) :\n                        numberPipe.transform(element, this.column.grid.locale);\n\n                } else {\n                    filterListItem.value = element;\n\n                    filterListItem.label = this.column.formatter ?\n                        this.column.formatter(element) :\n                        element;\n                }\n\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        blanks.isBlanks = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.excelStyleSearch.cdr.detectChanges();\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.selectAllFilterItems();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: false })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef, static: false })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent, static: false })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent, static: false })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent, { static: false })\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent, { static: false })\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                rowSummaries.set(column.field,\n                    column.summaries.operate(data.map(r => r[column.field]), data, column.field));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    @Output()\n    public onBeforeViewDetach = new EventEmitter<IViewChangeEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        } else {\n            this._updateExistingContext(this.igxTemplateOutletContext);\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this.onBeforeViewDetach.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy,\n    ViewRef\n} from '@angular/core';\nimport { DataType, DataUtil } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge, isIE } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef, static: false })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef, static: false })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef, static: false })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand', { static: false })\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        const target = eventArgs.target;\n\n        if (isEdge() && target.type !== 'number' || this.isKeyPressed && isIE() || target.value || target.checkValidity()) {\n            this.value = target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n\n            if (focusedElement.className === 'igx-chip__remove' || focusedElement.tagName === 'IGX-DAY-ITEM') {\n                return;\n            }\n\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n\n            this.filter();\n        } else {\n            const condToRemove = this.expressionsList.filter(ex => ex.expression.searchVal === null && !ex.expression.condition.isUnary);\n            if (condToRemove && condToRemove.length > 0) {\n                condToRemove.forEach(c => this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(c)));\n                this.filter();\n            }\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            this._cancelChipClick = false;\n            return;\n        }\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                    this.cdr.detectChanges();\n                }\n            }\n        });\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, Util } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = Util.getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff}px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = Util.getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                            // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    //#region ControlValueAccessor\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n    /** @hidden @internal */\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n    //#endregion\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        this._onTouchedCallback();\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public onFocus(): void {\n        this._onTouchedCallback();\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n}\n\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { IgxGridBaseComponent, IgxColumnComponent } from '../../grid';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';\nimport { DataUtil } from './../../../data-operations/data-util';\n\n/**\n *@hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n *@hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n *@hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n    columnHeader: string;\n}\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    public rootGroup: ExpressionGroupItem;\n\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    public currentGroup: ExpressionGroupItem;\n\n    public editedExpression: ExpressionOperandItem;\n\n    public addModeExpression: ExpressionOperandItem;\n\n    public contextualGroup: ExpressionGroupItem;\n\n    public filteringLogics;\n\n    public selectedCondition: string;\n    public searchValue: any;\n\n    public _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    public _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    @ViewChild('columnSelect', { read: IgxSelectComponent, static: false })\n    public columnSelect: IgxSelectComponent;\n\n    @ViewChild('conditionSelect', { read: IgxSelectComponent, static: false })\n    public conditionSelect: IgxSelectComponent;\n\n    @ViewChild('searchValueInput', { read: ElementRef, static: false })\n    public searchValueInput: ElementRef;\n\n    @ViewChild('addRootAndGroupButton', { read: ElementRef, static: false })\n    public addRootAndGroupButton: ElementRef;\n\n    @ViewChild('addConditionButton', { read: ElementRef, static: false })\n    public addConditionButton: ElementRef;\n\n    @ViewChild('editingInputsContainer', { read: ElementRef, static: false })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    @ViewChild('addModeContainer', { read: ElementRef, static: false })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef, static: false })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public contextMenuToggle: IgxToggleDirective;\n\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n\n    constructor(private element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit(): void {\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n\n        this.contextMenuToggle.onClosed.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.contextualGroup = null;\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    get grid(): IgxGridBaseComponent {\n        return this.filteringService.grid;\n    }\n\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedColumn.dataType, this.searchValue);\n            this.editedExpression.columnHeader = this.selectedColumn.header;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    const column = this.grid.getColumnByName(filteringExpr.fieldName);\n                    operandItem.columnHeader = column.header;\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    public onChipRemove(expressionItem: ExpressionItem) {\n       this.deleteItem(expressionItem);\n    }\n\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.columnSelect.element});\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.conditionSelect.element});\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        if (!this.contextMenuToggle.collapsed &&\n            (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        }\n    }\n\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    public initialize(filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this.filteringService.registerSVGIcons();\n\n        // Set pointer-events to none of the overlay content element which blocks the grid interaction after dragging\n        this.overlayService.onOpened.pipe(first()).subscribe(() => {\n            if (this.element.nativeElement.parentElement) {\n                this.element.nativeElement.parentElement.style['pointer-events'] = 'none';\n            }\n        });\n\n        if (this.grid.advancedFilteringExpressionsTree) {\n            this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n            this.currentGroup = this.rootGroup;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public setAddButtonFocus() {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n    }\n\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    public onClearButtonClick() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.currentGroup = null;\n        this.rootGroup = null;\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public applyChanges() {\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, NgModule, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRowSelectorDirective, IgxHeadSelectorDirective],\n    exports: [IgxRowSelectorDirective, IgxHeadSelectorDirective]\n})\nexport class IgxRowSelectorsModule {\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\nimport { IgxHierarchicalRowComponent } from './hierarchical-grid/hierarchical-row.component';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        // check if there is an expander icon and create the ghost at the corresponding position\n        if (this.isHierarchicalGrid) {\n            const row = this.row as IgxHierarchicalRowComponent;\n            if (row.expander) {\n                const expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;\n                this._ghostHostX += expanderWidth;\n            }\n        }\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n\n    private get isHierarchicalGrid() {\n        return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Injectable\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject, combineLatest, pipe } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects, isIE, IBaseEventArgs } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, RowEditPositionStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell, isChromium } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './igx-row-selectors.module';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n     IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';\nimport { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective  } from './row-drag.directive';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridClipboardEvent {\n    data: any[];\n    cancel: boolean;\n}\n\nexport interface IGridCellEventArgs extends IBaseEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs extends IBaseEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs extends IBaseEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    added: any[];\n    removed: any[];\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs extends IBaseEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\nexport interface IGridKeydownEventArgs extends IBaseEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs extends IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n}\n\n@Injectable()\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    private _customDragIndicatorIconTemplate: TemplateRef<any>;\n    protected _init = true;\n    private _tick;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * @remarks\n     * When set to true, it will override all columns declared through code or in markup.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            value.type = FilteringExpressionsTreeType.Regular;\n            this._filteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&\n                !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted after advanced filtering is performed.\n     * Returns the advanced filtering expressions tree.\n     * ```typescript\n     * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"\n     *           (advancedFilteringExpressionsTreeChange)=\"advancedFilteringExprTreeChange($event)\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public advancedFilteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Returns the advanced filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    /**\n     * Sets the advanced filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And);\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     },\n     *     {\n     *          condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *          fieldName: 'CompanyName',\n     *          searchVal: 'a'\n     *     }\n     * ];\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            value.type = FilteringExpressionsTreeType.Advanced;\n            this._advancedFilteringExpressionsTree = value;\n            this._filteringPipeTrigger++;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&\n            !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.notifyChanges();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     *```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.navigateTo(0);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    @DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.')\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this.isRowSelectable;\n    }\n\n    set rowSelectable(val: boolean) {\n        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;\n    }\n\n    /**\n     * Returns if the row selectors are hidden\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    /**\n     * Allows you to change the visibility of the row selectors\n     * By default row selectors are shown\n     * @memberof IgxGridBaseComponent\n     */\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the advanced filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowAdvancedFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    /**\n     * Sets a value indicating whether the advanced filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the filtering strategy of the grid.\n     * ```typescript\n     *  let filterStrategy = this.grid.filterStrategy\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    /**\n     * Sets the filtering strategy of the grid.\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * An @Input property that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     *\n     * ```typescript\n     * public columnValuesStrategy = (column: IgxColumnComponent,\n     *                               filteringExpressionsTree: IFilteringExpressionsTree,\n     *                               done: (uniqueValues: any[]) => void) => {\n     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n                                        filteringExpressionsTree: IFilteringExpressionsTree,\n                                        done: (values: any[]) => void) => void;\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseComponent#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent, { static: false })\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective, static: false })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective, static: false })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective, static: false })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective, static: false })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<IgxRowComponent<IgxGridBaseComponent>>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList(): QueryList<IgxRowComponent<IgxGridBaseComponent>> {\n        const res = new QueryList<IgxRowComponent<IgxGridBaseComponent>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false })\n    public dragIndicatorIconTemplates: QueryList<TemplateRef<any>>;\n    /**\n    * The custom template, if any, that should be used when rendering the row drag indicator icon\n    */\n    public get dragIndicatorIconTemplate(): TemplateRef<any> {\n        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;\n    }\n\n    public set dragIndicatorIconTemplate(val: TemplateRef<any>) {\n        this._customDragIndicatorIconTemplate = val;\n    }\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('footer', { read: ElementRef, static: false })\n    public footer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerSelectorContainer', { static: false })\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer', { static: false })\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer', { static: false })\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent, static: false })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef, static: false })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef, static: false })\n    public rowEditText: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef, static: false })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n   @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a row collapse indicator.\n   */\n   @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n   @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef, static: false })\n   public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a header collapse indicator.\n   */\n   @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef, static: false })\n   public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: false })\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get filteringPipeTrigger(): number {\n        return this._filteringPipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent, static: false })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef, static: false })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Returns the current cell selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    /**\n     * Allows you to set cell selection mode\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set cellSelection(selectionMode:  GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns the current row selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n    /**\n     * Allows you to set row selection mode\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set rowSelection(selectionMode:  GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _filteringPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => {});\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _cellSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode = GridSelectionMode.none;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler = (event) => {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        protected gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n            this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this.filteringService, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.setAddButtonFocus();\n                }\n                return;\n            }\n\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            const shouldRecalcSize = this.isPercentHeight &&\n             ( !this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||\n              this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);\n            if (shouldRecalcSize) {\n                this.calculateGridHeight();\n                $event.containerSize = this.calcHeight;\n            }\n            this.evaluateLoadingState();\n        });\n\n        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {\n            // called to recalc all widths that may have changes as a result of\n            // the vert. scrollbar showing/hiding\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes();\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this.summaryService.summaryHeight = 0;\n            this.endEdit(true);\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowComponent<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n\n        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))\n            .subscribe(([row, summary]) => this._horizontalForOfs = [...row, ...summary]);\n\n        this._horizontalForOfs = [\n            ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n            ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n        ];\n    }\n\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.scrollHandler);\n        vertScrDC.addEventListener('wheel', () => this.wheelHandler());\n\n    }\n\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.displayContainer;\n            vertScrDC.removeEventListener('scroll', this.scrollHandler);\n            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxRowComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable  && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        requestAnimationFrame(() => this.onSortingDone.emit(expression));\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n                                        this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n                                    headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n\n        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n                                 this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :\n                                 this.theadRow.nativeElement.offsetHeight;\n        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            this.scr.nativeElement.clientHeight;\n\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed, 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n        this.nativeElement.parentElement.clientHeight === 0 ||\n        this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n           res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.getFeatureColumnsWidth();\n\n        if (this.showDragIcons) {\n            computedWidth -= this.headerDragContainer ? this.headerDragContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        // When all columns are hidden, return 0px width\n        if (!sumExistingWidths && !columnsToSize) {\n            return '0px';\n        }\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const  cols = this.hasColumnLayouts ?\n         this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.getFeatureColumnsWidth();\n        return colSum;\n    }\n\n    public hasVerticalSroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if ( this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches();\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.isRowSelectable) {\n            width += this.headerSelectorContainer ? this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        if (this.rowDraggable) {\n            width += this.headerDragContainer ? this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public isGroupByRecord(rec) {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    get dataView(): any[] {\n        return this.verticalScrollContainer.igxForOf;\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                            : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters = false, headers = false) {\n        const source = this.dataView;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollHandler = (event) => {\n        this.headerContainer.scrollPosition += event.target.scrollLeft;\n        this.verticalScrollContainer.scrollPosition += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.dataView.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                     () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.dataView.length) { return currentRowIndex; }\n\n        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0 && !col.hidden).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex < cols) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler = (isScroll = false) => {\n        if (this.document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.\n                compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (this.document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    /**\n    * @hidden\n    */\n    public gridOutletKeyboardHandler(event) {\n        // TODO: This should be removed after grid keyboard refactoring\n        // call stopPropagation for keydown event for the outlet not to propagate event to the grid\n        event.stopPropagation();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && this.data && this.data.length > 0;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /** @hidden */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /** @hidden */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public viewDetachHandler(args: ICachedViewLoadedEventArgs) {\n        const context = args.view.context;\n        if (context['templateID'] === 'dataRow') {\n            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM\n            // hence we need to trigger it manually when cell is detached.\n            const row = this.getRowByIndex(context.index);\n            const focusedCell = row.cells.find(x => x.focused);\n            if (focusedCell) {\n                focusedCell.onBlur();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective, static: false })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        // Reverse the sign here: '-' should become '+' in RTL mode\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n        if (this._page >= this.totalPages) {\n            this._page = this.totalPages - 1;\n        }\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...this._selectOptions];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, value: any, data: any, field: string, index: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, value: any, data: any, field: string, index: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if ( grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Input()\n    public isColumnPinnable: boolean;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl', { static: false })\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl', { static: false })\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective, static: false })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective, static: false })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective, static: false })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective, static: false })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem, IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { cloneArray } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.label !== null && it.label !== undefined) &&\n            !it.isBlanks &&\n            it.label.toString().toLowerCase().indexOf(searchText) > -1);\n\n        // If 'result' contains the 'Select All' item and at least one more - we use it, otherwise we use an empty array.\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxSelectModule } from '../select/select.module';\nimport {\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\nimport { IgxRowSelectorsModule } from './igx-row-selectors.module';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent,\n        IgxRowSelectorsModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxSelectModule,\n        IgxPaginatorModule,\n        IgxRowSelectorsModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.isInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from '../core/grid-selection';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.dataView.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return record.records && record.records.length;\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.scrollPosition = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { FilterMode } from '../common/enums';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective, static: false })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea', { static: false })\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList.length > 0 && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList.length > 0) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number, filteringPipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n\n    // R.K. TODO: Remove\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, element, cdr);\n        }\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    // TODO: Maybe move the focus logic in the tree cell ?\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        // TODO: Leave it to grid observer\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        { provide: IgxGridNavigationService, useClass: IgxTreeGridNavigationService },\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective, static: false })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selectionService.activeElement;\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.row, cellID.column);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.notifyChanges();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData: any, rowIndex: Number): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.dataView.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef, static: false })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef, static: false })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef, static: false })\n    public defaultContentElement: ElementRef;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { isIE } from '../../core/utils';\nimport { FilterMode } from '../common/enums';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.scrollPosition;\n        const scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.dataView[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.dataView.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.dataView.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            if (verticalScrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.dataView.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.dataView.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.dataView.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.dataView.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) || grid.rowList.length === 0) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusNextRow(elem, visibleColumnIndex, grid, isSummary);\n            });\n        }\n    }\n    public getColumnUnpinnedIndex(visibleColumnIndex: number, grid?: IgxHierarchicalGridComponent) {\n        const currGrid = grid || this.grid;\n        const column = currGrid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return currGrid.pinnedColumns.length ? currGrid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        const lastCellIndex = grid.unpinnedColumns[grid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.scrollPosition;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex, grid);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.scrollPosition;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.dataRowList.find(element => element.index === nextIndex).element.nativeElement;\n   }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        // (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        // (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    if (!args) {\n                        args = {};\n                    }\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [(hierarchicalState)]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        if (this._hierarchicalState !== val) {\n            this.hierarchicalStateChange.emit(val);\n        }\n        if (this.hasChildrenKey) {\n            val = val.filter(item => {\n                const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n                return rec[this.hasChildrenKey];\n            });\n        }\n        this._hierarchicalState = val;\n        if (this.parent) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hierarchicalStateChange = new EventEmitter<any>();\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    protected _transactions: any;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n            this.cdr.detectChanges();\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.dragIndicatorIconTemplate = this.parentIsland ?\n            this.parentIsland.dragIndicatorIconTemplate :\n            this.dragIndicatorIconTemplate;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n        this.parentIsland.children.map((item) => item.key) :\n        this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.onRowIslandChange());\n        super.ngAfterContentInit();\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.gridAPI.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.offsetWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n     private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.dataView.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n   toggleAll() {\n    const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n    /**\n     * Collapses all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public collapseAll() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * Expands all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public expandAll() {\n        if (this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n// import { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        // public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n            // this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef, static: false })\n    public expander: ElementRef;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n    * @hidden\n    */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    private endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.inEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.inEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IgxSelectModule } from '../../select/index';\nimport { IgxGridComponent } from '../grid/grid.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule,\n    IgxSelectModule\n  ],\n  providers: [\n    IgxRowIslandAPIService\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective, static: false })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    private _isOpen = false;\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-nav-drawer')\n    public cssClass = true;\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective, static: false })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective, static: false })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setElementStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setElementStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                const transform = x ? 'translate3d(' + x + 'px,0,0)' : '';\n                this.renderer.setElementStyle(this.drawer, 'transform', transform);\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform', transform);\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs extends IBaseEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (!this.continuous) {\n            this._isActive = visible;\n        }\n    }\n}\n","import { Component, NgModule, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous) {\n            return;\n        }\n\n        this._active = val;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    AfterContentChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    SliderType,\n    ISliderValueChangeEventArgs\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\n\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentChecked,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef, static: false })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef, static: false })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.normalizeByStep(this.value);\n            this.setTickInterval(this.labels);\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef, private _cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showSliderIndicators();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideSliderIndicators();\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandle(thumbFrom, labelFrom, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentChecked() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const positionLeft = `${this.valueToFraction(position) * 100}%`;\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style.left = positionLeft;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style.left = positionLeft;\n        }\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\nimport { Subscription } from 'rxjs';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit, OnDestroy {\n    private _currentBottomNavId = NEXT_ID++;\n    private _panelsChanges$: Subscription;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${this._currentBottomNavId}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.setPanelsAttributes();\n        this._panelsChanges$ = this.panels.changes.subscribe(() => {\n            this.setPanelsAttributes();\n        });\n\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._panelsChanges$) {\n            this._panelsChanges$.unsubscribe();\n        }\n    }\n\n    private setPanelsAttributes() {\n        const panelsArray = this.panels.toArray();\n        for (let index = 0; index < this.panels.length; index++) {\n            const tabPanels = panelsArray[index] as IgxTabPanelComponent;\n            tabPanels.nativeElement.setAttribute('id', this.getTabPanelId(index));\n            tabPanels.nativeElement.setAttribute('aria-labelledby', this.getTabId(index));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabId(index: number): string {\n        return `igx-tab-${this._currentBottomNavId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabPanelId(index: number): string {\n        return `igx-tab-panel-${this._currentBottomNavId}-${index}`;\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Returns the native element of the tab-panel component\n     * ```typescript\n     *  const mytabPanelElement: HTMLElement = tabPanel.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab is automatically generated from the IgxBottomNavComponent when tab panels are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit {\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * Returns the native element of the tabs-group component\n     * ```typescript\n     *  const mytabsGroupElement: HTMLElement = tabsGroup.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\nimport { KEYS } from '../core/utils';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     * @hidden @internal\n     * Set to true when the tab item is automatically generated from the IgxTabsComponent when tab groups are defined.\n     */\n    @Input()\n    public autoGenerated: boolean;\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (this.autoGenerated) {\n            this.select();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event: KeyboardEvent) {\n        const tabsArray = this._tabs.tabs.toArray();\n        const startIndex = tabsArray.indexOf(this);\n        let finalIndex = -1;\n        let currentIndex = startIndex;\n\n        switch (event.key) {\n            case KEYS.RIGHT_ARROW:\n            case KEYS.RIGHT_ARROW_IE:\n                do {\n                    currentIndex++;\n                    if (currentIndex === tabsArray.length) {\n                        currentIndex = -1;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.LEFT_ARROW:\n            case KEYS.LEFT_ARROW_IE:\n                do {\n                    currentIndex--;\n                    if (currentIndex === -1) {\n                        currentIndex = tabsArray.length;\n                        continue;\n                    } else if ((tabsArray[currentIndex] as IgxTabItemComponent).disabled === false) {\n                        finalIndex = currentIndex;\n                        break;\n                    }\n                }\n                while (currentIndex !== startIndex);\n                break;\n            case KEYS.HOME:\n                event.preventDefault();\n                finalIndex = tabsArray.find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.END:\n                event.preventDefault();\n                finalIndex = tabsArray.slice().reverse().find(t => (t as IgxTabItemComponent).disabled === false).index;\n                break;\n            case KEYS.ENTER:\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            case KEYS.SPACE:\n            case KEYS.SPACE_IE:\n                event.preventDefault();\n                if (!this.autoGenerated) {\n                    this.nativeTabItem.nativeElement.click();\n                }\n                break;\n            default:\n                break;\n        }\n\n        if (finalIndex > -1) {\n            const tab = tabsArray[finalIndex];\n            tab.nativeTabItem.nativeElement.focus();\n\n            if (this.autoGenerated) {\n                tab.select();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PlatformUtil } from '../core/utils';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\nlet NEXT_TABS_ID = 0;\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    private _currentTabsId = NEXT_TABS_ID++;\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n     * Sets/gets the `id` of the tabs.\n     *\n     * @remarks\n     * If not set, the `id` will have value `\"igx-tabs-0\"`.\n     *\n     * @example\n     * ```html\n     * <igx-tabs id=\"my-first-tabs\"></igx-tabs>\n     * ```\n     * @memberof IgxTabsComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tabs-${this._currentTabsId}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator', { static: false })\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone, private platformUtil: PlatformUtil) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                const newTab = this.tabs.toArray()[this._selectedIndex];\n                if (newTab) {\n                    this.performSelection(newTab);\n                } else {\n                    this.hideIndicator();\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver = new ResizeObserver(() => {\n                    if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                        const newTab = this.tabs.toArray()[this._selectedIndex];\n                        this.transformContentAnimation(newTab, 0);\n                    }\n                });\n\n                this._resizeObserver.observe(this.tabsContainer.nativeElement);\n            });\n        }\n\n        this.setGroupsAttributes();\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.setGroupsAttributes();\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n        if (this._resizeObserver) {\n            this._ngZone.runOutsideAngular(() => {\n                this._resizeObserver.disconnect();\n            });\n        }\n    }\n\n    private setGroupsAttributes() {\n        const groupsArray = this.groups.toArray();\n        for (let index = 0; index < this.groups.length; index++) {\n            const tabsGroup = groupsArray[index] as IgxTabsGroupComponent;\n            tabsGroup.nativeElement.setAttribute('id', this.getTabsGroupId(index));\n            tabsGroup.nativeElement.setAttribute('aria-labelledby', this.getTabItemId(index));\n        }\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, 0.2);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabItemId(index: number): string {\n        return `igx-tab-item-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public getTabsGroupId(index: number): string {\n        return `igx-tabs-group-${this._currentTabsId}-${index}`;\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n        let hour, minutes, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit,\n    Injector,\n    ChangeDetectorRef,\n    AfterViewChecked,\n    Type\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler, Subscription } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\nconst noop = () => { };\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit,\n    AfterViewChecked {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList', { static: false })\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList', { static: false })\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList', { static: false })\n    public ampmList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective, static: false })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective, static: false })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _inputElementRef: ElementRef;\n\n    @ViewChild(IgxInputDirective, { read: IgxInputDirective, static: false })\n    private _inputDirective: IgxInputDirective;\n\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: false })\n    private _inputDirectiveUserTemplate: IgxInputDirective;\n\n    @ViewChild(IgxInputGroupComponent, { read: IgxInputGroupComponent, static: false })\n    private _inputGroup: IgxInputGroupComponent;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _statusChanges$: Subscription;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _hoursPos = new Set();\n    private _minutesPos = new Set();\n    private _secondsPos = new Set();\n    private _amPmPos = new Set();\n    private _ngControl: NgControl = null;\n\n    //#region ControlValueAccessor\n\n    private _onChangeCallback: (_: Date) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /** @hidden @internal */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this._value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    //#endregion\n\n\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    private get required(): boolean {\n        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this._ngControl.control.validator({} as AbstractControl);\n            return error && error.required;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n        this._ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this._inputElementRef) {\n            fromEvent(this._inputElementRef.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this._inputGroup) {\n            this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n                // If canceled in a user onClosing handler\n                if (event.cancel) {\n                    return;\n                }\n                // Do not focus the input if clicking outside in dropdown mode\n                const input = this.getEditElement();\n                if (input && !(event.event && this.mode === InteractionMode.DropDown)) {\n                    input.focus();\n                } else {\n                    this._updateValidityOnBlur();\n                }\n            });\n\n            this.determineCursorPos();\n\n            if (this._ngControl) {\n                this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            }\n        }\n    }\n\n    public ngAfterViewChecked() {\n        // if one sets mode at run time this forces initialization of new igxInputGroup\n        // As a result a new igxInputDirective is initialized too. In ngAfterViewInit of\n        // the new directive isRequired of the igxInputGroup is set again. However\n        // ngAfterViewInit of the time picker is not called again and we may finish with wrong\n        // isRequired in igxInputGroup. This is why we should set it her, only when needed\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n            this._cdr.detectChanges();\n        }\n    }\n\n        /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    constructor(\n        private _injector: Injector,\n        private _cdr: ChangeDetectorRef) { }\n\n    private determineCursorPos(): void {\n        this.clearCursorPos();\n        for (const char of this.format) {\n            switch (char) {\n                case 'H':\n                case 'h':\n                    this._hoursPos.size === 0 ? this._hoursPos.add(this.format.indexOf(char)) :\n                        this._hoursPos.add(this.format.lastIndexOf(char));\n                    this._hoursPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'M':\n                case 'm':\n                    this._minutesPos.size === 0 ? this._minutesPos.add(this.format.indexOf(char)) :\n                        this._minutesPos.add(this.format.lastIndexOf(char));\n                    this._minutesPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'S':\n                case 's':\n                    this._secondsPos.size === 0 ? this._secondsPos.add(this.format.indexOf(char)) :\n                        this._secondsPos.add(this.format.lastIndexOf(char));\n                    this._secondsPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n                case 'T':\n                case 't':\n                    this._amPmPos.size === 0 ? this._amPmPos.add(this.format.indexOf(char)) :\n                        this._amPmPos.add(this.format.lastIndexOf(char));\n                    this._amPmPos.add(this.format.lastIndexOf(char) + 1);\n                    break;\n            }\n        }\n    }\n\n    private clearCursorPos() {\n        this._hoursPos.forEach(v => this._hoursPos.delete(v));\n        this._minutesPos.forEach(v => this._minutesPos.delete(v));\n        this._secondsPos.forEach(v => this._secondsPos.delete(v));\n        this._amPmPos.forEach(v => this._amPmPos.delete(v));\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        date.setSeconds(0);\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n                this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                    (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                        date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM;\n    }\n\n    private _getCursorPosition(): number {\n        return this._inputElementRef.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this._inputElementRef.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this.displayValue === this.parseMask(false)) {\n            return;\n        }\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this._ngControl.control.touched || this._ngControl.control.dirty) &&\n            (this._ngControl.control.validator || this._ngControl.control.asyncValidator)) {\n            const input = this._inputDirective || this._inputDirectiveUserTemplate;\n            if (this._inputGroup.isFocused) {\n                input.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                input.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n\n        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {\n            this._inputGroup.isRequired = this.required;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._inputElementRef ? this._inputElementRef.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this._inputGroup  ? this._inputGroup .element.nativeElement : null;\n    }\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this.value ? this._formatTime(this.value, this.format) : this.parseMask(false);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        if (this.mode === InteractionMode.DropDown) {\n            const value = event.target.value;\n            this.isNotEmpty = value !== '';\n            this.displayValue = value;\n            if (value && value !== this.parseMask()) {\n                if (this._isEntryValid(value)) {\n                    const newVal = this._convertMinMaxValue(value);\n                    if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                        this.value = newVal;\n                    }\n                } else {\n                    const args: IgxTimePickerValidationFailedEventArgs = {\n                        timePicker: this,\n                        currentValue: value,\n                        setThroughUI: false\n                    };\n                    this.onValidationFailed.emit(args);\n                }\n            }\n        }\n\n        if (this.toggleRef.collapsed) {\n            this._updateValidityOnBlur();\n        }\n    }\n\n    public mouseDown(event: MouseEvent): void {\n        // if the click is not on the input but in input group\n        // e.g. on prefix or suffix, prevent default and this way prevent blur\n        if (event.target !== this.getEditElement()) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n\n            if (this.showHoursList && HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (this.showMinutesList &&\n                ((this.showHoursList && MINUTES_POS.indexOf(cursor) !== -1) || (!this.showHoursList && HOURS_POS.indexOf(cursor) !== -1))) {\n                    this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (this.showAmPmList) {\n                if (((!this.showHoursList || !this.showMinutesList) && MINUTES_POS.indexOf(cursor) !== -1) ||\n                    (this.showHoursList && this.showMinutesList &&  AMPM_POS.indexOf(cursor) !== -1)) {\n\n                        const sections = this.displayValue.split(/[\\s:]+/);\n                        sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                        currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                        this.value = currentVal;\n                }\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this.displayValue = this.inputFormat.transform(displayVal);\n        this._inputElementRef.nativeElement.value = this.displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n\n    private _updateValidityOnBlur() {\n        this._onTouchedCallback();\n        const input = this._inputDirective || this._inputDirectiveUserTemplate;\n        if (this._ngControl && !this._ngControl.valid) {\n            input.valid = IgxInputState.INVALID;\n        } else {\n            input.valid = IgxInputState.INITIAL;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    private _isVisible = false;\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)] = \"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"]}