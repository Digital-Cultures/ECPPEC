/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, TemplateRef, ViewChild, ViewChildren, QueryList, ElementRef, HostBinding, HostListener, ChangeDetectionStrategy } from '@angular/core';
import { DataType, DataUtil } from '../../data-operations/data-util';
import { IgxColumnComponent } from '../column.component';
import { IgxDropDownComponent } from '../../drop-down/index';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';
import { IgxChipsAreaComponent } from '../../chips';
import { ExpressionUI } from './grid-filtering.service';
import { IgxFilteringService } from './grid-filtering.service';
import { isEdge, isIE } from '../../core/utils';
import { AbsoluteScrollStrategy } from '../../services/overlay/scroll';
/**
 * @hidden
 */
var IgxGridFilteringRowComponent = /** @class */ (function () {
    function IgxGridFilteringRowComponent(filteringService, element, cdr) {
        this.filteringService = filteringService;
        this.element = element;
        this.cdr = cdr;
        this._positionSettings = {
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom
        };
        this._conditionsOverlaySettings = {
            excludePositionTarget: true,
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this._operatorsOverlaySettings = {
            excludePositionTarget: true,
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)
        };
        this.chipAreaScrollOffset = 0;
        this._column = null;
        this.isKeyPressed = false;
        this.isComposing = false;
        this._cancelChipClick = false;
        this.cssClass = 'igx-grid__filtering-row';
    }
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this._column) {
                this.expressionsList.forEach(function (exp) { return exp.isSelected = false; });
            }
            if (val) {
                this._column = val;
                this.expressionsList = this.filteringService.getExpressions(this._column.field);
                this.resetExpression();
                this.chipAreaScrollOffset = 0;
                this.transform(this.chipAreaScrollOffset);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.expression ? this.expression.searchVal : null;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            if (!val && val !== 0) {
                this.expression.searchVal = null;
                this.showHideArrowButtons();
            }
            else {
                this.expression.searchVal = DataUtil.parseValue(this.column.dataType, val);
                if (this.expressionsList.find(function (item) { return item.expression === _this.expression; }) === undefined) {
                    this.addExpression(true);
                }
            }
            this.filter();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;
        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;
        /** @type {?} */
        var selectedItem = this.expressionsList.find(function (expr) { return expr.isSelected === true; });
        if (selectedItem) {
            this.expression = selectedItem.expression;
        }
        this.input.nativeElement.focus();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onTabKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {
            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onEscKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.close();
    };
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "template", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.column.dataType === DataType.Date) {
                return this.defaultDateUI;
            }
            return this.defaultFilterUI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.column.dataType) {
                case DataType.String:
                case DataType.Boolean:
                    return 'text';
                case DataType.Number:
                    return 'number';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "conditions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.filters.conditionList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "isUnaryCondition", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.expression.condition) {
                return this.expression.condition.isUnary;
            }
            else {
                return true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.expression.condition && this.expression.condition.isUnary) {
                return this.filteringService.getChipLabel(this.expression);
            }
            else if (this.column.dataType === DataType.Date) {
                return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;
            }
            else if (this.column.dataType === DataType.Boolean) {
                return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;
            }
            else {
                return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Event handler for keydown on the input group's prefix.
     */
    /**
     * Event handler for keydown on the input group's prefix.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onPrefixKeyDown = /**
     * Event handler for keydown on the input group's prefix.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((event.key === "Enter" /* ENTER */ || event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */) && this.dropDownConditions.collapsed) {
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
            event.stopImmediatePropagation();
        }
        else if (event.key === "Tab" /* TAB */) {
            if (event.shiftKey) {
                event.preventDefault();
                event.stopPropagation();
            }
            else if (!this.dropDownConditions.collapsed) {
                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
            }
        }
    };
    /**
     * Event handler for keydown on the input.
     */
    /**
     * Event handler for keydown on the input.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInputKeyDown = /**
     * Event handler for keydown on the input.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.isKeyPressed = true;
        if (this.column.dataType === DataType.Boolean) {
            if (event.key === "Enter" /* ENTER */ || event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */) {
                this.inputGroupPrefix.nativeElement.focus();
                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
                event.stopPropagation();
                return;
            }
        }
        if (event.key === "Enter" /* ENTER */) {
            if (this.isComposing) {
                return;
            }
            this.commitInput();
        }
        else if (event.altKey && (event.key === "ArrowDown" /* DOWN_ARROW */ || event.key === "Down" /* DOWN_ARROW_IE */)) {
            this.inputGroupPrefix.nativeElement.focus();
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
        else if (event.key === "Escape" /* ESCAPE */ || event.key === "Esc" /* ESCAPE_IE */) {
            event.preventDefault();
            this.close();
        }
        event.stopPropagation();
    };
    /**
     * Event handler for keyup on the input.
     */
    /**
     * Event handler for keyup on the input.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInputKeyUp = /**
     * Event handler for keyup on the input.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        this.isKeyPressed = false;
    };
    /**
     * Event handler for input on the input.
     */
    /**
     * Event handler for input on the input.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInput = /**
     * Event handler for input on the input.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,
        // when you have a japanese character as a placeholder, on init the value here is empty string .
        /** @type {?} */
        var target = eventArgs.target;
        if (isEdge() && target.type !== 'number' || this.isKeyPressed && isIE() || target.value || target.checkValidity()) {
            this.value = target.value;
        }
    };
    /**
     * Event handler for compositionstart on the input.
     */
    /**
     * Event handler for compositionstart on the input.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onCompositionStart = /**
     * Event handler for compositionstart on the input.
     * @return {?}
     */
    function () {
        this.isComposing = true;
    };
    /**
     * Event handler for compositionend on the input.
     */
    /**
     * Event handler for compositionend on the input.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onCompositionEnd = /**
     * Event handler for compositionend on the input.
     * @return {?}
     */
    function () {
        this.isComposing = false;
    };
    /**
     * Event handler for input click event.
     */
    /**
     * Event handler for input click event.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInputClick = /**
     * Event handler for input click event.
     * @return {?}
     */
    function () {
        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {
            this.inputGroupPrefix.nativeElement.focus();
            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);
        }
    };
    /**
     * Event handler for datepicker's close.
     */
    /**
     * Event handler for datepicker's close.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.datePickerClose = /**
     * Event handler for datepicker's close.
     * @return {?}
     */
    function () {
        this.input.nativeElement.focus();
    };
    /**
     * Returns the filtering operation condition for a given value.
     */
    /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.getCondition = /**
     * Returns the filtering operation condition for a given value.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.column.filters.condition(value);
    };
    /**
     * Returns the translated condition name for a given value.
     */
    /**
     * Returns the translated condition name for a given value.
     * @param {?} value
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.translateCondition = /**
     * Returns the translated condition name for a given value.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.filteringService.grid.resourceStrings["igx_grid_filter_" + this.getCondition(value).name] || value;
    };
    /**
     * Returns the icon name of the current condition.
     */
    /**
     * Returns the icon name of the current condition.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.getIconName = /**
     * Returns the icon name of the current condition.
     * @return {?}
     */
    function () {
        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {
            return this.getCondition(this.conditions[0]).iconName;
        }
        else {
            return this.expression.condition.iconName;
        }
    };
    /**
     * Returns whether a given condition is selected in dropdown.
     */
    /**
     * Returns whether a given condition is selected in dropdown.
     * @param {?} conditionName
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.isConditionSelected = /**
     * Returns whether a given condition is selected in dropdown.
     * @param {?} conditionName
     * @return {?}
     */
    function (conditionName) {
        if (this.expression.condition) {
            return this.expression.condition.name === conditionName;
        }
        else {
            return false;
        }
    };
    /**
     * Clears the current filtering.
     */
    /**
     * Clears the current filtering.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.clearFiltering = /**
     * Clears the current filtering.
     * @return {?}
     */
    function () {
        this.filteringService.clearFilter(this.column.field);
        this.resetExpression();
        if (this.input) {
            this.input.nativeElement.focus();
        }
        this.cdr.detectChanges();
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    };
    /**
     * Commits the value of the input.
     */
    /**
     * Commits the value of the input.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.commitInput = /**
     * Commits the value of the input.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedItem = this.expressionsList.filter(function (ex) { return ex.isSelected === true; });
        selectedItem.forEach(function (e) { return e.isSelected = false; });
        /** @type {?} */
        var indexToDeselect = -1;
        for (var index = 0; index < this.expressionsList.length; index++) {
            /** @type {?} */
            var expression = this.expressionsList[index].expression;
            if (expression.searchVal === null && !expression.condition.isUnary) {
                indexToDeselect = index;
            }
        }
        if (indexToDeselect !== -1) {
            this.removeExpression(indexToDeselect, this.expression);
        }
        this.resetExpression();
        this.scrollChipsWhenAddingExpression();
    };
    /**
     * Clears the value of the input.
     */
    /**
     * Clears the value of the input.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.clearInput = /**
     * Clears the value of the input.
     * @return {?}
     */
    function () {
        this.value = null;
    };
    /**
     * Event handler for keydown on clear button.
     */
    /**
     * Event handler for keydown on clear button.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onClearKeyDown = /**
     * Event handler for keydown on clear button.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */ || eventArgs.key === " " /* SPACE */ || eventArgs.key === "Spacebar" /* SPACE_IE */) {
            eventArgs.preventDefault();
            this.clearInput();
            this.input.nativeElement.focus();
        }
    };
    /**
     * Event handler for click on clear button.
     */
    /**
     * Event handler for click on clear button.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onClearClick = /**
     * Event handler for click on clear button.
     * @return {?}
     */
    function () {
        this.clearInput();
        this.input.nativeElement.focus();
    };
    /**
     * Event handler for keydown on commit button.
     */
    /**
     * Event handler for keydown on commit button.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onCommitKeyDown = /**
     * Event handler for keydown on commit button.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */ || eventArgs.key === " " /* SPACE */ || eventArgs.key === "Spacebar" /* SPACE_IE */) {
            eventArgs.preventDefault();
            this.commitInput();
            this.input.nativeElement.focus();
        }
    };
    /**
     * Event handler for click on commit button.
     */
    /**
     * Event handler for click on commit button.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onCommitClick = /**
     * Event handler for click on commit button.
     * @return {?}
     */
    function () {
        this.commitInput();
        this.input.nativeElement.focus();
    };
    /**
     * Event handler for focusout on the input group.
     */
    /**
     * Event handler for focusout on the input group.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onInputGroupFocusout = /**
     * Event handler for focusout on the input group.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.value && this.value !== 0 &&
            this.expression.condition && !this.expression.condition.isUnary) {
            return;
        }
        requestAnimationFrame(function () {
            /** @type {?} */
            var focusedElement = document.activeElement;
            if (focusedElement.className === 'igx-chip__remove' || focusedElement.tagName === 'IGX-DAY-ITEM') {
                return;
            }
            if (!(focusedElement && _this.inputGroup.nativeElement.contains(focusedElement))
                && _this.dropDownConditions.collapsed) {
                _this.commitInput();
            }
        });
    };
    /**
     * Closes the filtering edit row.
     */
    /**
     * Closes the filtering edit row.
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.close = /**
     * Closes the filtering edit row.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.expressionsList.length === 1 &&
            this.expressionsList[0].expression.searchVal === null &&
            this.expressionsList[0].expression.condition.isUnary === false) {
            this.filteringService.getExpressions(this.column.field).pop();
            this.filter();
        }
        else {
            /** @type {?} */
            var condToRemove = this.expressionsList.filter(function (ex) { return ex.expression.searchVal === null && !ex.expression.condition.isUnary; });
            if (condToRemove && condToRemove.length > 0) {
                condToRemove.forEach(function (c) { return _this.filteringService.removeExpression(_this.column.field, _this.expressionsList.indexOf(c)); });
                this.filter();
            }
        }
        this.filteringService.isFilterRowVisible = false;
        this.filteringService.updateFilteringCell(this.column);
        this.filteringService.focusFilterCellChip(this.column, true);
        this.filteringService.filteredColumn = null;
        this.filteringService.selectedExpression = null;
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
    };
    /*
    * noop
    */
    /*
        * noop
        */
    /**
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.noop = /*
        * noop
        */
    /**
     * @return {?}
     */
    function () { };
    /**
     *  Event handler for date picker's selection.
     */
    /**
     *  Event handler for date picker's selection.
     * @param {?} value
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onDateSelected = /**
     *  Event handler for date picker's selection.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * Opens the conditions dropdown.
     */
    /**
     * Opens the conditions dropdown.
     * @param {?} target
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.toggleConditionsDropDown = /**
     * Opens the conditions dropdown.
     * @param {?} target
     * @return {?}
     */
    function (target) {
        this._conditionsOverlaySettings.positionStrategy.settings.target = target;
        this.dropDownConditions.toggle(this._conditionsOverlaySettings);
    };
    /**
     * Opens the logic operators dropdown.
     */
    /**
     * Opens the logic operators dropdown.
     * @param {?} eventArgs
     * @param {?} index
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.toggleOperatorsDropDown = /**
     * Opens the logic operators dropdown.
     * @param {?} eventArgs
     * @param {?} index
     * @return {?}
     */
    function (eventArgs, index) {
        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;
        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);
    };
    /**
     * Event handler for change event in conditions dropdown.
     */
    /**
     * Event handler for change event in conditions dropdown.
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onConditionsChanged = /**
     * Event handler for change event in conditions dropdown.
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        var _this = this;
        /** @type {?} */
        var value = ((/** @type {?} */ (eventArgs.newSelection))).value;
        this.expression.condition = this.getCondition(value);
        if (this.expression.condition.isUnary) {
            // update grid's filtering on the next cycle to ensure the drop-down is closed
            // if the drop-down is not closed this event handler will be invoked multiple times
            requestAnimationFrame(function () { return _this.unaryConditionChangedCallback(); });
        }
        else {
            requestAnimationFrame(function () { return _this.conditionChangedCallback(); });
        }
        if (this.input) {
            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,
            // if it has been focused and then set to readonly.
            requestAnimationFrame(function () { return _this.input.nativeElement.focus(); });
        }
    };
    /**
     * @param {?} args
     * @param {?} chip
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipPointerdown = /**
     * @param {?} args
     * @param {?} chip
     * @return {?}
     */
    function (args, chip) {
        /** @type {?} */
        var activeElement = document.activeElement;
        this._cancelChipClick = chip.selected && activeElement &&
            this.inputGroup.nativeElement.contains(activeElement);
    };
    /**
     * @param {?} args
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipClick = /**
     * @param {?} args
     * @param {?} item
     * @return {?}
     */
    function (args, item) {
        if (this._cancelChipClick) {
            this._cancelChipClick = false;
            return;
        }
        this.expressionsList.forEach(function (ex) { return ex.isSelected = false; });
        this.toggleChip(item);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.toggleChip = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.isSelected = !item.isSelected;
        if (item.isSelected) {
            this.expression = item.expression;
            if (this.input) {
                this.input.nativeElement.focus();
            }
        }
    };
    /**
     * Event handler for chip keydown event.
     */
    /**
     * Event handler for chip keydown event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipKeyDown = /**
     * Event handler for chip keydown event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    function (eventArgs, item) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            eventArgs.preventDefault();
            this.toggleChip(item);
        }
    };
    /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     */
    /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     * @param {?} event
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onLeftArrowKeyDown = /**
     * Scrolls the first chip into view if the tab key is pressed on the left arrow.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key === "Tab" /* TAB */) {
            this.chipAreaScrollOffset = 0;
            this.transform(this.chipAreaScrollOffset);
        }
    };
    /**
     * Event handler for chip removed event.
     */
    /**
     * Event handler for chip removed event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onChipRemoved = /**
     * Event handler for chip removed event.
     * @param {?} eventArgs
     * @param {?} item
     * @return {?}
     */
    function (eventArgs, item) {
        /** @type {?} */
        var indexToRemove = this.expressionsList.indexOf(item);
        this.removeExpression(indexToRemove, item.expression);
        this.scrollChipsOnRemove();
    };
    /**
     * Event handler for logic operator changed event.
     */
    /**
     * Event handler for logic operator changed event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.onLogicOperatorChanged = /**
     * Event handler for logic operator changed event.
     * @param {?} eventArgs
     * @param {?} expression
     * @return {?}
     */
    function (eventArgs, expression) {
        var _this = this;
        if (eventArgs.oldSelection) {
            expression.afterOperator = ((/** @type {?} */ (eventArgs.newSelection))).value;
            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;
            // update grid's filtering on the next cycle to ensure the drop-down is closed
            // if the drop-down is not closed this event handler will be invoked multiple times
            requestAnimationFrame(function () { return _this.filter(); });
        }
    };
    /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     */
    /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     * @param {?} arrowPosition
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsOnArrowPress = /**
     * Scrolls the chips into the chip area when left or right arrows are pressed.
     * @param {?} arrowPosition
     * @return {?}
     */
    function (arrowPosition) {
        /** @type {?} */
        var count = 0;
        /** @type {?} */
        var chipAraeChildren = this.chipsArea.element.nativeElement.children;
        /** @type {?} */
        var containerRect = this.container.nativeElement.getBoundingClientRect();
        if (arrowPosition === 'right') {
            for (var index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {
                    count++;
                }
            }
            if (count < chipAraeChildren.length) {
                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -
                    Math.ceil(containerRect.right) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
        if (arrowPosition === 'left') {
            for (var index = 0; index < chipAraeChildren.length; index++) {
                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {
                    count++;
                }
            }
            if (count > 0) {
                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -
                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;
                this.transform(this.chipAreaScrollOffset);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.showHideArrowButtons = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            if (_this.filteringService.isFilterRowVisible) {
                /** @type {?} */
                var containerWidth = _this.container.nativeElement.getBoundingClientRect().width;
                _this.chipsAreaWidth = _this.chipsArea.element.nativeElement.getBoundingClientRect().width;
                _this.showArrows = _this.chipsAreaWidth >= containerWidth && _this.isColumnFiltered;
                // TODO: revise the cdr.detectChanges() usage here
                if (!((/** @type {?} */ (_this.cdr))).destroyed) {
                    _this.cdr.detectChanges();
                }
            }
        });
    };
    /**
     * @private
     * @param {?} isSelected
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.addExpression = /**
     * @private
     * @param {?} isSelected
     * @return {?}
     */
    function (isSelected) {
        /** @type {?} */
        var exprUI = new ExpressionUI();
        exprUI.expression = this.expression;
        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;
        exprUI.isSelected = isSelected;
        this.expressionsList.push(exprUI);
        /** @type {?} */
        var length = this.expressionsList.length;
        if (this.expressionsList[length - 2]) {
            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;
        }
        this.showHideArrowButtons();
    };
    /**
     * @private
     * @param {?} indexToRemove
     * @param {?} expression
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.removeExpression = /**
     * @private
     * @param {?} indexToRemove
     * @param {?} expression
     * @return {?}
     */
    function (indexToRemove, expression) {
        if (indexToRemove === 0 && this.expressionsList.length === 1) {
            this.clearFiltering();
            return;
        }
        this.filteringService.removeExpression(this.column.field, indexToRemove);
        this.filter();
        if (this.expression === expression) {
            this.resetExpression();
        }
        this.showHideArrowButtons();
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.resetExpression = /**
     * @private
     * @return {?}
     */
    function () {
        this.expression = {
            fieldName: this.column.field,
            condition: null,
            searchVal: null,
            ignoreCase: this.column.filteringIgnoreCase
        };
        if (this.column.dataType !== DataType.Boolean) {
            this.expression.condition = this.getCondition(this.conditions[0]);
        }
        if (this.column.dataType === DataType.Date && this.input) {
            this.input.nativeElement.value = null;
        }
        this.showHideArrowButtons();
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsWhenAddingExpression = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var chipAraeChildren = this.chipsArea.element.nativeElement.children;
        if (!chipAraeChildren || chipAraeChildren.length === 0) {
            return;
        }
        /** @type {?} */
        var containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);
        /** @type {?} */
        var lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);
        if (lastChipRectRight >= containerRectRight) {
            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;
            this.transform(this.chipAreaScrollOffset);
        }
    };
    /**
     * @hidden
     * Resets the chips area
     * @memberof IgxGridFilteringRowComponent
     */
    /**
     * @hidden
     * Resets the chips area
     * \@memberof IgxGridFilteringRowComponent
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.resetChipsArea = /**
     * @hidden
     * Resets the chips area
     * \@memberof IgxGridFilteringRowComponent
     * @return {?}
     */
    function () {
        this.chipAreaScrollOffset = 0;
        this.transform(this.chipAreaScrollOffset);
        this.showHideArrowButtons();
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.transform = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        var _this = this;
        requestAnimationFrame(function () {
            _this.chipsArea.element.nativeElement.style.transform = "translate(" + offset + "px)";
        });
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.scrollChipsOnRemove = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var count = 0;
        /** @type {?} */
        var chipAraeChildren = this.chipsArea.element.nativeElement.children;
        /** @type {?} */
        var containerRect = this.container.nativeElement.getBoundingClientRect();
        for (var index = 0; index < chipAraeChildren.length; index++) {
            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {
                count++;
            }
        }
        if (count <= 2) {
            this.chipAreaScrollOffset = 0;
        }
        else {
            /** @type {?} */
            var dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;
            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;
        }
        this.transform(this.chipAreaScrollOffset);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.conditionChangedCallback = /**
     * @private
     * @return {?}
     */
    function () {
        if (!!this.expression.searchVal || this.expression.searchVal === 0) {
            this.filter();
        }
        else if (this.value) {
            this.value = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.unaryConditionChangedCallback = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.value) {
            this.value = null;
        }
        if (this.expressionsList.find(function (item) { return item.expression === _this.expression; }) === undefined) {
            this.addExpression(true);
        }
        this.filter();
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridFilteringRowComponent.prototype.filter = /**
     * @private
     * @return {?}
     */
    function () {
        this.filteringService.filterInternal(this.column.field);
    };
    Object.defineProperty(IgxGridFilteringRowComponent.prototype, "isColumnFiltered", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    IgxGridFilteringRowComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-filtering-row',
                    template: "<!-- Have to apply styles inline because of the overlay outlet ... -->\n<igx-drop-down #inputGroupConditions [height]=\"'200px'\" (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let condition of conditions\"\n        [value]=\"condition\"\n        [selected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span style=\"margin-left: 16px\">{{ translateCondition(condition) }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #defaultFilterUI>\n    <igx-input-group #inputGroup type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\" (focusout)=\"onInputGroupFocusout()\">\n        <igx-prefix #inputGroupPrefix\n                    (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                    (keydown)=\"onPrefixKeyDown($event)\"\n                    tabindex=\"0\"\n                    [igxDropDownItemNavigation]=\"inputGroupConditions\">\n            <igx-icon fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        </igx-prefix>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            [placeholder]=\"placeholder\"\n            autocomplete=\"off\"\n            [value]=\"value\"\n            (input)=\"onInput($event)\"\n            [type]=\"type\"\n            [readonly]=\"isUnaryCondition\"\n            (click)=\"onInputClick()\"\n            (compositionstart)=\"onCompositionStart()\"\n            (compositionend)=\"onCompositionEnd()\"\n            (keydown)=\"onInputKeyDown($event)\"\n            (keyup)=\"onInputKeyUp($event)\"/>\n            <igx-suffix *ngIf=\"value || value === 0\" >\n                <igx-icon (keydown)=\"onCommitKeyDown($event)\" (click)=\"onCommitClick()\" tabindex=\"0\">done</igx-icon>\n                <igx-icon (keydown)=\"onClearKeyDown($event)\" (click)=\"onClearClick()\" tabindex=\"0\">clear</igx-icon>\n            </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-template #defaultDateUI>\n    <igx-date-picker\n        tabindex=\"0\"\n        mode=\"dropdown\"\n        [value]=\"value\"\n        [outlet]=\"filteringService.grid.outletDirective\"\n        [locale]=\"filteringService.grid.locale\"\n        (onSelection)=\"onDateSelected($event)\"\n        (onClose)=\"datePickerClose()\">\n        <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\">\n            <igx-input-group #inputGroup type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\" (focusout)=\"onInputGroupFocusout()\">\n                <igx-prefix #inputGroupPrefix\n                            tabindex=\"0\"\n                            (click)=\"toggleConditionsDropDown(inputGroupPrefix)\"\n                            (keydown)=\"onPrefixKeyDown($event)\"\n                            [igxDropDownItemNavigation]=\"inputGroupConditions\">\n                    <igx-icon fontSet=\"filtering-icons\" [name]=\"expression.condition.iconName\"></igx-icon>\n                </igx-prefix>\n                <input #input\n                       igxInput\n                       tabindex=\"0\"\n                       (click)=\"expression.condition.isUnary ? noop() : openDialog(inputGroup.element.nativeElement)\"\n                       [placeholder]=\"placeholder\"\n                       autocomplete=\"off\"\n                       [value]=\"value | igxdate: filteringService.grid.locale\"\n                       [readonly]=\"true\"\n                       (keydown)=\"onInputKeyDown($event)\"/>\n                <igx-suffix *ngIf=\"value\">\n                    <igx-icon (keydown)=\"onCommitKeyDown($event)\" (click)=\"onCommitClick()\" tabindex=\"0\">done</igx-icon>\n                    <igx-icon (keydown)=\"onClearKeyDown($event)\" (click)=\"clearInput()\" tabindex=\"0\">clear</igx-icon>\n                </igx-suffix>\n            </igx-input-group>\n            </ng-template>\n    </igx-date-picker>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: { $implicit: this }\"></ng-container>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-start\" *ngIf=\"showArrows\" (keydown)=\"onLeftArrowKeyDown($event)\" (click)=\"scrollChipsOnArrowPress('left')\">\n    <igx-icon>navigate_before</igx-icon>\n</button>\n\n<div #container class=\"igx-grid__filtering-row-main\">\n    <div>\n         <igx-chips-area #chipsArea>\n            <ng-container *ngFor=\"let item of expressionsList; index as i; let last = last;\" tabindex=\"0\">\n                <igx-chip #chip id='chip'\n                    (pointerdown)=\"onChipPointerdown($event, chip)\"\n                    (click)=\"onChipClick($event, item)\"\n                    (keydown)=\"onChipKeyDown($event, item)\"\n                    (onRemove)=\"onChipRemoved($event, item)\"\n                    [selectable]=\"false\"\n                    [selected]=\"item.isSelected\"\n                    [displayDensity]=\"'cosy'\"\n                    [removable]=\"true\">\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"filtering-icons\"\n                        [name]=\"item.expression.condition.iconName\">\n                    </igx-icon>\n                    <span>{{filteringService.getChipLabel(item.expression)}}</span>\n                </igx-chip>\n\n                <span id='operand' *ngIf=\"!last\">\n                    <button igxButton (click)=\"toggleOperatorsDropDown($event, i)\" [igxDropDownItemNavigation]=\"operators\">\n                        <igx-icon>expand_more</igx-icon>\n                        <span>{{filteringService.getOperatorAsString(item.afterOperator)}}</span>\n                    </button>\n                    <igx-drop-down #operators (onSelection)=\"onLogicOperatorChanged($event, item)\">\n                            <igx-drop-down-item [value]=\"0\" [selected]=\"item.afterOperator === 0\">{{filteringService.grid.resourceStrings.igx_grid_filter_operator_and}}</igx-drop-down-item>\n                            <igx-drop-down-item [value]=\"1\" [selected]=\"item.afterOperator === 1\">{{filteringService.grid.resourceStrings.igx_grid_filter_operator_or}}</igx-drop-down-item>\n                    </igx-drop-down>\n                </span>\n            </ng-container>\n        </igx-chips-area>\n    </div>\n</div>\n\n<button igxButton=\"icon\" class=\"igx-grid__filtering-row-scroll-end\" *ngIf=\"showArrows\" (click)=\"scrollChipsOnArrowPress('right')\">\n    <igx-icon>navigate_next</igx-icon>\n</button>\n\n<div #buttonsContainer class=\"igx-grid__filtering-row-editing-buttons\">\n    <button igxButton igxRipple (click)=\"clearFiltering()\" [disabled]=\"disabled\" [tabindex]=\"disabled\">{{filteringService.grid.resourceStrings.igx_grid_filter_row_reset}}</button>\n    <button #closeButton igxButton igxRipple (click)=\"close()\">{{filteringService.grid.resourceStrings.igx_grid_filter_row_close}}</button>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    IgxGridFilteringRowComponent.ctorParameters = function () { return [
        { type: IgxFilteringService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    IgxGridFilteringRowComponent.propDecorators = {
        column: [{ type: Input }],
        value: [{ type: Input }],
        defaultFilterUI: [{ type: ViewChild, args: ['defaultFilterUI', { read: TemplateRef, static: true },] }],
        defaultDateUI: [{ type: ViewChild, args: ['defaultDateUI', { read: TemplateRef, static: true },] }],
        input: [{ type: ViewChild, args: ['input', { read: ElementRef, static: false },] }],
        dropDownConditions: [{ type: ViewChild, args: ['inputGroupConditions', { read: IgxDropDownComponent, static: true },] }],
        chipsArea: [{ type: ViewChild, args: ['chipsArea', { read: IgxChipsAreaComponent, static: true },] }],
        dropDownOperators: [{ type: ViewChildren, args: ['operators', { read: IgxDropDownComponent },] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup', { read: ElementRef, static: false },] }],
        inputGroupPrefix: [{ type: ViewChild, args: ['inputGroupPrefix', { read: ElementRef, static: false },] }],
        container: [{ type: ViewChild, args: ['container', { static: true },] }],
        operand: [{ type: ViewChild, args: ['operand', { static: false },] }],
        closeButton: [{ type: ViewChild, args: ['closeButton', { static: true },] }],
        cssClass: [{ type: HostBinding, args: ['class.igx-grid__filtering-row',] }],
        onTabKeydown: [{ type: HostListener, args: ['keydown.shift.tab', ['$event'],] }, { type: HostListener, args: ['keydown.tab', ['$event'],] }],
        onEscKeydown: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
    };
    return IgxGridFilteringRowComponent;
}());
export { IgxGridFilteringRowComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype._positionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype._conditionsOverlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype._operatorsOverlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype.chipsAreaWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype.chipAreaScrollOffset;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype._column;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype.isKeyPressed;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype.isComposing;
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringRowComponent.prototype._cancelChipClick;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.showArrows;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.expression;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.expressionsList;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.defaultFilterUI;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.defaultDateUI;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.input;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.dropDownConditions;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.chipsArea;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.dropDownOperators;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.inputGroup;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.inputGroupPrefix;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.container;
    /**
     * @type {?}
     * @protected
     */
    IgxGridFilteringRowComponent.prototype.operand;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.closeButton;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.cssClass;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.filteringService;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.element;
    /** @type {?} */
    IgxGridFilteringRowComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,