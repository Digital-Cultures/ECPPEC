{"ast":null,"code":"import _classCallCheck from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, HostListener, NgModule } from '@angular/core';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { END, ENTER, hasModifierKey, HOME, SPACE } from '@angular/cdk/keycodes';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { of, Subject } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction CdkStep_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nvar CdkStepHeader = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   */\n  function CdkStepHeader(_elementRef) {\n    _classCallCheck(this, CdkStepHeader);\n\n    this._elementRef = _elementRef;\n  }\n  /**\n   * Focuses the step header.\n   * @return {?}\n   */\n\n\n  _createClass(CdkStepHeader, [{\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n  }]);\n\n  return CdkStepHeader;\n}();\n\nCdkStepHeader.ɵfac = function CdkStepHeader_Factory(t) {\n  return new (t || CdkStepHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkStepHeader.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepHeader,\n  selectors: [[\"\", \"cdkStepHeader\", \"\"]],\n  hostAttrs: [\"role\", \"tab\"]\n});\n/** @nocollapse */\n\nCdkStepHeader.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepHeader, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkStepHeader]',\n      host: {\n        'role': 'tab'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CdkStepLabel =\n/**\n * @param {?} template\n */\nfunction CdkStepLabel(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkStepLabel);\n\n  this.template = template;\n};\n\nCdkStepLabel.ɵfac = function CdkStepLabel_Factory(t) {\n  return new (t || CdkStepLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkStepLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepLabel,\n  selectors: [[\"\", \"cdkStepLabel\", \"\"]]\n});\n/** @nocollapse */\n\nCdkStepLabel.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepLabel, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkStepLabel]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each stepper component.\n * @type {?}\n */\n\n\nvar nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\n\nvar StepperSelectionEvent = function StepperSelectionEvent() {\n  _classCallCheck(this, StepperSelectionEvent);\n};\n/**\n * Enum to represent the different states of the steps.\n * @type {?}\n */\n\n\nvar STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @type {?}\n */\n\nvar STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * \\@breaking-change 8.0.0.\n * @type {?}\n */\n\nvar MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n\nvar CdkStep = /*#__PURE__*/function () {\n  /**\n   * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n   * @param {?} _stepper\n   * @param {?=} stepperOptions\n   */\n  function CdkStep(_stepper, stepperOptions) {\n    _classCallCheck(this, CdkStep);\n\n    this._stepper = _stepper;\n    /**\n     * Whether user has seen the expanded step content or not.\n     */\n\n    this.interacted = false;\n    this._editable = true;\n    this._optional = false;\n    this._completedOverride = null;\n    this._customError = null;\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n  /**\n   * Whether the user can return to this step once it has been marked as completed.\n   * @return {?}\n   */\n\n\n  _createClass(CdkStep, [{\n    key: \"_getDefaultCompleted\",\n\n    /**\n     * @private\n     * @return {?}\n     */\n    value: function _getDefaultCompleted() {\n      return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /**\n     * Whether step has an error.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDefaultError\",\n\n    /**\n     * @private\n     * @return {?}\n     */\n    value: function _getDefaultError() {\n      return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      this._stepper.selected = this;\n    }\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.interacted = false;\n\n      if (this._completedOverride != null) {\n        this._completedOverride = false;\n      }\n\n      if (this._customError != null) {\n        this._customError = false;\n      }\n\n      if (this.stepControl) {\n        this.stepControl.reset();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      // Since basically all inputs of the MatStep get proxied through the view down to the\n      // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n      this._stepper._stateChanged();\n    }\n  }, {\n    key: \"editable\",\n    get: function get() {\n      return this._editable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._editable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the completion of step is optional.\n     * @return {?}\n     */\n\n  }, {\n    key: \"optional\",\n    get: function get() {\n      return this._optional;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._optional = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether step is marked as completed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"completed\",\n    get: function get() {\n      return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._completedOverride = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"hasError\",\n    get: function get() {\n      return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._customError = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return CdkStep;\n}();\n\nCdkStep.ɵfac = function CdkStep_Factory(t) {\n  return new (t || CdkStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return CdkStepper;\n  })), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8));\n};\n\nCdkStep.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkStep,\n  selectors: [[\"cdk-step\"]],\n  contentQueries: function CdkStep_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepLabel, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    }\n  },\n  viewQuery: function CdkStep_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    }\n  },\n  inputs: {\n    editable: \"editable\",\n    optional: \"optional\",\n    completed: \"completed\",\n    hasError: \"hasError\",\n    stepControl: \"stepControl\",\n    label: \"label\",\n    errorMessage: \"errorMessage\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    state: \"state\"\n  },\n  exportAs: [\"cdkStep\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CdkStep_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, CdkStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkStep.ctorParameters = function () {\n  return [{\n    type: CdkStepper,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return CdkStepper;\n      })]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [STEPPER_GLOBAL_OPTIONS]\n    }]\n  }];\n};\n\nCdkStep.propDecorators = {\n  stepLabel: [{\n    type: ContentChild,\n    args: [CdkStepLabel, {\n      static: false\n    }]\n  }],\n  content: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  stepControl: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  errorMessage: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  state: [{\n    type: Input\n  }],\n  editable: [{\n    type: Input\n  }],\n  optional: [{\n    type: Input\n  }],\n  completed: [{\n    type: Input\n  }],\n  hasError: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStep, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-step',\n      exportAs: 'cdkStep',\n      template: '<ng-template><ng-content></ng-content></ng-template>',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(\n        /**\n         * @return {?}\n         */\n        function () {\n          return CdkStepper;\n        })]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [STEPPER_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    editable: [{\n      type: Input\n    }],\n    optional: [{\n      type: Input\n    }],\n    completed: [{\n      type: Input\n    }],\n    hasError: [{\n      type: Input\n    }],\n    stepLabel: [{\n      type: ContentChild,\n      args: [CdkStepLabel, {\n        static: false\n      }]\n    }],\n    content: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    stepControl: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    errorMessage: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    state: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CdkStepper = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dir\n   * @param {?} _changeDetectorRef\n   * @param {?=} _elementRef\n   * @param {?=} _document\n   */\n  function CdkStepper(_dir, _changeDetectorRef, _elementRef, _document) {\n    _classCallCheck(this, CdkStepper);\n\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    this._linear = false;\n    this._selectedIndex = 0;\n    /**\n     * Event emitted when the selected step has changed.\n     */\n\n    this.selectionChange = new EventEmitter();\n    this._orientation = 'horizontal';\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n  /**\n   * The list of step components that the stepper is holding.\n   * @return {?}\n   */\n\n\n  _createClass(CdkStepper, [{\n    key: \"ngAfterViewInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      // Note that while the step headers are content children by default, any components that\n      // extend this one might have them as view chidren. We initialize the keyboard handling in\n      // AfterViewInit so we're guaranteed for both view and content children to be defined.\n      this._keyManager = new FocusKeyManager(this._stepHeader).withWrap().withVerticalOrientation(this._orientation === 'vertical');\n      (this._dir ?\n      /** @type {?} */\n      this._dir.change : of()).pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} direction\n      * @return {?}\n      */\n      function (direction) {\n        return _this._keyManager.withHorizontalOrientation(direction);\n      });\n\n      this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n      this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (!_this.selected) {\n          _this._selectedIndex = Math.max(_this._selectedIndex - 1, 0);\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._updateSelectedItemIndex(0);\n\n      this.steps.forEach(\n      /**\n      * @param {?} step\n      * @return {?}\n      */\n      function (step) {\n        return step.reset();\n      });\n\n      this._stateChanged();\n    }\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStepLabelId\",\n    value: function _getStepLabelId(i) {\n      return \"cdk-step-label-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getStepContentId\",\n    value: function _getStepContentId(i) {\n      return \"cdk-step-content-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_stateChanged\",\n    value: function _stateChanged() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationDirection\",\n    value: function _getAnimationDirection(index) {\n      /** @type {?} */\n      var position = index - this._selectedIndex;\n\n      if (position < 0) {\n        return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n      } else if (position > 0) {\n        return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n      }\n\n      return 'current';\n    }\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @param {?=} state\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getIndicatorType\",\n    value: function _getIndicatorType(index) {\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STEP_STATE.NUMBER;\n\n      /** @type {?} */\n      var step = this.steps.toArray()[index];\n      /** @type {?} */\n\n      var isCurrentStep = this._isCurrentStep(index);\n\n      return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) : this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDefaultIndicatorLogic\",\n    value: function _getDefaultIndicatorLogic(step, isCurrentStep) {\n      if (step._showError && step.hasError && !isCurrentStep) {\n        return STEP_STATE.ERROR;\n      } else if (!step.completed || isCurrentStep) {\n        return STEP_STATE.NUMBER;\n      } else {\n        return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n      }\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @param {?=} state\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getGuidelineLogic\",\n    value: function _getGuidelineLogic(step, isCurrentStep) {\n      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STEP_STATE.NUMBER;\n\n      if (step._showError && step.hasError && !isCurrentStep) {\n        return STEP_STATE.ERROR;\n      } else if (step.completed && !isCurrentStep) {\n        return STEP_STATE.DONE;\n      } else if (step.completed && isCurrentStep) {\n        return state;\n      } else if (step.editable && isCurrentStep) {\n        return STEP_STATE.EDIT;\n      } else {\n        return state;\n      }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isCurrentStep\",\n    value: function _isCurrentStep(index) {\n      return this._selectedIndex === index;\n    }\n    /**\n     * Returns the index of the currently-focused step header.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getFocusIndex\",\n    value: function _getFocusIndex() {\n      return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    /**\n     * @private\n     * @param {?} newIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateSelectedItemIndex\",\n    value: function _updateSelectedItemIndex(newIndex) {\n      /** @type {?} */\n      var stepsArray = this.steps.toArray();\n      this.selectionChange.emit({\n        selectedIndex: newIndex,\n        previouslySelectedIndex: this._selectedIndex,\n        selectedStep: stepsArray[newIndex],\n        previouslySelectedStep: stepsArray[this._selectedIndex]\n      }); // If focus is inside the stepper, move it to the next header, otherwise it may become\n      // lost when the active step content is hidden. We can't be more granular with the check\n      // (e.g. checking whether focus is inside the active step), because we don't have a\n      // reference to the elements that are rendering out the content.\n\n      this._containsFocus() ? this._keyManager.setActiveItem(newIndex) : this._keyManager.updateActiveItemIndex(newIndex);\n      this._selectedIndex = newIndex;\n\n      this._stateChanged();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      /** @type {?} */\n      var hasModifier = hasModifierKey(event);\n      /** @type {?} */\n\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      if (manager.activeItemIndex != null && !hasModifier && (keyCode === SPACE || keyCode === ENTER)) {\n        this.selectedIndex = manager.activeItemIndex;\n        event.preventDefault();\n      } else if (keyCode === HOME) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      } else if (keyCode === END) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_anyControlsInvalidOrPending\",\n    value: function _anyControlsInvalidOrPending(index) {\n      /** @type {?} */\n      var steps = this.steps.toArray();\n      steps[this._selectedIndex].interacted = true;\n\n      if (this._linear && index >= 0) {\n        return steps.slice(0, index).some(\n        /**\n        * @param {?} step\n        * @return {?}\n        */\n        function (step) {\n          /** @type {?} */\n          var control = step.stepControl;\n          /** @type {?} */\n\n          var isIncomplete = control ? control.invalid || control.pending || !step.interacted : !step.completed;\n          return isIncomplete && !step.optional && !step._completedOverride;\n        });\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutDirection\",\n    value: function _layoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Checks whether the stepper contains the focused element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (!this._document || !this._elementRef) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var stepperElement = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var focusedElement = this._document.activeElement;\n      return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n  }, {\n    key: \"steps\",\n    get: function get() {\n      return this._steps;\n    }\n    /**\n     * Whether the validity of previous steps should be checked or not.\n     * @return {?}\n     */\n\n  }, {\n    key: \"linear\",\n    get: function get() {\n      return this._linear;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._linear = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the selected step.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ,\n    set: function set(index) {\n      /** @type {?} */\n      var newIndex = coerceNumberProperty(index);\n\n      if (this.steps) {\n        // Ensure that the index can't be out of bounds.\n        if (newIndex < 0 || newIndex > this.steps.length - 1) {\n          throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n        }\n\n        if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) && (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n          this._updateSelectedItemIndex(index);\n        }\n      } else {\n        this._selectedIndex = newIndex;\n      }\n    }\n    /**\n     * The step that is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n      return this.steps ? this.steps.toArray()[this.selectedIndex] :\n      /** @type {?} */\n      undefined;\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    ,\n    set: function set(step) {\n      this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n  }]);\n\n  return CdkStepper;\n}();\n\nCdkStepper.ɵfac = function CdkStepper_Factory(t) {\n  return new (t || CdkStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkStepper.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepper,\n  selectors: [[\"\", \"cdkStepper\", \"\"]],\n  contentQueries: function CdkStepper_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStep, 0);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepHeader, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n    }\n  },\n  inputs: {\n    linear: \"linear\",\n    selectedIndex: \"selectedIndex\",\n    selected: \"selected\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\"\n  },\n  exportAs: [\"cdkStepper\"]\n});\n/** @nocollapse */\n\nCdkStepper.ctorParameters = function () {\n  return [{\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkStepper.propDecorators = {\n  _steps: [{\n    type: ContentChildren,\n    args: [CdkStep]\n  }],\n  _stepHeader: [{\n    type: ContentChildren,\n    args: [CdkStepHeader]\n  }],\n  linear: [{\n    type: Input\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepper, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkStepper]',\n      exportAs: 'cdkStepper'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    linear: [{\n      type: Input\n    }],\n    selectedIndex: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    _steps: [{\n      type: ContentChildren,\n      args: [CdkStep]\n    }],\n    _stepHeader: [{\n      type: ContentChildren,\n      args: [CdkStepHeader]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Button that moves to the next step in a stepper workflow.\n */\n\n\nvar CdkStepperNext = /*#__PURE__*/function () {\n  /**\n   * @param {?} _stepper\n   */\n  function CdkStepperNext(_stepper) {\n    _classCallCheck(this, CdkStepperNext);\n\n    this._stepper = _stepper;\n    /**\n     * Type of the next button. Defaults to \"submit\" if not specified.\n     */\n\n    this.type = 'submit';\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkStepperNext, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      this._stepper.next();\n    }\n  }]);\n\n  return CdkStepperNext;\n}();\n\nCdkStepperNext.ɵfac = function CdkStepperNext_Factory(t) {\n  return new (t || CdkStepperNext)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n};\n\nCdkStepperNext.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepperNext,\n  selectors: [[\"button\", \"cdkStepperNext\", \"\"]],\n  hostVars: 1,\n  hostBindings: function CdkStepperNext_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkStepperNext_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\"\n  }\n});\n/** @nocollapse */\n\nCdkStepperNext.ctorParameters = function () {\n  return [{\n    type: CdkStepper\n  }];\n};\n\nCdkStepperNext.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  _handleClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperNext, [{\n    type: Directive,\n    args: [{\n      selector: 'button[cdkStepperNext]',\n      host: {\n        '[type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    /**\n     * @return {?}\n     */\n    _handleClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\n\n\nvar CdkStepperPrevious = /*#__PURE__*/function () {\n  /**\n   * @param {?} _stepper\n   */\n  function CdkStepperPrevious(_stepper) {\n    _classCallCheck(this, CdkStepperPrevious);\n\n    this._stepper = _stepper;\n    /**\n     * Type of the previous button. Defaults to \"button\" if not specified.\n     */\n\n    this.type = 'button';\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkStepperPrevious, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      this._stepper.previous();\n    }\n  }]);\n\n  return CdkStepperPrevious;\n}();\n\nCdkStepperPrevious.ɵfac = function CdkStepperPrevious_Factory(t) {\n  return new (t || CdkStepperPrevious)(ɵngcc0.ɵɵdirectiveInject(CdkStepper));\n};\n\nCdkStepperPrevious.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkStepperPrevious,\n  selectors: [[\"button\", \"cdkStepperPrevious\", \"\"]],\n  hostVars: 1,\n  hostBindings: function CdkStepperPrevious_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkStepperPrevious_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\"\n  }\n});\n/** @nocollapse */\n\nCdkStepperPrevious.ctorParameters = function () {\n  return [{\n    type: CdkStepper\n  }];\n};\n\nCdkStepperPrevious.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  _handleClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperPrevious, [{\n    type: Directive,\n    args: [{\n      selector: 'button[cdkStepperPrevious]',\n      host: {\n        '[type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkStepper\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n    /**\n     * @return {?}\n     */\n    _handleClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CdkStepperModule = function CdkStepperModule() {\n  _classCallCheck(this, CdkStepperModule);\n};\n\nCdkStepperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkStepperModule\n});\nCdkStepperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkStepperModule_Factory(t) {\n    return new (t || CdkStepperModule)();\n  },\n  imports: [[BidiModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkStepperModule, {\n    declarations: function declarations() {\n      return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule];\n    },\n    exports: function exports() {\n      return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, CommonModule],\n      exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n      declarations: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { StepperSelectionEvent, STEP_STATE, STEPPER_GLOBAL_OPTIONS, MAT_STEPPER_GLOBAL_OPTIONS, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule, CdkStepHeader };","map":{"version":3,"sources":["../../../src/cdk/stepper/step-header.ts","../../../src/cdk/stepper/step-label.ts","../../../src/cdk/stepper/stepper.ts","../../../src/cdk/stepper/stepper-button.ts","../../../src/cdk/stepper/stepper-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {FocusableOption} from '@angular/cdk/a11y';\n\n\n@Directive({\n  selector: '[cdkStepHeader]',\n  host: {\n    'role': 'tab',\n  },\n})\nexport class CdkStepHeader implements FocusableOption {\n  constructor(protected _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, hasModifierKey, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, of as obaservableOf, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {CdkStepHeader} from './step-header';\nimport {CdkStepLabel} from './step-label';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous'|'current'|'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal'|'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number'|'edit'|'done'|'error'|string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const STEPPER_GLOBAL_OPTIONS = new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\n\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\nexport const MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _showError: boolean;\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel, {static: false}) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: FormControlLike;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input() state: StepState;\n\n  /** Whether the user can return to this step once it has been marked as completed. */\n  @Input()\n  get editable(): boolean {\n    return this._editable;\n  }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean {\n    return this._optional;\n  }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n  }\n  set completed(value: boolean) {\n    this._completedOverride = coerceBooleanProperty(value);\n  }\n  _completedOverride: boolean|null = null;\n\n  private _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  /** Whether step has an error. */\n  @Input()\n  get hasError(): boolean {\n    return this._customError == null ? this._getDefaultError() : this._customError;\n  }\n  set hasError(value: boolean) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  private _customError: boolean|null = null;\n\n  private _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(\n      @Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper,\n      @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this.interacted = false;\n\n    if (this._completedOverride != null) {\n      this._completedOverride = false;\n    }\n\n    if (this._customError != null) {\n      this._customError = false;\n    }\n\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterViewInit, OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption>;\n\n  /**\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\n   * constructor param is required.\n   */\n  private _document: Document|undefined;\n\n  /**\n   * The list of step components that the stepper is holding.\n   * @deprecated use `steps` instead\n   * @breaking-change 9.0.0 remove this property\n   */\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\n\n  /** The list of step components that the stepper is holding. */\n  get steps(): QueryList<CdkStep> {\n    return this._steps;\n  }\n\n  /**\n   * The list of step headers of the steps in the stepper.\n   * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(CdkStepHeader) _stepHeader: QueryList<FocusableOption>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean {\n    return this._linear;\n  }\n  set linear(value: boolean) {\n    this._linear = coerceBooleanProperty(value);\n  }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  set selectedIndex(index: number) {\n    const newIndex = coerceNumberProperty(index);\n\n    if (this.steps) {\n      // Ensure that the index can't be out of bounds.\n      if (newIndex < 0 || newIndex > this.steps.length - 1) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n          (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = newIndex;\n    }\n  }\n  private _selectedIndex = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep {\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined!;\n  }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output()\n  selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter<StepperSelectionEvent>();\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  protected _orientation: StepperOrientation = 'horizontal';\n\n  constructor(\n      @Optional() private _dir: Directionality, private _changeDetectorRef: ChangeDetectorRef,\n      // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n      private _elementRef?: ElementRef<HTMLElement>, @Inject(DOCUMENT) _document?: any) {\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n\n  ngAfterViewInit() {\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view chidren. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._stepHeader)\n                           .withWrap()\n                           .withVerticalOrientation(this._orientation === 'vertical');\n\n    (this._dir ? (this._dir.change as Observable<Direction>) : obaservableOf<Direction>())\n        .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n        .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n    this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\n    const step = this.steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n\n    return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n                                               this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n\n  private _getGuidelineLogic(\n      step: CdkStep, isCurrentStep: boolean, state: StepState = STEP_STATE.NUMBER): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n\n  private _isCurrentStep(index: number) {\n    return this._selectedIndex === index;\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this.steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                            this._keyManager.updateActiveItemIndex(newIndex);\n\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    if (manager.activeItemIndex != null && !hasModifier &&\n        (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      manager.onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this.steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete =\n            control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n        return isIncomplete && !step.optional && !step._completedOverride;\n      });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    if (!this._document || !this._elementRef) {\n      return false;\n    }\n\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n}\n\n\n/**\n * Simplified representation of a FormControl from @angular/forms.\n * Used to avoid having to bring in @angular/forms for a single optional interface.\n * @docs-private\n */\ninterface FormControlLike {\n  asyncValidator: () => any | null;\n  dirty: boolean;\n  disabled: boolean;\n  enabled: boolean;\n  errors: {[key: string]: any} | null;\n  invalid: boolean;\n  parent: any;\n  pending: boolean;\n  pristine: boolean;\n  root: FormControlLike;\n  status: string;\n  statusChanges: Observable<any>;\n  touched: boolean;\n  untouched: boolean;\n  updateOn: any;\n  valid: boolean;\n  validator: () => any | null;\n  value: any;\n  valueChanges: Observable<any>;\n  clearAsyncValidators(): void;\n  clearValidators(): void;\n  disable(opts?: any): void;\n  enable(opts?: any): void;\n  get(path: (string | number)[] | string): FormControlLike | null;\n  getError(errorCode: string, path?: (string | number)[] | string): any;\n  hasError(errorCode: string, path?: (string | number)[] | string): boolean;\n  markAllAsTouched(): void;\n  markAsDirty(opts?: any): void;\n  markAsPending(opts?: any): void;\n  markAsPristine(opts?: any): void;\n  markAsTouched(opts?: any): void;\n  markAsUntouched(opts?: any): void;\n  patchValue(value: any, options?: Object): void;\n  reset(value?: any, options?: Object): void;\n  setAsyncValidators(newValidator: () => any | (() => any)[] | null): void;\n  setErrors(errors: {[key: string]: any} | null, opts?: any): void;\n  setParent(parent: any): void;\n  setValidators(newValidator: () => any | (() => any)[] | null): void;\n  setValue(value: any, options?: Object): void;\n  updateValueAndValidity(opts?: any): void;\n  patchValue(value: any, options?: any): void;\n  registerOnChange(fn: Function): void;\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n  reset(formState?: any, options?: any): void;\n  setValue(value: any, options?: any): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperNext {\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.next();\n  }\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperPrevious {\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.previous();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {CdkStepHeader} from './step-header';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule, CommonModule],\n  exports: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ],\n  declarations: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ]\n})\nexport class CdkStepperModule {}\n"]},"metadata":{},"sourceType":"module"}