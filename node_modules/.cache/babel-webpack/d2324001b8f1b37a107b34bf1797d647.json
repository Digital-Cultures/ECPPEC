{"ast":null,"code":"import _createClass from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ntws2/Dropbox/htdocs/ECCPEC_code/SITE_VERSIONS/ECPPEC/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nvar _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nvar BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n * @type {?}\n */\n\nvar BASE_STROKE_WIDTH = 10; // Boilerplate for applying mixins to MatProgressSpinner.\n\n/**\n * \\@docs-private\n */\n\nvar MatProgressSpinnerBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatProgressSpinnerBase(_elementRef) {\n  _classCallCheck(this, MatProgressSpinnerBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n * @type {?}\n */\n\n\nvar MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n} // .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n\n/** @type {?} */\n\n\nvar INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n/**\n * `<mat-progress-spinner>` component.\n */\n\nvar MatProgressSpinner = /*#__PURE__*/function (_MatProgressSpinnerMi) {\n  _inherits(MatProgressSpinner, _MatProgressSpinnerMi);\n\n  var _super = _createSuper(MatProgressSpinner);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} platform\n   * @param {?} _document\n   * @param {?} animationMode\n   * @param {?=} defaults\n   */\n  function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatProgressSpinner);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._document = _document;\n    _this._diameter = BASE_SIZE;\n    _this._value = 0;\n    _this._fallbackAnimation = false;\n    /**\n     * Mode of the progress circle\n     */\n\n    _this.mode = 'determinate';\n    /** @type {?} */\n\n    var trackedDiameters = MatProgressSpinner._diameters; // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n    }\n\n    _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    _this._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        _this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        _this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * The diameter of the progress spinner (will set width and height of svg).\n   * @return {?}\n   */\n\n\n  _createClass(MatProgressSpinner, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement; // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n      // Angular seems to create the element outside the shadow root and then moves it inside, if the\n      // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n\n      this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n\n      this._attachStyleNode(); // On IE and Edge, we can't animate the `stroke-dashoffset`\n      // reliably so we fall back to a non-spec animation.\n\n      /** @type {?} */\n\n\n      var animationClass = \"mat-progress-spinner-indeterminate\".concat(this._fallbackAnimation ? '-fallback' : '', \"-animation\");\n      element.classList.add(animationClass);\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachStyleNode\",\n\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @private\n     * @return {?}\n     */\n    value: function _attachStyleNode() {\n      /** @type {?} */\n      var styleRoot = this._styleRoot;\n      /** @type {?} */\n\n      var currentDiameter = this._diameter;\n      /** @type {?} */\n\n      var diameters = MatProgressSpinner._diameters;\n      /** @type {?} */\n\n      var diametersForElement = diameters.get(styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n        /** @type {?} */\n        var styleTag = this._document.createElement('style');\n\n        styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n        styleTag.textContent = this._getAnimationText();\n        styleRoot.appendChild(styleTag);\n\n        if (!diametersForElement) {\n          diametersForElement = new Set();\n          diameters.set(styleRoot, diametersForElement);\n        }\n\n        diametersForElement.add(currentDiameter);\n      }\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationText\",\n    value: function _getAnimationText() {\n      return INDETERMINATE_ANIMATION_TEMPLATE // Animation should begin at 5% and end at 80%\n      .replace(/START_VALUE/g, \"\".concat(0.95 * this._strokeCircumference)).replace(/END_VALUE/g, \"\".concat(0.2 * this._strokeCircumference)).replace(/DIAMETER/g, \"\".concat(this.diameter));\n    }\n  }, {\n    key: \"diameter\",\n    get: function get() {\n      return this._diameter;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    ,\n    set: function set(size) {\n      this._diameter = coerceNumberProperty(size); // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n\n      if (!this._fallbackAnimation && this._styleRoot) {\n        this._attachStyleNode();\n      }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n\n  }, {\n    key: \"strokeWidth\",\n    get: function get() {\n      return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n  }, {\n    key: \"_circleRadius\",\n    get: function get() {\n      return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_viewBox\",\n    get: function get() {\n      /** @type {?} */\n      var viewBox = this._circleRadius * 2 + this.strokeWidth;\n      return \"0 0 \".concat(viewBox, \" \").concat(viewBox);\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_strokeCircumference\",\n    get: function get() {\n      return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_strokeDashOffset\",\n    get: function get() {\n      if (this.mode === 'determinate') {\n        return this._strokeCircumference * (100 - this._value) / 100;\n      } // In fallback mode set the circle to 80% and rotate it with CSS.\n\n\n      if (this._fallbackAnimation && this.mode === 'indeterminate') {\n        return this._strokeCircumference * 0.2;\n      }\n\n      return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_circleStrokeWidth\",\n    get: function get() {\n      return this.strokeWidth / this.diameter * 100;\n    }\n  }]);\n\n  return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase);\n\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {\n  return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\n\nMatProgressSpinner._diameters = new WeakMap();\n/** @nocollapse */\n\nMatProgressSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatProgressSpinner.propDecorators = {\n  diameter: [{\n    type: Input\n  }],\n  strokeWidth: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        'class': 'mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    mode: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n\n\nvar MatSpinner = /*#__PURE__*/function (_MatProgressSpinner) {\n  _inherits(MatSpinner, _MatProgressSpinner);\n\n  var _super2 = _createSuper(MatSpinner);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} platform\n   * @param {?} document\n   * @param {?} animationMode\n   * @param {?=} defaults\n   */\n  function MatSpinner(elementRef, platform, document, animationMode, defaults) {\n    var _this2;\n\n    _classCallCheck(this, MatSpinner);\n\n    _this2 = _super2.call(this, elementRef, platform, document, animationMode, defaults);\n    _this2.mode = 'indeterminate';\n    return _this2;\n  }\n\n  return MatSpinner;\n}(MatProgressSpinner);\n\nMatSpinner.ɵfac = function MatSpinner_Factory(t) {\n  return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSpinner,\n  selectors: [[\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"],\n  hostVars: 6,\n  hostBindings: function MatSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-spinner',\n      host: {\n        'role': 'progressbar',\n        'mode': 'indeterminate',\n        'class': 'mat-spinner mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction _getShadowRoot(element, _document) {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    /** @type {?} */\n    var head = _document.head; // Check whether the browser supports Shadow DOM.\n\n    if (head && (\n    /** @type {?} */\n    head.createShadowRoot || head.attachShadow)) {\n      /** @type {?} */\n      var rootNode = element.getRootNode ? element.getRootNode() : null; // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n\n      if (rootNode instanceof\n      /** @type {?} */\n      window.ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatProgressSpinnerModule = function MatProgressSpinnerModule() {\n  _classCallCheck(this, MatProgressSpinnerModule);\n};\n\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressSpinnerModule\n});\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatProgressSpinnerModule_Factory(t) {\n    return new (t || MatProgressSpinnerModule)();\n  },\n  imports: [[MatCommonModule, CommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, {\n    declarations: function declarations() {\n      return [MatProgressSpinner, MatSpinner];\n    },\n    imports: function imports() {\n      return [MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressSpinner, MatSpinner, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n      declarations: [MatProgressSpinner, MatSpinner]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatProgressSpinner, MatSpinner, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerModule };","map":{"version":3,"sources":["../../../src/material/progress-spinner/progress-spinner.ts","../../../src/material/progress-spinner/progress-spinner-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n"]},"metadata":{},"sourceType":"module"}