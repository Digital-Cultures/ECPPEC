import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { WalkthroughComponent } from '../components/walkthrough.component/walkthrough.component';
import { NgModule } from '@angular/core';
let WalkthroughModule = WalkthroughModule_1 = 
// Consider registering providers using a forRoot() method
// when the module exports components, directives or pipes that require sharing the same providers instances.
// Consider registering providers also using a forChild() method
// when they requires new providers instances or different providers in child modules.
class WalkthroughModule {
    /**
     * Use in AppModule: new instance of SumService.
     */
    static forRoot() {
        return {
            ngModule: WalkthroughModule_1,
            providers: []
        };
    }
    /**
     * Use in features modules with lazy loading: new instance of SumService.
     */
    static forChild() {
        return {
            ngModule: WalkthroughModule_1,
            providers: []
        };
    }
};
WalkthroughModule = WalkthroughModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [
            // Pipes.
            // Directives.
            // Components.
            WalkthroughComponent
        ],
        imports: [
            CommonModule
        ],
        exports: [
            // Pipes.
            // Directives.
            // Components.
            WalkthroughComponent
        ]
    })
    // Consider registering providers using a forRoot() method
    // when the module exports components, directives or pipes that require sharing the same providers instances.
    // Consider registering providers also using a forChild() method
    // when they requires new providers instances or different providers in child modules.
], WalkthroughModule);
export { WalkthroughModule };
var WalkthroughModule_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fsa3Rocm91Z2gubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdhbGt0aHJvdWdoLyIsInNvdXJjZXMiOlsibW9kdWxlcy93YWxrdGhyb3VnaC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQXdCOUQsSUFBYSxpQkFBaUI7QUFKOUIsMERBQTBEO0FBQzFELDZHQUE2RztBQUM3RyxnRUFBZ0U7QUFDaEUsc0ZBQXNGO0FBQ3RGO0lBRUk7O09BRUc7SUFDSSxNQUFNLENBQUMsT0FBTztRQUNqQixNQUFNLENBQUM7WUFDSCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRSxFQUFFO1NBQ2hCLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsUUFBUTtRQUNsQixNQUFNLENBQUM7WUFDSCxRQUFRLEVBQUUsbUJBQWlCO1lBQzNCLFNBQVMsRUFBRSxFQUFFO1NBQ2hCLENBQUM7SUFDTixDQUFDO0NBRUosQ0FBQTtBQXRCWSxpQkFBaUI7SUFyQjdCLFFBQVEsQ0FBQztRQUNOLFlBQVksRUFBRTtZQUNWLFNBQVM7WUFDVCxjQUFjO1lBQ2QsY0FBYztZQUNkLG9CQUFvQjtTQUN2QjtRQUNELE9BQU8sRUFBRTtZQUNMLFlBQVk7U0FDZjtRQUNELE9BQU8sRUFBRTtZQUNMLFNBQVM7WUFDVCxjQUFjO1lBQ2QsY0FBYztZQUNkLG9CQUFvQjtTQUN2QjtLQUNKLENBQUM7SUFDRiwwREFBMEQ7SUFDMUQsNkdBQTZHO0lBQzdHLGdFQUFnRTtJQUNoRSxzRkFBc0Y7R0FDekUsaUJBQWlCLENBc0I3QjtTQXRCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcm93c2VyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgV2Fsa3Rocm91Z2hDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3dhbGt0aHJvdWdoLmNvbXBvbmVudC93YWxrdGhyb3VnaC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAvLyBQaXBlcy5cbiAgICAgICAgLy8gRGlyZWN0aXZlcy5cbiAgICAgICAgLy8gQ29tcG9uZW50cy5cbiAgICAgICAgV2Fsa3Rocm91Z2hDb21wb25lbnRcbiAgICBdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIC8vIFBpcGVzLlxuICAgICAgICAvLyBEaXJlY3RpdmVzLlxuICAgICAgICAvLyBDb21wb25lbnRzLlxuICAgICAgICBXYWxrdGhyb3VnaENvbXBvbmVudFxuICAgIF1cbn0pXG4vLyBDb25zaWRlciByZWdpc3RlcmluZyBwcm92aWRlcnMgdXNpbmcgYSBmb3JSb290KCkgbWV0aG9kXG4vLyB3aGVuIHRoZSBtb2R1bGUgZXhwb3J0cyBjb21wb25lbnRzLCBkaXJlY3RpdmVzIG9yIHBpcGVzIHRoYXQgcmVxdWlyZSBzaGFyaW5nIHRoZSBzYW1lIHByb3ZpZGVycyBpbnN0YW5jZXMuXG4vLyBDb25zaWRlciByZWdpc3RlcmluZyBwcm92aWRlcnMgYWxzbyB1c2luZyBhIGZvckNoaWxkKCkgbWV0aG9kXG4vLyB3aGVuIHRoZXkgcmVxdWlyZXMgbmV3IHByb3ZpZGVycyBpbnN0YW5jZXMgb3IgZGlmZmVyZW50IHByb3ZpZGVycyBpbiBjaGlsZCBtb2R1bGVzLlxuZXhwb3J0IGNsYXNzIFdhbGt0aHJvdWdoTW9kdWxlIHtcblxuICAgIC8qKlxuICAgICAqIFVzZSBpbiBBcHBNb2R1bGU6IG5ldyBpbnN0YW5jZSBvZiBTdW1TZXJ2aWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBXYWxrdGhyb3VnaE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW11cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgaW4gZmVhdHVyZXMgbW9kdWxlcyB3aXRoIGxhenkgbG9hZGluZzogbmV3IGluc3RhbmNlIG9mIFN1bVNlcnZpY2UuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBmb3JDaGlsZCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBXYWxrdGhyb3VnaE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW11cbiAgICAgICAgfTtcbiAgICB9XG5cbn1cbiJdfQ==