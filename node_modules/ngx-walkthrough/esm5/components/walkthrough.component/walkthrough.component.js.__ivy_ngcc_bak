import * as tslib_1 from "tslib";
import { Swipe_Up } from './icons/Swipe_Up';
import { Swipe_Right } from './icons/Swipe_Right';
import { Swipe_Left } from './icons/Swipe_Left';
import { Swipe_Down } from './icons/Swipe_Down';
import { Double_Tap } from './icons/Double_Tap';
import { Single_Tap } from './icons/Single_Tap';
import { Hotspot_Close } from './icons/Hotspot_Close';
import { Component, Input, Output, HostListener, ElementRef, EventEmitter, ViewChild } from '@angular/core';
var ZINDEX_NOT_SET = '-99999';
var WalkthroughComponent = /** @class */ (function () {
    function WalkthroughComponent() {
        this._focusElementZindexes = [];
        this.DOM_WALKTHROUGH_CLASS = 'walkthrough-background';
        this.DOM_WALKTHROUGH_TRANSPARENCY_TEXT_CLASS = '.walkthrough-text';
        this.DOM_WALKTHROUGH_TIP_TEXT_CLASS = '.walkthrough-tip-text-box';
        this.DOM_WALKTHROUGH_HOLE_CLASS = '.walkthrough-hole';
        this.DOM_WALKTHROUGH_TRANSPARENCY_ICON_CLASS = '.walkthrough-icon';
        this.DOM_WALKTHROUGH_TIP_ICON_CLASS = '.walkthrough-tip-icon-text-box';
        this.DOM_WALKTHROUGH_ARROW_CLASS = '.walkthrough-arrow';
        this.DOM_WALKTHROUGH_DONE_BUTTON_CLASS = 'walkthrough-done-button';
        this.DOM_TRANSCLUDE = 'walkthrough-transclude';
        this.BUTTON_CAPTION_DONE = 'Got it!';
        this.PADDING_HOLE = 5;
        this.PADDING_ARROW_START = 5;
        this.PADDING_ARROW_MARKER = 25;
        this.isVisible = false;
        this.hasTransclude = false;
        // single_tap: string = require('../assets/Single_Tap.png');
        // double_tap: string = require('../assets/Double_Tap.png');
        // swipe_down: string = require('../assets/Swipe_Down.png');
        // swipe_left: string = require('../assets/Swipe_Left.png');
        // swipe_right: string = require('../assets/Swipe_Right.png');
        // swipe_up: string = require('../assets/Swipe_Up.png');
        // the element have been separated as ionic pro cannot handle class with very large string
        this.single_tap = new Single_Tap().single_tap;
        this.double_tap = new Double_Tap().double_tap;
        this.swipe_down = new Swipe_Down().swipe_down;
        this.swipe_left = new Swipe_Left().swipe_left;
        this.swipe_right = new Swipe_Right().swipe_right;
        this.swipe_up = new Swipe_Up().swipe_up;
        this.useButton = false;
        this.hasGlow = false;
        this.isRound = false;
        this.iconPaddingLeft = '';
        this.iconPaddingTop = '';
        this.focusElementSelector = '';
        this.focusElementInteractive = false;
        this.isActive = false;
        this.onWalkthroughShowEvent = new EventEmitter();
        this.onWalkthroughHideEvent = new EventEmitter();
        this.onWalkthroughContentClickedEvent = new EventEmitter();
    }
    WalkthroughComponent.prototype.onResize = function (event) {
        if (this.isVisible) {
            this.resizeHandler();
        }
    };
    WalkthroughComponent.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (changes.hasOwnProperty(propName)) {
                var change = changes[propName];
                if (propName === 'isActive' && change.currentValue) {
                    this.setWalkthroughElements();
                    this.isVisible = change.currentValue;
                }
            }
        }
    };
    WalkthroughComponent.prototype.ngAfterContentChecked = function () {
        if (this.focusElementSelector && this.isVisible) {
            this.setFocusOnElement();
        }
    };
    /**
     * resize handler method
     */
    WalkthroughComponent.prototype.resizeHandler = function () {
        if (this.focusElementSelector && this.isVisible) {
            this.setFocusOnElement();
        }
    };
    /**
     * init the element of the walkthrough
     */
    WalkthroughComponent.prototype.setWalkthroughElements = function () {
        var _this = this;
        var holeElements = this.element.nativeElement.querySelectorAll(this.DOM_WALKTHROUGH_HOLE_CLASS);
        this.walkthroughHoleElements = holeElements[0];
        var textClass = (this.walkthroughType === 'tip') ? this.DOM_WALKTHROUGH_TIP_TEXT_CLASS : this.DOM_WALKTHROUGH_TRANSPARENCY_TEXT_CLASS;
        this.walkthroughTextElement = this.element.nativeElement.querySelectorAll(textClass)[0];
        var iconClass = (this.walkthroughType === 'tip') ? this.DOM_WALKTHROUGH_TIP_ICON_CLASS : this.DOM_WALKTHROUGH_TRANSPARENCY_ICON_CLASS;
        this.walkthroughIconElement = this.element.nativeElement.querySelectorAll(iconClass)[0];
        this.walkthroughArrowElement = this.element.nativeElement.querySelectorAll(this.DOM_WALKTHROUGH_ARROW_CLASS)[0];
        setTimeout(function () {
            _this.closeIcon = new Hotspot_Close().close_icon;
        }, 100);
        this.walkthroughIcon = this.getIcon(this.walkthroughIconWanted);
        this.buttonCaption = this.buttonCaption || this.BUTTON_CAPTION_DONE;
        if (this.hasBackdrop === undefined) {
            this.hasBackdrop = (this.walkthroughType !== 'tip');
        }
    };
    WalkthroughComponent.prototype.ngAfterViewChecked = function () {
        var translude = this.element.nativeElement.querySelectorAll('.' + this.DOM_TRANSCLUDE);
        if (translude.length > 0 && translude[0].children.length > 0) {
            this.hasTransclude = true;
        }
        if (this.isVisible) {
            this.onWalkthroughShowEvent.emit();
        }
    };
    /**
     * Get the icon specify by the input
     * @param icon
     */
    WalkthroughComponent.prototype.getIcon = function (icon) {
        var retval = '';
        switch (icon) {
            case ('single_tap'):
                retval = this.single_tap;
                break;
            case ('double_tap'):
                retval = this.double_tap;
                break;
            case ('swipe_down'):
                retval = this.swipe_down;
                break;
            case ('swipe_left'):
                retval = this.swipe_left;
                break;
            case ('swipe_right'):
                retval = this.swipe_right;
                break;
            case ('swipe_up'):
                retval = this.swipe_up;
                break;
            case ('arrow'):
                // Return nothing, using other dom element for arrow
                retval = '';
                break;
        }
        if (retval === '' && icon && icon.length > 0) {
            retval = icon;
        }
        else {
            this.toDataURL(retval).then(function (dataUrl) {
                if (typeof dataUrl === 'string') {
                    retval = dataUrl;
                }
            });
        }
        return retval;
    };
    /**
     * Convert url in blob
     * @param url
     */
    WalkthroughComponent.prototype.toDataURL = function (url) {
        return fetch(url)
            .then(function (response) { return response.blob(); })
            .then(function (blob) {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.onloadend = function () {
                    resolve(reader.result);
                    reader.onerror = reject;
                    reader.readAsDataURL(blob);
                };
            });
        });
    };
    /**
     * Set the text position accordint the hole and arrow position plus set the arrow
     * @param pointSubjectLeft
     * @param pointSubjectTop
     * @param pointSubjectWidth
     * @param pointSubjectHeight
     * @param paddingLeft
     */
    WalkthroughComponent.prototype.setArrowAndText = function (pointSubjectLeft, pointSubjectTop, pointSubjectWidth, pointSubjectHeight, paddingLeft) {
        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughTextElement);
        var startLeft = offsetCoordinates.left + offsetCoordinates.width / 2;
        var startTop = offsetCoordinates.top + offsetCoordinates.height + this.PADDING_ARROW_START;
        var endLeft = 0;
        var isLine = false;
        if (Math.abs(startLeft - (pointSubjectLeft + pointSubjectWidth / 2)) < 10) {
            console.warn('Hole element and text are inline line arrow will be used');
            endLeft = pointSubjectLeft + pointSubjectWidth / 2;
            isLine = true;
        }
        else if (startLeft > pointSubjectLeft) {
            // If hole left to text set arrow to point to middle right
            endLeft = pointSubjectLeft + paddingLeft + pointSubjectWidth;
        }
        else if (startLeft < pointSubjectLeft) {
            // If hole right to text set arrow to point to middle left
            endLeft = pointSubjectLeft - paddingLeft;
        }
        var endTop;
        if (isLine) {
            endTop = pointSubjectTop - this.PADDING_ARROW_MARKER;
        }
        else {
            endTop = pointSubjectTop + (pointSubjectHeight / 2);
        }
        var arrowLeft, arrowRight, arrowTop, arrowBottom;
        // Check if text overlaps icon or user explicitly wants text at bottom, if does, move it to bottom
        arrowLeft = (startLeft < endLeft) ? startLeft : endLeft;
        arrowRight = (startLeft < endLeft) ? endLeft : startLeft;
        arrowTop = (startTop < endTop) ? startTop : endTop;
        arrowBottom = (startTop < endTop) ? endTop : startTop;
        if (this.forceCaptionLocation === undefined && this.isItemOnText(arrowLeft, arrowTop, arrowRight, arrowBottom)) {
            this.forceCaptionLocation = 'BOTTOM';
        }
        if (this.forceCaptionLocation === 'BOTTOM') {
            if (isLine) {
                endTop = pointSubjectTop + pointSubjectHeight + this.PADDING_ARROW_MARKER;
            }
            startTop = offsetCoordinates.top - this.PADDING_ARROW_START;
        }
        var arrowSvgDom;
        if (isLine) {
            arrowSvgDom =
                '<svg width="100%" height="100%">' +
                    '<defs>' +
                    '<marker id="arrow" markerWidth="13" markerHeight="13" refx="2" refy="6" orient="auto">' +
                    '<path d="M2,1 L2,10 L10,6 L2,2" style="fill:#fff;" />' +
                    '</marker>' +
                    '</defs>' +
                    '<line x1=' + endLeft + ' y1=' + startTop + ' x2=' + endLeft + ' y2=' + endTop + ' ' +
                    'style="stroke:#fff; stroke-width: 2px; fill: none;' +
                    'marker-end: url(#arrow);"/>' +
                    '/>' +
                    '</svg>';
        }
        else {
            arrowSvgDom =
                '<svg width="100%" height="100%">' +
                    '<defs>' +
                    '<marker id="arrow" markerWidth="13" markerHeight="13" refx="2" refy="6" orient="auto">' +
                    '<path d="M2,1 L2,10 L10,6 L2,2" style="fill:#fff;" />' +
                    '</marker>' +
                    '</defs>' +
                    '<path d="M' + startLeft + ',' + startTop + ' Q' + startLeft + ',' + endTop + ' ' + endLeft + ',' + endTop + '"' +
                    'style="stroke:#fff; stroke-width: 2px; fill: none;' +
                    'marker-end: url(#arrow);"/>' +
                    '/>' +
                    '</svg>';
        }
        var arrowElement = this.element.nativeElement.querySelector(this.DOM_WALKTHROUGH_ARROW_CLASS);
        if (arrowElement.children.length > 0) {
            arrowElement.children[0].remove();
        }
        arrowElement.insertAdjacentHTML('afterbegin', arrowSvgDom);
    };
    /**
     * Check if given icon covers text or if the text cover the hole
     * @param iconLeft
     * @param iconTop
     * @param iconRight
     * @param iconBottom
     */
    WalkthroughComponent.prototype.isItemOnText = function (iconLeft, iconTop, iconRight, iconBottom) {
        var holeCoordinates = this.getOffsetCoordinates(this.walkthroughHoleElements);
        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughTextElement);
        var holeLeft = holeCoordinates.left;
        var holeRight = holeCoordinates.left + holeCoordinates.width;
        var holeTop = holeCoordinates.top;
        var holeBottom = holeCoordinates.top + holeCoordinates.height;
        var textLeft = document.body.clientWidth / 4;
        // needs to be calculated differently due to being a 'pre'. //offsetCoordinates.left;
        var textRight = document.body.clientWidth / 4 * 3;
        // offsetCoordinates.left + offsetCoordinates.width;
        var textTop = offsetCoordinates.top;
        var textBottom = offsetCoordinates.top + offsetCoordinates.height;
        if (!(holeRight < textLeft ||
            holeLeft > textRight ||
            holeBottom < textTop ||
            holeTop > textBottom)) {
            return true;
        }
        return !(iconRight < textLeft ||
            iconLeft > textRight ||
            iconBottom < textTop ||
            iconTop > textBottom);
    };
    /**
     * REcover the offset coordinates
     * @param focusElement
     */
    WalkthroughComponent.prototype.getOffsetCoordinates = function (focusElement) {
        var width;
        var height;
        var left;
        var top;
        width = focusElement.offsetWidth;
        height = focusElement.offsetHeight;
        left = focusElement.getBoundingClientRect().left;
        top = focusElement.getBoundingClientRect().top;
        var sameAncestorForFocusElementAndWalkthrough = this.getSameAncestor(focusElement);
        while (sameAncestorForFocusElementAndWalkthrough) {
            left = left - sameAncestorForFocusElementAndWalkthrough.offsetLeft;
            top = top - sameAncestorForFocusElementAndWalkthrough.offsetTop;
            sameAncestorForFocusElementAndWalkthrough = sameAncestorForFocusElementAndWalkthrough.offsetParent;
        }
        return { top: top, left: left, height: height, width: width };
    };
    // Check once
    WalkthroughComponent.prototype.getSameAncestor = function (focusElement) {
        var retval = null;
        var walkthroughElementParent = this.element.nativeElement.offsetParent;
        var focusElementParent = focusElement.offsetParent;
        var walkthroughAncestorIter = walkthroughElementParent;
        var focusElementAncestorIter = focusElementParent;
        while (walkthroughAncestorIter && !retval) {
            focusElementAncestorIter = focusElementParent; // reset
            while (focusElementAncestorIter && !retval) {
                if (focusElementAncestorIter === walkthroughAncestorIter) {
                    retval = walkthroughAncestorIter;
                }
                else {
                    focusElementAncestorIter = focusElementAncestorIter.offsetParent;
                }
            }
            walkthroughAncestorIter = walkthroughAncestorIter.offsetParent;
        }
        return retval;
    };
    /**
     * Sets the icon displayed according to directive argument
     * @param iconLeft
     * @param iconTop
     * @param paddingLeft
     * @param paddingTop
     */
    WalkthroughComponent.prototype.setIconAndText = function (iconLeft, iconTop, paddingLeft, paddingTop) {
        var offsetCoordinates = this.getOffsetCoordinates(this.walkthroughIconElement);
        var iconHeight = offsetCoordinates.height;
        var iconWidth = offsetCoordinates.width;
        var iconLeftWithPadding = iconLeft + paddingLeft - (iconWidth / 4);
        var iconTopWithPadding = iconTop + paddingTop - (iconHeight / 6);
        var iconRight = iconLeftWithPadding + iconWidth;
        var iconBottom = iconTopWithPadding + iconHeight;
        // Check if text overlaps icon or user explicitly wants text at bottom, if does, move it to bottom
        if (this.forceCaptionLocation === undefined && this.isItemOnText(iconLeftWithPadding, iconTopWithPadding, iconRight, iconBottom)) {
            this.forceCaptionLocation = 'BOTTOM';
        }
        var iconLocation = 'position: absolute;' +
            'left:' + iconLeftWithPadding + 'px;' +
            'top:' + iconTopWithPadding + 'px;';
        this.walkthroughIconElement.setAttribute('style', iconLocation);
    };
    /**
     * Attempts to highlight the given element ID and set Icon to it if exists, if not use default - right under text
     */
    WalkthroughComponent.prototype.setElementLocations = function () {
        var _this = this;
        var selectorElements = (this.focusElementSelector) ? document.querySelectorAll(this.focusElementSelector) : null;
        if (selectorElements && selectorElements.length > 0) {
            if (selectorElements.length > 1) {
                console.warn('Multiple items fit selector, displaying first visible as focus item');
            }
        }
        else {
            console.error('No element found with selector: ' + this.focusElementSelector);
            selectorElements = null;
        }
        var htmlElement = null;
        if (selectorElements) {
            htmlElement = selectorElements[0];
        }
        if (htmlElement) {
            var offsetCoordinates = this.getOffsetCoordinates(htmlElement);
            var width_1 = offsetCoordinates.width;
            var height_1 = offsetCoordinates.height;
            var left_1 = offsetCoordinates.left;
            var top_1 = offsetCoordinates.top;
            this.setFocus(left_1, top_1, width_1, height_1);
            var paddingLeft_1 = parseFloat(this.iconPaddingLeft);
            var paddingTop_1 = parseFloat(this.iconPaddingTop);
            if (!paddingLeft_1) {
                paddingLeft_1 = 0;
            }
            if (!paddingTop_1) {
                paddingTop_1 = 0;
            }
            // If Gesture icon given bind it to hole as well
            if (this.walkthroughIconWanted && this.walkthroughIconWanted !== 'arrow' && this.walkthroughType === 'transparency') {
                setTimeout(function () {
                    _this.setIconAndText(left_1 + width_1 / 2, top_1 + height_1 / 2, paddingLeft_1, paddingTop_1);
                }, 200);
            }
            if (this.walkthroughIconWanted === 'arrow') {
                // Need to update text location according to conditional class added 'walkthrough-transparency-bottom'
                setTimeout(function () {
                    _this.setArrowAndText(left_1, top_1 + paddingTop_1, width_1, height_1, paddingLeft_1);
                }, 200);
            }
            // if tip mode with icon that we want to set padding to, set it
            if (this.walkthroughType === 'tip' &&
                this.walkthroughIconWanted && this.walkthroughIconWanted.length > 0 &&
                (this.iconPaddingLeft || this.iconPaddingTop)) {
                this.setTipIconPadding(this.iconPaddingLeft, this.iconPaddingTop);
            }
        }
        else {
            if (this.focusElementSelector) {
                console.error('Unable to find element requested to be focused: ' + this.focusElementSelector);
            }
            else {
                // if tip mode with icon that we want to set padding to, set it
                if (this.walkthroughType === 'tip' &&
                    this.walkthroughIconWanted && this.walkthroughIconWanted.length > 0 &&
                    (this.iconPaddingLeft || this.iconPaddingTop)) {
                    this.setTipIconPadding(this.iconPaddingLeft, this.iconPaddingTop);
                }
            }
        }
        if (this.focusElementInteractive && selectorElements) {
            for (var i = 0; i < selectorElements.length; ++i) {
                var selectorElement = selectorElements.item(i);
                if (selectorElement.style.zIndex !== '99999') {
                    this._focusElementZindexes[i] = (selectorElement.style.zIndex) ?
                        selectorElement.style.zIndex :
                        ZINDEX_NOT_SET;
                    selectorElement.style.zIndex = '99999';
                }
            }
        }
    };
    /**
     * Sets the walkthrough focus hole on given params with padding
     * @param left
     * @param top
     * @param width
     * @param height
     */
    WalkthroughComponent.prototype.setFocus = function (left, top, width, height) {
        var holeDimensions = 'left:' + (left - this.PADDING_HOLE) + 'px;' +
            'top:' + (top - this.PADDING_HOLE) + 'px;' +
            'width:' + (width + (2 * this.PADDING_HOLE)) + 'px;' +
            'height:' + (height + (2 * this.PADDING_HOLE)) + 'px;';
        if (this.walkthroughHoleElements) {
            this.walkthroughHoleElements.setAttribute('style', holeDimensions);
        }
    };
    /**
     * Set the focus on one element
     */
    WalkthroughComponent.prototype.setFocusOnElement = function () {
        this.setElementLocations();
    };
    /**
     * Send an output event
     */
    WalkthroughComponent.prototype.onWalkthroughContentClicked = function () {
        this.onWalkthroughContentClickedEvent.emit();
    };
    /**
     * Set the padding of the tip icon
     * @param iconPaddingLeft
     * @param iconPaddingTop
     */
    WalkthroughComponent.prototype.setTipIconPadding = function (iconPaddingLeft, iconPaddingTop) {
        var iconLocation = '';
        if (iconPaddingTop) {
            iconLocation += 'margin-top:' + iconPaddingTop + 'px;';
        }
        if (iconPaddingLeft) {
            iconLocation += 'right:' + iconPaddingLeft + '%;';
        }
        this.walkthroughIconElement.setAttribute('style', iconLocation);
    };
    /**
     * Close the walkthrough
     * @param event
     */
    WalkthroughComponent.prototype.onCloseClicked = function (event) {
        if ((!this.useButton) ||
            (event.currentTarget.className.indexOf(this.DOM_WALKTHROUGH_DONE_BUTTON_CLASS) > -1)) {
            this.closeWalkthrough();
        }
    };
    /**
     * close the walkthgrough and sen an output event
     */
    WalkthroughComponent.prototype.closeWalkthrough = function () {
        this.onWalkthroughHideEvent.emit();
        // to avoid disturbance with other SVG it is remove from the DOM
        var arrowElement = this.element.nativeElement.querySelector(this.DOM_WALKTHROUGH_ARROW_CLASS);
        if (arrowElement.children.length > 0) {
            arrowElement.children[0].remove();
        }
        this.isVisible = false;
        // reset z-index on selectedElement
        var selectedElements = (this.focusElementSelector) ? document.querySelectorAll(this.focusElementSelector) : null;
        if (selectedElements) {
            for (var i = 0; i < selectedElements.length; ++i) {
                var curElement = selectedElements.item(i);
                if (this._focusElementZindexes[i] !== ZINDEX_NOT_SET) {
                    curElement.style.zIndex = this._focusElementZindexes[i];
                }
                else {
                    curElement.style.zIndex = 'auto';
                }
            }
            this._focusElementZindexes = [];
        }
    };
    tslib_1.__decorate([
        ViewChild('walkthroughcomponent'),
        tslib_1.__metadata("design:type", ElementRef)
    ], WalkthroughComponent.prototype, "element", void 0);
    tslib_1.__decorate([
        Input('walkthrough-type'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "walkthroughType", void 0);
    tslib_1.__decorate([
        Input('button-caption'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "buttonCaption", void 0);
    tslib_1.__decorate([
        Input('use-button'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "useButton", void 0);
    tslib_1.__decorate([
        Input('main-caption'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "mainCaption", void 0);
    tslib_1.__decorate([
        Input('icon'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "walkthroughIconWanted", void 0);
    tslib_1.__decorate([
        Input('walkthrough-hero-image'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "walkthroughHeroImage", void 0);
    tslib_1.__decorate([
        Input('has-glow'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "hasGlow", void 0);
    tslib_1.__decorate([
        Input('force-caption-location'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "forceCaptionLocation", void 0);
    tslib_1.__decorate([
        Input('has-backdrop'),
        tslib_1.__metadata("design:type", Boolean)
    ], WalkthroughComponent.prototype, "hasBackdrop", void 0);
    tslib_1.__decorate([
        Input('is-round'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "isRound", void 0);
    tslib_1.__decorate([
        Input('icon-padding-left'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "iconPaddingLeft", void 0);
    tslib_1.__decorate([
        Input('icon-padding-top'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "iconPaddingTop", void 0);
    tslib_1.__decorate([
        Input('tip-icon-location'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "tipIconLocation", void 0);
    tslib_1.__decorate([
        Input('tip-color'),
        tslib_1.__metadata("design:type", String)
    ], WalkthroughComponent.prototype, "tipColor", void 0);
    tslib_1.__decorate([
        Input('focus-element-selector'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "focusElementSelector", void 0);
    tslib_1.__decorate([
        Input('focus-element-interactive'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "focusElementInteractive", void 0);
    tslib_1.__decorate([
        Input('is-active'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "isActive", void 0);
    tslib_1.__decorate([
        Output('on-walkthrough-show'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "onWalkthroughShowEvent", void 0);
    tslib_1.__decorate([
        Output('on-walkthrough-hide'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "onWalkthroughHideEvent", void 0);
    tslib_1.__decorate([
        Output('on-walkthrough-content-clicked'),
        tslib_1.__metadata("design:type", Object)
    ], WalkthroughComponent.prototype, "onWalkthroughContentClickedEvent", void 0);
    tslib_1.__decorate([
        HostListener('window:resize', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], WalkthroughComponent.prototype, "onResize", null);
    WalkthroughComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-walkthrough',
            template: "\n  <div #walkthroughcomponent class=\"{{DOM_WALKTHROUGH_CLASS}}\" [hidden]=\"!isVisible\" [ngClass]=\"{'walkthrough-active': isVisible}\" (click)=\"onCloseClicked($event)\">\n  <div class=\"walkthrough-container walkthrough-container-transparency\" [hidden]=\"walkthroughType!=='transparency'\">\n    <div class=\"walkthrough-inner\">\n      <div class=\"{{DOM_TRANSCLUDE}}\">\n        <ng-content select=\"img\"></ng-content>\n      </div>\n      <div class=\"walkthrough-non-transclude-template\" [hidden]=\"hasTransclude\">\n        <div class=\"walkthrough-text-container\" [ngClass]=\"{'walkthrough-top': (!forceCaptionLocation || forceCaptionLocation==='TOP'), 'walkthrough-bottom': forceCaptionLocation==='BOTTOM'}\">\n          <pre class=\"walkthrough-element walkthrough-text\" [innerHTML]=\"mainCaption\"></pre>\n          <img *ngIf=\"walkthroughHeroImage\" class=\"walkthrough-element walkthrough-hero-image\" src=\"{{walkthroughHeroImage}}\" (click)=\"onWalkthroughContentClicked()\">\n        </div>\n        <img class=\"walkthrough-element walkthrough-icon\" [hidden]=\"walkthroughIconWanted && walkthroughIconWanted==='arrow'\" src=\"{{walkthroughIcon}}\">\n        <div class=\"walkthrough-element walkthrough-arrow\" [hidden]=\"walkthroughIconWanted!=='arrow'\"></div>\n        <button class=\"walkthrough-element walkthrough-button-positive walkthrough-done-button\" type=\"button\" *ngIf=\"useButton\" (click)=\"onCloseClicked($event)\">\n          {{ buttonCaption }}\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"walkthrough-container walkthrough-container-tip\" [hidden]=\"walkthroughType!=='tip'\">\n    <div class=\"walkthrough-inner\" [ngClass]=\"{'walkthrough-top': (!forceCaptionLocation || forceCaptionLocation==='TOP'), 'walkthrough-bottom': (forceCaptionLocation==='BOTTOM')}\">\n      <img class=\"walkthrough-element walkthrough-tip-icon-text-box\" [ngClass]=\"{'walkthrough-tip-icon-image-front': tipIconLocation==='FRONT', 'walkthrough-tip-icon-image-back': tipIconLocation=='BACK'}\"\n        [hidden]=\"walkthroughIconWanted && walkthroughIconWanted==='arrow'\" src=\"{{walkthroughIcon}}\" alt=\"icon\">\n      <button class=\"walkthrough-done-button walkthrough-tip-done-button-text-box\" [ngClass]=\"{'walkthrough-tip-done-button-no-icon': !closeIcon}\"\n        type=\"button\" *ngIf=\"useButton\" (click)=\"onCloseClicked($event)\">\n        <img class=\"walkthrough-tip-button-image-text-box\" src=\"{{closeIcon}}\" alt=\"x\">\n      </button>\n      <div class=\"walkthrough-element walkthrough-tip-text-box\" (click)=\"onWalkthroughContentClicked()\" [ngClass]=\"{'walkthrough-tip-text-box-color-black': tipColor=='BLACK', 'walkthrough-tip-text-box-color-white': tipColor=='WHITE'}\">\n        <pre [innerHTML]=\"mainCaption\"></pre>\n        <img *ngIf=\"walkthroughHeroImage\" class=\"walkthrough-element walkthrough-hero-image\" src=\"{{walkthroughHeroImage}}\">\n        <div class=\"{{DOM_TRANSCLUDE}}\">\n          <ng-content select=\"img\"></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div [hidden]=\"!hasBackdrop\" class=\"walkthrough-hole\" [ngClass]=\"{'walkthrough-hole-round': isRound}\" (click)=\"onWalkthroughContentClicked()\">\n  </div>\n  <div [hidden]=\"!(hasGlow && (focusElementSelector))\" class=\"walkthrough-hole walkthrough-hole-glow\" [ngClass]=\"{'walkthrough-hole-round': isRound}\">\n  </div>\n</div>\n",
            styles: ["\n  .walkthrough-hole-glow {\n      position: absolute;\n      outline: none;\n      border: 2px solid #FFFF66 !important;\n      box-shadow: 0 0 36px #FFFF66 !important;\n      -webkit-appearance: none;\n      box-sizing: border-box;\n  }\n\n  .walkthrough-background {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background-color: initial;\n      text-align: center;\n      -webkit-transition: height 0s ease-out .2s, opacity .2s ease-out;\n      -moz-transition: height 0s ease-out .2s, opacity .2s ease-out;\n      -o-transition: height 0s ease-out .2s, opacity .2s ease-out;\n      transition: height 0s ease-out .2s, opacity .2s ease-out;\n      opacity: 0;\n      height: 0;\n      overflow: hidden;\n      z-index: 1000;\n  }\n\n  .walkthrough-hole {\n      position: absolute;\n      -moz-box-shadow: 0 0 0 1997px rgba(0, 0, 0, 0.8);\n      -webkit-box-shadow: 0 0 0 1997px rgba(0, 0, 0, 0.8);\n      box-shadow: 0 0 0 1997px rgba(0, 0, 0, 0.8);\n      -webkit-appearance: none;\n  }\n\n  .walkthrough-element.walkthrough-text {\n      margin-top: 10%;\n      width: 50%;\n      color: #fff;\n      text-align: center;\n  }\n\n  .walkthrough-element.walkthrough-done-button {\n      position: absolute;\n      bottom: 30px;\n      height: 30px;\n      width: 80px;\n      display: inline-block;\n      right: 30px;\n      margin: 0 auto;\n  }\n\n  .walkthrough-button-positive {\n      border-color: #0c63ee;\n      background-color: #387ef5;\n      color: #fff;\n  }\n\n  .walkthrough-button-positive:hover {\n      color: #fff;\n      text-decoration: none;\n  }\n\n  .walkthrough-button-positive.active {\n      border-color: #0c63ee;\n      background-color: #0c63ee;\n      box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.1);\n  }\n\n  .walkthrough-element.walkthrough-icon {\n      height: 200px;\n  }\n\n  .walkthrough-element.walkthrough-arrow {\n      color: #ffffff;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n  }\n\n  .walkthrough-element {\n      z-index: 1001;\n      position: relative;\n      margin-left: auto;\n      margin-right: auto;\n  }\n\n  .walkthrough-background.walkthrough-active {\n      -webkit-transition: opacity .2s ease-out;\n      -moz-transition: opacity .2s ease-out;\n      -o-transition: opacity .2s ease-out;\n      transition: opacity .2s ease-out;\n      opacity: 1;\n      height: 100%;\n      pointer-events: all;\n  }\n\n  .walkthrough-transclude {\n      position: relative;\n      z-index: 2;\n      width: 100%;\n      height: 100%;\n  }\n\n  .walkthrough-hole-round {\n      border-radius: 200px;\n  }\n\n  .walkthrough-tip-text-box {\n      /*top: 128px;*/\n      position: relative;\n      margin-left: 16px;\n      margin-right: 16px;\n      border: 2px solid;\n      border-radius: 35px;\n      padding: 14px;\n      word-break: break-all !important;\n\n      /*margin-top: 0;*/\n      /*margin-bottom: 0;*/\n  }\n\n  .walkthrough-container {\n      float: left;\n      position: relative;\n      height: 100%;\n      width: 100%;\n  }\n\n  .walkthrough-inner {\n      z-index: 3;\n      width: 100%;\n  }\n\n  .walkthrough-container-transparency > .walkthrough-inner {\n      height: 100%;\n  }\n\n  .walkthrough-text-container {\n      position: absolute;\n      width: 100%;\n  }\n\n  .walkthrough-container-tip .walkthrough-top, .walkthrough-container-transparency .walkthrough-top {\n      top: 15px;\n  }\n\n  .walkthrough-container-tip .walkthrough-bottom {\n      bottom: 0;\n  }\n\n  /* take 'done' button into consideration */\n  .walkthrough-container-transparency .walkthrough-bottom {\n      bottom: 70px;\n  }\n\n  .walkthrough-tip-icon-image-front {\n      z-index: 1002;\n  }\n\n  .walkthrough-tip-icon-image-back {\n      z-index: 999;\n  }\n\n  .walkthrough-tip-icon-text-box {\n      height: 142px;\n\n      /*right: 9%;*/\n      position: relative;\n      margin-bottom: -32px;\n      margin-right: -250px;\n\n      /*bottom: 70px;*/\n  }\n\n  .walkthrough-tip-done-button-text-box {\n      /*top: 109px;*/\n      /*bottom: 59px;*/\n      position: relative;\n      z-index: 1002;\n\n      /*right: -7px;*/\n      margin-top: 107px;\n      background-color: transparent;\n      border: 0;\n      float: right;\n  }\n\n  .walkthrough-tip-done-button-no-icon {\n      margin-top: -13px !important;\n  }\n\n  .walkthrough-tip-button-image-text-box {\n      width: 42px;\n      height: 42px;\n  }\n\n  .walkthrough-tip-text-box-color-black {\n      border-color: #ffffff;\n      background-color: #000000;\n      color: #ffffff;\n  }\n\n  .walkthrough-tip-text-box-color-white {\n      border-color: #000000;\n      background-color: #ffffff;\n  }\n\n  .walkthrough-hero-image {\n      margin-top: 15px;\n  }\n\n  .walkthrough-transclude img {\n      height: 100vh;\n      width: 100%;\n  }\n\n  pre {\n      white-space: pre-wrap;\n  }\n  "]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], WalkthroughComponent);
    return WalkthroughComponent;
}());
export { WalkthroughComponent };
//# sourceMappingURL=data:application/json;base64,