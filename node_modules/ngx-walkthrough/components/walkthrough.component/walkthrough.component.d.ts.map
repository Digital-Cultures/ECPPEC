{"version":3,"file":"walkthrough.component.d.ts","sources":["walkthrough.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter } from '@angular/core';\nimport { AfterViewChecked, OnChanges, SimpleChanges, AfterContentChecked } from '@angular/core';\nexport declare class WalkthroughComponent implements AfterContentChecked, AfterViewChecked, OnChanges {\n    _focusElementZindexes: string[];\n    DOM_WALKTHROUGH_CLASS: string;\n    DOM_WALKTHROUGH_TRANSPARENCY_TEXT_CLASS: string;\n    DOM_WALKTHROUGH_TIP_TEXT_CLASS: string;\n    DOM_WALKTHROUGH_HOLE_CLASS: string;\n    DOM_WALKTHROUGH_TRANSPARENCY_ICON_CLASS: string;\n    DOM_WALKTHROUGH_TIP_ICON_CLASS: string;\n    DOM_WALKTHROUGH_ARROW_CLASS: string;\n    DOM_WALKTHROUGH_DONE_BUTTON_CLASS: string;\n    DOM_TRANSCLUDE: string;\n    BUTTON_CAPTION_DONE: string;\n    PADDING_HOLE: number;\n    PADDING_ARROW_START: number;\n    PADDING_ARROW_MARKER: number;\n    isVisible: boolean;\n    hasTransclude: boolean;\n    walkthroughHoleElements: HTMLElement;\n    walkthroughTextElement: HTMLElement;\n    walkthroughIconElement: HTMLElement;\n    walkthroughArrowElement: HTMLElement;\n    closeIcon: string | undefined;\n    walkthroughIcon: any;\n    single_tap: string;\n    double_tap: string;\n    swipe_down: string;\n    swipe_left: string;\n    swipe_right: string;\n    swipe_up: string;\n    element: ElementRef;\n    walkthroughType: string | undefined;\n    buttonCaption: string | undefined;\n    useButton: boolean;\n    mainCaption: string | undefined;\n    walkthroughIconWanted: string | undefined;\n    walkthroughHeroImage: any;\n    hasGlow: boolean;\n    forceCaptionLocation: string | undefined;\n    hasBackdrop: boolean | undefined;\n    isRound: boolean;\n    iconPaddingLeft: string;\n    iconPaddingTop: string;\n    tipIconLocation: string | undefined;\n    tipColor: string | undefined;\n    focusElementSelector: string;\n    focusElementInteractive: boolean;\n    isActive: boolean;\n    onWalkthroughShowEvent: EventEmitter<void>;\n    onWalkthroughHideEvent: EventEmitter<void>;\n    onWalkthroughContentClickedEvent: EventEmitter<void>;\n    onResize(event: any): void;\n    constructor();\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterContentChecked(): void;\n    /**\n     * resize handler method\n     */\n    resizeHandler(): void;\n    /**\n     * init the element of the walkthrough\n     */\n    setWalkthroughElements(): void;\n    ngAfterViewChecked(): void;\n    /**\n     * Get the icon specify by the input\n     * @param icon\n     */\n    getIcon(icon: string | undefined): string;\n    /**\n     * Convert url in blob\n     * @param url\n     */\n    toDataURL(url: string): Promise<string | ArrayBuffer | null>;\n    /**\n     * Set the text position accordint the hole and arrow position plus set the arrow\n     * @param pointSubjectLeft\n     * @param pointSubjectTop\n     * @param pointSubjectWidth\n     * @param pointSubjectHeight\n     * @param paddingLeft\n     */\n    setArrowAndText(pointSubjectLeft: number, pointSubjectTop: number, pointSubjectWidth: number, pointSubjectHeight: number, paddingLeft: number): void;\n    /**\n     * Check if given icon covers text or if the text cover the hole\n     * @param iconLeft\n     * @param iconTop\n     * @param iconRight\n     * @param iconBottom\n     */\n    isItemOnText(iconLeft: number, iconTop: number, iconRight: number, iconBottom: number): boolean;\n    /**\n     * REcover the offset coordinates\n     * @param focusElement\n     */\n    getOffsetCoordinates(focusElement: HTMLElement): {\n        top: number;\n        left: number;\n        height: number;\n        width: number;\n    };\n    getSameAncestor(focusElement: HTMLElement): any;\n    /**\n     * Sets the icon displayed according to directive argument\n     * @param iconLeft\n     * @param iconTop\n     * @param paddingLeft\n     * @param paddingTop\n     */\n    setIconAndText(iconLeft: number, iconTop: number, paddingLeft: number, paddingTop: number): void;\n    /**\n     * Attempts to highlight the given element ID and set Icon to it if exists, if not use default - right under text\n     */\n    setElementLocations(): void;\n    /**\n     * Sets the walkthrough focus hole on given params with padding\n     * @param left\n     * @param top\n     * @param width\n     * @param height\n     */\n    setFocus(left: number, top: number, width: number, height: number): void;\n    /**\n     * Set the focus on one element\n     */\n    setFocusOnElement(): void;\n    /**\n     * Send an output event\n     */\n    onWalkthroughContentClicked(): void;\n    /**\n     * Set the padding of the tip icon\n     * @param iconPaddingLeft\n     * @param iconPaddingTop\n     */\n    setTipIconPadding(iconPaddingLeft: string, iconPaddingTop: string): void;\n    /**\n     * Close the walkthrough\n     * @param event\n     */\n    onCloseClicked(event: any): void;\n    /**\n     * close the walkthgrough and sen an output event\n     */\n    closeWalkthrough(): void;\n}\n"]}