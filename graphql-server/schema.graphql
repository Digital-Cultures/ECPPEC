### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum GroupCategory {
  by_election_cause
  by_election_general
  constituency
  contested
  countyboroughuniv
  election_month
  election_year
  franchise_type
}

enum LocationType {
  borough
  county
}

input OrderByDate {
  election_date: SortOrder!
}

type Query {
  artefact(description: String, display_name: String, manifest: String, source: String): [artefact!]!
  artefact_attributes(artefact_id: Int, attribute_name: String, attribute_value: String): [artefact_attributes!]!
  artefact_files(display_label: String, file_type: String, filename: String, id: Int): [artefact_files!]!
  candidate(born: Int, born_gte: Int, born_lte: Int, candidate_id: Int, candidate_name: String, died: Int, died_gte: Int, died_lte: Int, short_name: String, suffix: String, title: [String]): [candidate!]!
  candidates_elections(candidate_id: Int, election_id: String, overturned_by: String, returned: Int, running_as: String, seated: Int): [candidatesElection!]!
  constituencies(constituency: String, constituency_id: Int, has_polling_data: Boolean): [constituencies!]!
  election(by_election_cause: String, by_election_general: String, constituency: String, constituency_id: Int, contested: String, countyboroughuniv: String, election_month: String, election_year_gte: Int = 1500, election_year_lte: Int = 2020, electorate_size_est_gte: Int, electorate_size_est_lte: Int, franchise_type: [String], office: String): [election!]!
  election_attributes(attribute_name: String, election_id: String): [electionAttributes!]!
  election_dates(election_year: Int = 0, election_year_gte: Int = 0, election_year_lte: Int = 9999, orderBy: OrderByDate): [electionDates!]!
  location(constituency: String): [locations!]!
  location_from(distance: Float = 1000, lat: Float, lng: Float): [locations_from!]!
  occupations_group(occupation: String): [occupations_map!]!
  poll_book(constituency_id: Int): [poll_books!]!
  stat_num_poll_books(constituency_id: Int): Int
  stats(constituency: String, num_contested_all_gte: Int, num_contested_all_lte: Int, num_contested_by_gte: Int, num_contested_by_lte: Int, num_contested_general_gte: Int, num_contested_general_lte: Int, num_elections_all_gte: Int, num_elections_all_lte: Int, num_elections_by_gte: Int, num_elections_by_lte: Int, num_elections_general_gte: Int, num_elections_general_lte: Int, num_uncontested_all_gte: Int, num_uncontested_all_lte: Int, num_uncontested_by_gte: Int, num_uncontested_by_lte: Int, num_uncontested_general_gte: Int, num_uncontested_general_lte: Int, percent_contested_all_gte: Float, percent_contested_all_lte: Float, percent_contested_by_gte: Float, percent_contested_by_lte: Float, percent_contested_general_gte: Float, percent_contested_general_lte: Float, percent_uncontested_all_gte: Float, percent_uncontested_all_lte: Float, percent_uncontested_by_gte: Float, percent_uncontested_by_lte: Float, percent_uncontested_general_gte: Float, percent_uncontested_general_lte: Float): [stats!]!
  vote(line: Int, page: Int): [vote!]!
  voter(forename: String, guild: String, occupation: String, surname: String): [voter!]!
  voters_occupations(occupation: String): [voters_occupations!]!
}

enum SortOrder {
  asc
  desc
}

type aggregate {
  count: Int
}

type artefact {
  artefact_attributes: [artefact_attributes]
  attribution: String
  description: String
  display_name: String
  id: Int!
  license: String
  manifest: String
  source: String
  source_link: String
}

type artefact_attributes {
  artefact: [artefact]
  artefact_files: [artefact_files]
  artefact_id: Int!
  attribute_name: String
  attribute_value: String
  candidates: [candidate]
  constituencies: [constituencies]
  election: [election]
  id: Int!
}

type artefact_files {
  display_label: String
  file_name: String
  file_type: String!
  id: Int!
}

type candidate {
  born: Int
  candidate_id: Int!
  candidate_name: String
  candidates_elections(returned: Int, seated: Int): [candidatesElection]
  died: Int
  short_name: String
  suffix: String
  title: String
  votes: [vote]
}

type candidatesElection {
  candidate: [candidate]
  candidate_id: Int!
  election: [election]
  election_id: String!
  overturned_by: String
  returned: Boolean
  running_as: String
  seated: Boolean
}

type constituencies {
  constituency: String
  constituency_id: Int!
  elections: [election]
  electionsCount: Int
  has_polling_data: Boolean
  lat: Float
  lng: Float
  stats: [stats]
}

type election {
  by_election_cause: String
  by_election_general: String
  candidates_elections: [candidatesElection]
  constituency: String
  contested: String
  countyboroughuniv: String
  election_date: DateTime
  election_id: String
  election_month: String
  election_year: String
  electorate_size_desc: String
  electorate_size_est: String
  franchise_detail: String
  franchise_type: String
  has_data: Boolean
  latitude: String
  longitude: String
  notable_remarks: String
  notes: String
  office: String
  poll_books: [poll_books]
  pollbook_id: String
  vote: [vote]
  voterate: String
}

type electionAttributes {
  attribute_name: String!
  attribute_value: String!
  election: [election]
  election_id: String!
}

type electionDates {
  election: [election]
  election_date: DateTime
  election_id: String!
}

type locations {
  constituencies: [constituencies]
  constituency: String
  constituency_id: String
  lat: Float
  lng: Float
}

type locations_from {
  constituency_id: String
  constituency_name: String
  distance: Float
  lat: Float
  lng: Float
}

type occupations_map {
  level_code: String
  level_name: String
  level_num: Int
  voters: [voter]
}

type poll_books {
  citation: String
  constituencies: constituencies
  constituency_id: String
  election_id: String
  elections: election
  holdings: String
  notes: String
  pollbook_id: String
  printms: String
  source: String
}

type stats {
  constituencies: [constituencies]
  constituency: String
  constituency_id: String
  num_contested_all: Int
  num_contested_by: Int
  num_contested_general: Int
  num_elections_all: Int
  num_elections_by: Int
  num_elections_general: Int
  num_uncontested_all: Int
  num_uncontested_by: Int
  num_uncontested_general: Int
  percent_contested_all: Float
  percent_contested_by: Float
  percent_contested_general: Float
  percent_uncontested_all: Float
  percent_uncontested_by: Float
  percent_uncontested_general: Float
}

type vote {
  candidate: [candidate]
  constituencies: [constituencies]
  elections: [election]
  line: Int
  page: Int
  poll_books: [poll_books]
  poll_date: String
  voter(forename: String, guild: String, occupation: String, surname: String): [voter]
  votes_id: Int
}

type voter {
  abode: String
  abode_std: String
  city: String
  class: String
  county: String
  forename: String
  guild: String
  notes: String
  occupation: String
  occupation_ideal: String
  occupations_level1: [occupations_map]
  occupations_level2: [occupations_map]
  parish: String
  street: String
  suffix: String
  suffix_ideal: String
  surname: String
  title: String
  vote: [vote]
  voter_id: Int
}

type voters_occupations {
  level1: [occupations_map]
  level2: [occupations_map]
  occupation: String
  voter_id: String
  voters: [voter]
}
