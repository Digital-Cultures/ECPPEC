/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Candidate: { // root type
    candidate_id: number; // Int!
    candidate_name?: string | null; // String
    short_name?: string | null; // String
    title?: string | null; // String
  }
  Query: {};
  candidates_elections: { // root type
    candidate_id: number; // Int!
    election_id: string; // String!
    running_as?: string | null; // String
  }
  elections: { // root type
    by_election_cause?: string | null; // String
    by_election_general?: string | null; // String
    constituency?: string | null; // String
    contested?: string | null; // String
    countyboroughuniv?: string | null; // String
    election_id: string; // String!
    election_month?: string | null; // String
    election_year?: string | null; // String
    franchise_detail?: string | null; // String
    franchise_type?: string | null; // String
    latitude?: string | null; // String
    longitude?: string | null; // String
    notes?: string | null; // String
    pollbook_id: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Candidate: { // field return type
    candidate_id: number; // Int!
    candidate_name: string | null; // String
    candidates_elections: Array<NexusGenRootTypes['candidates_elections'] | null> | null; // [candidates_elections]
    short_name: string | null; // String
    title: string | null; // String
  }
  Query: { // field return type
    candidates: NexusGenRootTypes['Candidate'][]; // [Candidate!]!
    candidates_elections: NexusGenRootTypes['candidates_elections'][]; // [candidates_elections!]!
    elections: NexusGenRootTypes['elections'][]; // [elections!]!
  }
  candidates_elections: { // field return type
    candidate_id: number; // Int!
    election_id: string; // String!
    elections: Array<NexusGenRootTypes['elections'] | null> | null; // [elections]
    running_as: string | null; // String
  }
  elections: { // field return type
    by_election_cause: string | null; // String
    by_election_general: string | null; // String
    candidates_elections: Array<NexusGenRootTypes['candidates_elections'] | null> | null; // [candidates_elections]
    constituency: string | null; // String
    contested: string | null; // String
    countyboroughuniv: string | null; // String
    election_id: string; // String!
    election_month: string | null; // String
    election_year: string | null; // String
    franchise_detail: string | null; // String
    franchise_type: string | null; // String
    latitude: string | null; // String
    longitude: string | null; // String
    notes: string | null; // String
    pollbook_id: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Candidate: { // field return type name
    candidate_id: 'Int'
    candidate_name: 'String'
    candidates_elections: 'candidates_elections'
    short_name: 'String'
    title: 'String'
  }
  Query: { // field return type name
    candidates: 'Candidate'
    candidates_elections: 'candidates_elections'
    elections: 'elections'
  }
  candidates_elections: { // field return type name
    candidate_id: 'Int'
    election_id: 'String'
    elections: 'elections'
    running_as: 'String'
  }
  elections: { // field return type name
    by_election_cause: 'String'
    by_election_general: 'String'
    candidates_elections: 'candidates_elections'
    constituency: 'String'
    contested: 'String'
    countyboroughuniv: 'String'
    election_id: 'String'
    election_month: 'String'
    election_year: 'String'
    franchise_detail: 'String'
    franchise_type: 'String'
    latitude: 'String'
    longitude: 'String'
    notes: 'String'
    pollbook_id: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    candidates: { // args
      candidate_id?: number | null; // Int
      candidate_name?: string | null; // String
    }
    candidates_elections: { // args
      candidate_id?: number | null; // Int
      election_id?: string | null; // String
    }
    elections: { // args
      contested?: string | null; // String
      election_year?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}